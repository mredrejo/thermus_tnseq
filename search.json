[
  {
    "objectID": "genes_classification.html",
    "href": "genes_classification.html",
    "title": "TnSeq Genes classification",
    "section": "",
    "text": "First, let’s check the density plots, to see how the data are grouped.\n\n\nShow the code\n#read data\nscores &lt;- read.csv2(\"scores80.csv\")\nscores &lt;- cbind(rownames(scores),scores[,1:4])\nnames(scores) &lt;- c(\"Genes\",\"HB27\",\"HB27_rep\",\"Ppol\",\"Ppol_rep\")\nscores[,2:5] &lt;- lapply(scores[,2:5],as.numeric)\nscores$mean &lt;- apply(scores[,2:5], 1, mean)\n#density plot\nggplot(data=stack(scores[,2:6]))+geom_density(aes(x=as.numeric(values),fill=ind,color=ind), alpha=0.2)+\n    scale_color_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n  scale_fill_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n    geom_vline(aes(xintercept=-0.65), color=\"grey\", linetype=\"dashed\")+\n    geom_vline(aes(xintercept=0.5), color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") +\n  theme_bw()\n\n\n\n\n\nFigure 9. Density plot of Z-scores.\n\n\n\n\nShow the code\n#Hist\n#ggplot(data=stack(scores[,2:6]))+geom_histogram(aes(x=as.numeric(values),fill=ind,color=ind, alpha=0.2),binwidth=0.2)+\n#     scale_color_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n#     scale_fill_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n#     geom_vline(aes(xintercept=-0.6), color=\"grey\", linetype=\"dashed\")+\n#     geom_vline(aes(xintercept=1),\n#                color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") + facet_grid(~ind) +\n#     theme_bw()\n\n\nIn agreement with Figure 8, we can see that most of the genes are grouped at a Z-score &lt;0, with a peak about -0.5 (grey line) and a shoulder centered at 1 (orange line). That suggest that most genes have a low number of insertions and there is a gradient of genes up to a very high number of insertions.\nIn previous bacteria TnSeq data scores follow a bimodal distribution made up of an exponential distribution of the essential genes and a gamma family curve for non-essential ones, with an inflection point between them (Goodall et al. 2018.; Moule et al. 2014; Valentino et al. 2014; Higgins et al. 2020; Ramsey et al. 2020). However, in our data there is no inflection point, so we confirm that there are no clear groups of essential/no essential genes and only a gamma distribution can be fitted (p-value 2x10-16).\nThus, to attempt an approximated classification of the genes we are going to perform unsupervised cluster analysis. First, we will test the number of clusters that allow us to better classify the genes.\n\n\nShow the code\n#wss o silhoutte?\nwss &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"wss\" , linecolor = \"darkblue\") + labs(title= \"Elbow (WSS)\") \nsi &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"silhouette\", linecolor = \"darkblue\")+ labs(title= \"SILHOUETTE\") \n\n#kmeans, pam \npam &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = cluster::pam, method = \"silhouette\", k.max = 10) + labs(title= \"PAM clustering\") \nk &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = kmeans, method = \"silhouette\", k.max = 10) + labs(title= \"K-means clustering\")\n\n\n\nggarrange(wss, si, pam,k,\n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 10. Determination of best number of clusters for the TnSeq data, using the elbow (A) or silhouette (B) method. Panels (C) and (D) show the number of clusters by PAM and K-means, respectively.)\n\n\n\n\nNow, we will compare the clustering method, using K-means and PAM\n\n\nShow the code\n#kmeans\nkmclust2 &lt;- eclust(scores[,2:5], k=2, FUNcluster=\"kmeans\", hc_metric=\"manhattan\",graph=F)\nk1 &lt;- fviz_cluster(object = kmclust2, data = datos, ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"Kmeans clustering\") +\n  theme(legend.position = \"none\")\n\nk2 &lt;- fviz_silhouette(kmclust2, palette=\"jco\")+  theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  480          0.33\n2       2 1783          0.68\n\n\nShow the code\n#pams\nset.seed(123)\npam_clusters &lt;- pam(x= scores[,2:5], k=2, metric = \"manhattan\")\n\n\n#visualization\np1 &lt;- fviz_cluster(object = pam_clusters, data = scores[,2:5], ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"PAM clustering\") +\n  theme(legend.position = \"none\")\n\n\np2 &lt;- fviz_silhouette(pam_clusters, palette=\"jco\")+    theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  584          0.30\n2       2 1679          0.73\n\n\nShow the code\nggarrange(k1, k2, p1,p2,\n          labels = c(\"A\", \"\",\"B\",\"\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 11. Comparison of clustering method. Cluster results and silhouette plots for K-Means (A) and PAM (B) clustering method is shown.\n\n\n\n\nThe Kmeans clustering is slightly better as its clusters area are closer to the silhouette mean, thus we will keep this clusters and name them as “Highly permissive” and “Intermediate” genes. The first group contains the genes with higher Z-score mean and the second large group contains the genes with less insertions. To highlight the top genes with less insertions, we empirically select the ~5% genes with less insertions as “Less permissive” genes, corresponding to 301 genes with a Z-score &lt; -0.55. The following contain the genes Z-score and classification.\n\n\nShow the code\n#full table\n#subset the ~5% genes with less insertions\ndatos.j = cbind(scores, cluster= kmclust2$cluster)\n#how many?\n#nrow(datos.j[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55) ,])\n\ndatos.j$cluster[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55)] &lt;- 3\ndatos.j$cluster &lt;- as.factor(datos.j$cluster)\n\ndatos.j &lt;- datos.j %&gt;% \n    mutate(across(c('HB27', 'HB27_rep',\"Ppol\",\"Ppol_rep\",\"mean\"), round, 3)) %&gt;% \nmutate(cluster = case_when(cluster == 1 ~ \"Highly permissive\", cluster == 2 ~ \"Intermediate\",cluster==3 ~ \"Less permissive\")) \n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\nShow the code\ndatatable(datos.j,rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\n\n\n\n\n\n\nLet’s see how are the groups in each sample. Note that the genes are ordered by their mean score.\n\n\nShow the code\ntmp &lt;- cbind(stack(datos.j[,2:5]),datos.j[,6:7])\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\nggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=cluster), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\nFigure 12. Plot of Tn insertion Z-scores per gene and group. Values were sorted by the average of all samples.\n\n\n\n\nShow the code\n#histogram\n#ggplot(data=tmp) +xlab(\"Z-Score (log2)\") + ylab(\"Gene count\") + \n #    geom_histogram(aes(x=as.numeric(values),color=cluster, fill=cluster), alpha=0.7, binwidth=0.2)+\n  #   theme_classic() + facet_grid(~ind) \n\n\n\n\n\nAlthough there is overall no differences between strains, we are going to check in detail if there is any gene with statistically significant more/less Tn insertions.\n\n\nShow the code\n#meethod from https://lashlock.github.io/compbio/R_presentation.html\n#we need to use raw counts as integers, no Z-scores\ncountData &lt;- read.csv('tnseq_counts_scores.csv', header = TRUE, sep = \";\")\ncountData &lt;- countData[,c(1,2,5,8,11)]\ncountData[,2:5] &lt;- lapply(countData[,2:5], as.integer)\nhead(countData)\n\n\n     Genes Counts_HB27 Counts_HB27_rep Counts_ppol Counts_ppol_rep\n1 TT_C0001         922             497         152             964\n2 TT_C0002          33               8           7               1\n3 TT_C0003          47              21           6               0\n4 TT_C0004         299             311         112            1201\n5 TT_C0005         292             391         185             364\n6 TT_C0006          89              58          54             342\n\n\nShow the code\nmetaData &lt;- data.frame(names(countData[,2:5]),c(\"HB27\",\"HB27\",\"Ppol\",\"Ppol\"),c(\"Exp1\",\"Exp2\",\"Exp1\",\"Exp2\"))\n\nnames(metaData) &lt;- c(\"Sample\",\"Strain\",\"Experiment\")\n\ndds &lt;- DESeqDataSetFromMatrix(countData=countData, \n                              colData=metaData, \n                              design=~Strain, tidy = TRUE)\n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nShow the code\ndds &lt;- DESeq(dds)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\nShow the code\nres &lt;- results(dds)\n\nres &lt;- res[order(res$padj),]\n\nres$diffexpressed &lt;- \"NO\"\nres$diffexpressed[res$log2FoldChange &gt; 2 & res$padj &lt; 0.01] &lt;- \"UP\"\nres$diffexpressed[res$log2FoldChange &lt; -2 & res$padj &lt; 0.01] &lt;- \"DOWN\"\n\nlibrary(ggrepel)\n# plot adding up all layers we have seen so far\nggplot(data=res, aes(x=log2FoldChange, y=-log10(padj), col=diffexpressed, label=row.names(res))) +\n        geom_point() + \n        theme_minimal() +\n        geom_text_repel() +\n        scale_color_manual(values=c(\"blue\", \"black\", \"red\")) +\n        geom_vline(xintercept=c(-2, 2), col=\"red\") +\n        geom_hline(yintercept=-log10(0.01), col=\"red\")\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\nWarning: ggrepel: 1537 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nFigure 13. Volcano plot of differential Tn5 target genes in HB27 vs. Ppol strains (fold change &gt;4, p.adj&lt;0.01).\n\n\n\n\nAs we can see there are very few genes different between samples. The genes with less insertions in the wt HB27 than in Ppol strain are TT_C1170 (CRISPR associated protein), TT_C1360 (DNA-binding response regulator MtrA) and TT_C1263 (Metalloenzyme), and the genes with more insertions are TT_C0560 (Phosphopantetheine adenylyltransferase), TT_C0409 (SufE protein probably involved in Fe-S center assembly), TT_C0135 (Phenylacetate-coenzyme A ligase), TT_C1310 (50S ribosomal protein L30), and TT_C1600 (Inorganic pyrophosphatase)."
  },
  {
    "objectID": "genes_classification.html#classification-of-genes-by-z-scores",
    "href": "genes_classification.html#classification-of-genes-by-z-scores",
    "title": "TnSeq Genes classification",
    "section": "",
    "text": "First, let’s check the density plots, to see how the data are grouped.\n\n\nShow the code\n#read data\nscores &lt;- read.csv2(\"scores80.csv\")\nscores &lt;- cbind(rownames(scores),scores[,1:4])\nnames(scores) &lt;- c(\"Genes\",\"HB27\",\"HB27_rep\",\"Ppol\",\"Ppol_rep\")\nscores[,2:5] &lt;- lapply(scores[,2:5],as.numeric)\nscores$mean &lt;- apply(scores[,2:5], 1, mean)\n#density plot\nggplot(data=stack(scores[,2:6]))+geom_density(aes(x=as.numeric(values),fill=ind,color=ind), alpha=0.2)+\n    scale_color_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n  scale_fill_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n    geom_vline(aes(xintercept=-0.65), color=\"grey\", linetype=\"dashed\")+\n    geom_vline(aes(xintercept=0.5), color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") +\n  theme_bw()\n\n\n\n\n\nFigure 9. Density plot of Z-scores.\n\n\n\n\nShow the code\n#Hist\n#ggplot(data=stack(scores[,2:6]))+geom_histogram(aes(x=as.numeric(values),fill=ind,color=ind, alpha=0.2),binwidth=0.2)+\n#     scale_color_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n#     scale_fill_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n#     geom_vline(aes(xintercept=-0.6), color=\"grey\", linetype=\"dashed\")+\n#     geom_vline(aes(xintercept=1),\n#                color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") + facet_grid(~ind) +\n#     theme_bw()\n\n\nIn agreement with Figure 8, we can see that most of the genes are grouped at a Z-score &lt;0, with a peak about -0.5 (grey line) and a shoulder centered at 1 (orange line). That suggest that most genes have a low number of insertions and there is a gradient of genes up to a very high number of insertions.\nIn previous bacteria TnSeq data scores follow a bimodal distribution made up of an exponential distribution of the essential genes and a gamma family curve for non-essential ones, with an inflection point between them (Goodall et al. 2018.; Moule et al. 2014; Valentino et al. 2014; Higgins et al. 2020; Ramsey et al. 2020). However, in our data there is no inflection point, so we confirm that there are no clear groups of essential/no essential genes and only a gamma distribution can be fitted (p-value 2x10-16).\nThus, to attempt an approximated classification of the genes we are going to perform unsupervised cluster analysis. First, we will test the number of clusters that allow us to better classify the genes.\n\n\nShow the code\n#wss o silhoutte?\nwss &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"wss\" , linecolor = \"darkblue\") + labs(title= \"Elbow (WSS)\") \nsi &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"silhouette\", linecolor = \"darkblue\")+ labs(title= \"SILHOUETTE\") \n\n#kmeans, pam \npam &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = cluster::pam, method = \"silhouette\", k.max = 10) + labs(title= \"PAM clustering\") \nk &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = kmeans, method = \"silhouette\", k.max = 10) + labs(title= \"K-means clustering\")\n\n\n\nggarrange(wss, si, pam,k,\n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 10. Determination of best number of clusters for the TnSeq data, using the elbow (A) or silhouette (B) method. Panels (C) and (D) show the number of clusters by PAM and K-means, respectively.)\n\n\n\n\nNow, we will compare the clustering method, using K-means and PAM\n\n\nShow the code\n#kmeans\nkmclust2 &lt;- eclust(scores[,2:5], k=2, FUNcluster=\"kmeans\", hc_metric=\"manhattan\",graph=F)\nk1 &lt;- fviz_cluster(object = kmclust2, data = datos, ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"Kmeans clustering\") +\n  theme(legend.position = \"none\")\n\nk2 &lt;- fviz_silhouette(kmclust2, palette=\"jco\")+  theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  480          0.33\n2       2 1783          0.68\n\n\nShow the code\n#pams\nset.seed(123)\npam_clusters &lt;- pam(x= scores[,2:5], k=2, metric = \"manhattan\")\n\n\n#visualization\np1 &lt;- fviz_cluster(object = pam_clusters, data = scores[,2:5], ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"PAM clustering\") +\n  theme(legend.position = \"none\")\n\n\np2 &lt;- fviz_silhouette(pam_clusters, palette=\"jco\")+    theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  584          0.30\n2       2 1679          0.73\n\n\nShow the code\nggarrange(k1, k2, p1,p2,\n          labels = c(\"A\", \"\",\"B\",\"\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 11. Comparison of clustering method. Cluster results and silhouette plots for K-Means (A) and PAM (B) clustering method is shown.\n\n\n\n\nThe Kmeans clustering is slightly better as its clusters area are closer to the silhouette mean, thus we will keep this clusters and name them as “Highly permissive” and “Intermediate” genes. The first group contains the genes with higher Z-score mean and the second large group contains the genes with less insertions. To highlight the top genes with less insertions, we empirically select the ~5% genes with less insertions as “Less permissive” genes, corresponding to 301 genes with a Z-score &lt; -0.55. The following contain the genes Z-score and classification.\n\n\nShow the code\n#full table\n#subset the ~5% genes with less insertions\ndatos.j = cbind(scores, cluster= kmclust2$cluster)\n#how many?\n#nrow(datos.j[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55) ,])\n\ndatos.j$cluster[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55)] &lt;- 3\ndatos.j$cluster &lt;- as.factor(datos.j$cluster)\n\ndatos.j &lt;- datos.j %&gt;% \n    mutate(across(c('HB27', 'HB27_rep',\"Ppol\",\"Ppol_rep\",\"mean\"), round, 3)) %&gt;% \nmutate(cluster = case_when(cluster == 1 ~ \"Highly permissive\", cluster == 2 ~ \"Intermediate\",cluster==3 ~ \"Less permissive\")) \n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\nShow the code\ndatatable(datos.j,rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\n\n\n\n\n\n\nLet’s see how are the groups in each sample. Note that the genes are ordered by their mean score.\n\n\nShow the code\ntmp &lt;- cbind(stack(datos.j[,2:5]),datos.j[,6:7])\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\nggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=cluster), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\nFigure 12. Plot of Tn insertion Z-scores per gene and group. Values were sorted by the average of all samples.\n\n\n\n\nShow the code\n#histogram\n#ggplot(data=tmp) +xlab(\"Z-Score (log2)\") + ylab(\"Gene count\") + \n #    geom_histogram(aes(x=as.numeric(values),color=cluster, fill=cluster), alpha=0.7, binwidth=0.2)+\n  #   theme_classic() + facet_grid(~ind) \n\n\n\n\n\nAlthough there is overall no differences between strains, we are going to check in detail if there is any gene with statistically significant more/less Tn insertions.\n\n\nShow the code\n#meethod from https://lashlock.github.io/compbio/R_presentation.html\n#we need to use raw counts as integers, no Z-scores\ncountData &lt;- read.csv('tnseq_counts_scores.csv', header = TRUE, sep = \";\")\ncountData &lt;- countData[,c(1,2,5,8,11)]\ncountData[,2:5] &lt;- lapply(countData[,2:5], as.integer)\nhead(countData)\n\n\n     Genes Counts_HB27 Counts_HB27_rep Counts_ppol Counts_ppol_rep\n1 TT_C0001         922             497         152             964\n2 TT_C0002          33               8           7               1\n3 TT_C0003          47              21           6               0\n4 TT_C0004         299             311         112            1201\n5 TT_C0005         292             391         185             364\n6 TT_C0006          89              58          54             342\n\n\nShow the code\nmetaData &lt;- data.frame(names(countData[,2:5]),c(\"HB27\",\"HB27\",\"Ppol\",\"Ppol\"),c(\"Exp1\",\"Exp2\",\"Exp1\",\"Exp2\"))\n\nnames(metaData) &lt;- c(\"Sample\",\"Strain\",\"Experiment\")\n\ndds &lt;- DESeqDataSetFromMatrix(countData=countData, \n                              colData=metaData, \n                              design=~Strain, tidy = TRUE)\n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nShow the code\ndds &lt;- DESeq(dds)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\nShow the code\nres &lt;- results(dds)\n\nres &lt;- res[order(res$padj),]\n\nres$diffexpressed &lt;- \"NO\"\nres$diffexpressed[res$log2FoldChange &gt; 2 & res$padj &lt; 0.01] &lt;- \"UP\"\nres$diffexpressed[res$log2FoldChange &lt; -2 & res$padj &lt; 0.01] &lt;- \"DOWN\"\n\nlibrary(ggrepel)\n# plot adding up all layers we have seen so far\nggplot(data=res, aes(x=log2FoldChange, y=-log10(padj), col=diffexpressed, label=row.names(res))) +\n        geom_point() + \n        theme_minimal() +\n        geom_text_repel() +\n        scale_color_manual(values=c(\"blue\", \"black\", \"red\")) +\n        geom_vline(xintercept=c(-2, 2), col=\"red\") +\n        geom_hline(yintercept=-log10(0.01), col=\"red\")\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\nWarning: ggrepel: 1537 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nFigure 13. Volcano plot of differential Tn5 target genes in HB27 vs. Ppol strains (fold change &gt;4, p.adj&lt;0.01).\n\n\n\n\nAs we can see there are very few genes different between samples. The genes with less insertions in the wt HB27 than in Ppol strain are TT_C1170 (CRISPR associated protein), TT_C1360 (DNA-binding response regulator MtrA) and TT_C1263 (Metalloenzyme), and the genes with more insertions are TT_C0560 (Phosphopantetheine adenylyltransferase), TT_C0409 (SufE protein probably involved in Fe-S center assembly), TT_C0135 (Phenylacetate-coenzyme A ligase), TT_C1310 (50S ribosomal protein L30), and TT_C1600 (Inorganic pyrophosphatase)."
  },
  {
    "objectID": "genes_classification.html#genes-functional-classification",
    "href": "genes_classification.html#genes-functional-classification",
    "title": "TnSeq Genes classification",
    "section": "Genes functional classification",
    "text": "Genes functional classification\n\nCOG\n\n\nShow the code\nnog &lt;- read_xlsx(\"00_raw/refs/MM_x4qgl_mt.emapper.annotations.xlsx\",sheet=1,skip=2)\nnog$seed_ortholog &lt;- gsub(\"262724.\",\"\",nog$seed_ortholog)\nnames(nog)[2] &lt;- \"Genes\"\n\n\nAfter calculating the Z-scores, we are going to group the genes by their functions, using COG and KEGG functional categories. Functional annotation was obtained at EggNog mapper website Cantalapiedra et al. (2021). We could annotate 2006 (92.4%) of the HB27 proteins.\n\n\nShow the code\n#load COG list\ncog &lt;- read.table(\"scripts/cog_list.csv\",sep=\";\",header=TRUE)\ncog &lt;- cog[-26,]\n\n#summarize and split categories\ncategories &lt;- c()\nfor (i in 1:nrow(cog)){\n  categories &lt;- grep(cog$category[i],nog$COG_category)\n  cog$sum[i] &lt;- length(categories)\n}\n\n#plot freqs\nggplot(cog,aes(y=as.numeric(sum), x=definition,color=group,fill=group)) + \n    geom_bar(stat=\"identity\", position=\"stack\", alpha=0.8) + ylab(\"Number of genes\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 500, by = 100))+\n  theme_classic() + theme(text=element_text(size=15),legend.text=element_text(size=9))\n\n\n\n\n\nFigure 14. COG groups annotated in HB27 genes\n\n\n\n\nAfter the incorporation of COG and KEGG annotations, the final TnSeq table is exported as tnSeq_full_27may.csv.\n\n\nShow the code\n#merge\nfinal &lt;- merge(datos.j,nog[,c(2,7,8,12)], all.x=TRUE)\n\nfinal$COG_category &lt;- final$COG_category %&gt;% replace_na('-')\nfor (i in 1:nrow(final)){\n  if (final$COG_category[i]!='-'){\n      final$COG_group[i] &lt;- cog$group[cog$category == substr(final$COG_category,1,1)[i]]  } else{\n        final$COG_group[i]=='-'\n    }\n}\nfinal$COG_group &lt;- as.factor(final$COG_group)\n\n#add Mario gene annotation\nmario &lt;- readxl::read_excel(\"00_raw/refs/HB8_HB27_final.xlsx\")\n\n\nNew names:\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n• `` -&gt; `...10`\n• `` -&gt; `...11`\n\n\nShow the code\nmario &lt;- subset(mario,!is.na(mario$HB27))\nmario &lt;- mario[,c(7,4,3,6,5,2)]\ncolnames(mario) &lt;- c(\"Genes\",\"Genes_HB8\",\"locus_tag\",\"name\",\"Description\",\"aa\")\nfinal &lt;- merge(final,mario,by=\"Genes\", all.x=TRUE)\nfinal$mean &lt;- apply(final[,2:5],1,mean)\nfinal$sd &lt;- apply(final[,2:5],1,sd)\nfinal &lt;- final[,c(1:5,16,17,6:15)]\nfinal[grep(\"tRNA-\",final$name),9] &lt;- \"J\"\nfinal[grep(\"tRNA-\",final$name),11] &lt;- \"ko:K14228\"\nfinal[grep(\"rRNA\",final$name),11] &lt;- \"ko:K01980\"\nfinal &lt;- final %&gt;% replace(is.na(.), '-')\nwrite.table(final,\"tnSeq_full.csv\", sep=\";\", row.names=FALSE)\n\n#correlation\nwt &lt;- ggplot(data = final, aes(x=HB27,y=HB27_rep,color=COG_group))+geom_point(size=3,alpha=0.6) +  theme_linedraw() + \n  xlab(\"HB27\") + ylab(\"HB27_rep\") + stat_poly_line(color=\"#1F78B4\",fill=\"#1F78B4\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) +guides(color = guide_legend(nrow = 2))\n\n\nppol &lt;- ggplot(data = final, aes(x=Ppol,y=Ppol_rep,color=COG_group))+geom_point(size=3,alpha=0.6)  + theme_linedraw() +\n  xlab(\"ppol\") + ylab(\"ppol_rep\") +  stat_poly_line(color=\"#33A02C\",fill=\"#33A02C\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nggarrange(wt, ppol,\n          labels = c(\"A\", \"B\"), ncol=1,common.legend = TRUE,legend=\"bottom\")\n\n\n\n\n\nFigure 15. Tn insertion scores per gene. Correlation between samples in WT (A) and Ppol (B) strains. Genes are colored by COG group\n\n\n\n\nThere seems to be no clear correlation between the gene function and the COG functional groups.\nNow, we are going to plot the genes by groups and COG\n\n\nShow the code\nstats &lt;- as.data.frame(table(final$COG_category,final$cluster))\ncategories &lt;- c()\nfor (i in 1:nrow(cog)){\n  categories &lt;- grep(cog$category[i],stats$Var1)\n  categories_D &lt;- subset(stats[categories,], Var2==\"Highly permissive\")\n  categories_R &lt;- subset(stats[categories,], Var2==\"Intermediate\")\n  categories_T &lt;- subset(stats[categories,], Var2==\"Less permissive\")\n  cog$Less_permissive[i] &lt;- sum(categories_D$Freq)\n  cog$Intermediate[i] &lt;- sum(categories_R$Freq)\n  cog$Highly_permissive[i] &lt;- sum(categories_T$Freq)\n}\ncog2 &lt;- cbind(cog[,1:3],stack(cog[,5:7]))\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\ncog2 &lt;- cog2 %&gt;% replace(is.na(.), 0)\nfor (i in 1:nrow(cog2)){\n  cog2$ratio[i] &lt;- cog2$values[i]*100/sum(cog2$values[cog2$category==cog2$category[i]])\n}\n\n\n\n#plot \nggplot(cog2[!cog2$values==0,],aes(y=ratio, x=definition, group=ind, fill=ind)) + \n    geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\", alpha=0.8) + ylab(\"Gene category (%)\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 100, by = 10)) +   theme_bw() + theme(text=element_text(size=15))#+\n\n\n\n\n\nFigure 16. Distribution of gene groups by COG functions\n\n\n\n\n\n\nShow the code\nggplot(cog2[!cog2$values==0 & cog2$ind==\"Less_permissive\",],aes(y=ratio, x=definition, group=ind)) + \n     geom_bar(stat=\"identity\", position=\"stack\", fill=\"steelblue\", alpha=0.8) + ylab(\"Gene category (%)\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 100, by = 10)) +   theme_bw() + theme(text=element_text(size=15))\n\n\n\n\n\nFigure 17. Distribution of COG functions in Less permissive genes\n\n\n\n\n\n\nKEGG\nKEGG were parsed with the script parse_ko.R. EggNog mapper could assign KEGG Ontology (KO) group to 1352 (62.28%) of the HB27 proteins. After revision of the KO annotation, we manually incorporated several missing tRNA genes to improve the statistics, using K14228 (tRNA-leu).\n\n\nShow the code\nxkegg &lt;- read.csv2(\"xkegg.txt\")\n\nxkegg$ratio_b &lt;- as.numeric(xkegg$ratio_b)\n\nxkegg$a_class &lt;- as.factor(xkegg$a_class)\nxkegg$b_class &lt;- as.factor(xkegg$b_class)\nxkegg$ind &lt;- factor(xkegg$ind,levels=c(\"Less permissive\",\"Intermediate\",\"Highly permissive\"))\n\n#plot main kegg categories\n#ggplot(xkegg,aes(y=ratio_b, x=b_class, group=factor(ind), fill=ind)) +   geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\",linewidth=0.2, alpha=0.7) + ylab(\"KO group (%)\") + xlab(\"\") + theme_bw() + theme(text=element_text(size=15), axis.text.x = element_text( angle = 45,  hjust = 1, size = 12),plot.margin =margin(l=100,b=10,t=5,r=5) )   + facet_grid(~factor(a_class),scales=\"free\",space=\"free\",drop=TRUE,labeller = as_labeller(factor(xkegg$a_class), default=label_wrap_gen(14)))\n\n#detailed kegg plot\nggplot(xkegg, aes(y=Freq, x=pathway, group=ind, fill=ind)) + \n     geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\",linewidth=0.2, alpha=0.7) + ylab(\"KO group members\") + xlab(\"\") + theme_bw() + theme(text=element_text(size=15), axis.text.x = element_text( angle = 45,  hjust = 1, size = 12),plot.margin =margin(l=100,b=10,t=5,r=5) )  +\n     facet_wrap(~a_class+b_class,scales=\"free\",drop=TRUE,ncol=3, labeller = label_wrap_gen(30))  + theme(legend.position = \"none\")\n\n\n\n\n\nFigure 18. Ratio of Highly permissive (blue), Intermediate (green) and Less permissive (red) genes in each KEGG Ontology group\n\n\n\n\n\nKEGG Ontology groups with more Less permissive genes\nNow we, will plot only the “Less permissive” genes.\n\n\nShow the code\nggplot(xkegg[xkegg$ind==\"Less permissive\",], aes(y=Freq, x=pathway, group=ind)) +     geom_bar(stat=\"identity\", position=\"stack\",linewidth=0.2, alpha=0.7, fill=\"steelblue\") + ylab(\"KO group members\") + xlab(\"\") + theme_bw()+ theme(text=element_text(size=15),plot.margin =margin(l=100,b=10,t=5,r=5) ) + coord_flip()\n\n\n\n\n\nFigure 19. KEGG ontology categories for Less permissive genes\n\n\n\n\nNon coding RNAs/RNA biosynthesis and Ribosome proteins are the categories with more Less permissive genes, but other categories, such as Transporters or Oxidative phosphorilation, seem particularly reluctant to accumulate insertions.\n\n\n\nKEGG pathways\n\n\nShow the code\nrepli &lt;- nog$Genes[grep(\"map03030\",nog$KEGG_Pathway)]\nrepli &lt;- datos.j[datos.j$Genes %in% repli,]\nrepli_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03030/\",paste0(repli[repli$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\n\nber &lt;- nog$Genes[grep(\"map03410\",nog$KEGG_Pathway)]\nber &lt;- datos.j[datos.j$Genes %in% ber,]\nber_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03410/\",paste0(ber[ber$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nner &lt;- nog$Genes[grep(\"map03420\",nog$KEGG_Pathway)]\nner &lt;- datos.j[datos.j$Genes %in% ner,]\nner_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03420/\",paste0(ner[ner$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nmmr &lt;- nog$Genes[grep(\"map03430\",nog$KEGG_Pathway)]\nmmr &lt;- datos.j[datos.j$Genes %in% mmr,]\nmmr_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03430/\",paste0(mmr[mmr$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nhr &lt;- nog$Genes[grep(\"map03440\",nog$KEGG_Pathway)]\nhr &lt;- datos.j[datos.j$Genes %in% hr,]\nhr_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03430/\",paste0(hr[hr$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nrpo &lt;- nog$Genes[grep(\"map03020\",nog$KEGG_Pathway)]\nrpo &lt;- datos.j[datos.j$Genes %in% rpo,]\nrpo_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03020/\",paste0(rpo[rpo$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nribo &lt;- nog$Genes[grep(\"map03010\",nog$KEGG_Pathway)]\nribo &lt;- datos.j[datos.j$Genes %in% ribo,]\nribo_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03010/\",paste0(ribo[ribo$cluster!=\"Highly permissive\",1],collapse=\"/\"))\nribo_link &lt;- paste0(ribo_link,paste0(\"/\",paste0(c(\"TT_C3035\",\"TT_C3056\",\"TT_C3036\",\"TT_C3055\",\"TT_C3024\",\"TT_C3048\"),collapse =\"/\")))\n\n\nAs an example, you can see some of the HB27 RNA transcrition & translation and DNA replication & repair pathways in the following links: Ribosome, RNA Polymerase, DNA Replication, Base Excision Repair, Mismatch Repair, Nucleotide Excision Repair, and Homologous Recombination. The genes with orthologs in HB27 are depicted with green background and the Intermediate/Less permissive genes are highlighted in red.\n\n\nEnrichment analysis\n\n\nShow the code\ntt &lt;- search_kegg_organism('Thermus thermophilus', by='scientific_name')\nkk &lt;- enrichKEGG(gene         = datos.j[datos.j$cluster==\"Less permissive\",1],\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/tth/pathway\"...\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/tth\"...\n\n\nShow the code\np1 &lt;- dotplot(kk, title=\"Significant enriched KO\")\n\nmkk &lt;- enrichMKEGG(gene         = datos.j[datos.j$cluster==\"Less permissive\",1],\n                 organism     = 'tth',\n                   pvalueCutoff = 1,\n                   qvalueCutoff = 1)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/tth/module\"...\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/module\"...\n\n\nShow the code\np2 &lt;- dotplot(mkk, title=\"Significant enriched KEGG modules\")\n\nbrowseKEGG(kk, 'tth00970')\nbrowseKEGG(kk, 'tth00740')\n\nggarrange(p1, p2, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2)\n\n\n\n\n\nFigure 20. Significantly enriched KEGG Ontology groups made up of Less permissive genes by KEGG ontology groups (A) or KEGG modules (B).\n\n\n\n\nAs you can see in the following links, most of the genes involved in aminoacyl tRNA biosynthesis and Rivoflavin metabolism are significantly enriched among “Less permissive genes”.\n\nClick for Session Information\n\n\n\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggrepel_0.9.5               DESeq2_1.44.0              \n [3] SummarizedExperiment_1.34.0 Biobase_2.64.0             \n [5] MatrixGenerics_1.16.0       matrixStats_1.3.0          \n [7] GenomicRanges_1.56.0        GenomeInfoDb_1.40.1        \n [9] IRanges_2.38.0              S4Vectors_0.42.0           \n[11] BiocGenerics_0.50.0         clusterProfiler_4.12.0     \n[13] ggpmisc_0.5.6               ggpp_0.5.7                 \n[15] cluster_2.1.6               factoextra_1.0.7           \n[17] details_0.3.0               ggpubr_0.6.0               \n[19] lubridate_1.9.3             forcats_1.0.0              \n[21] stringr_1.5.1               purrr_1.0.2                \n[23] readr_2.1.5                 tidyr_1.3.1                \n[25] tibble_3.2.1                tidyverse_2.0.0            \n[27] dplyr_1.1.4                 readxl_1.4.3               \n[29] DT_0.33                     data.table_1.15.4          \n[31] ggplot2_3.5.1               formatR_1.14               \n[33] knitr_1.47                  BiocManager_1.30.23        \n\nloaded via a namespace (and not attached):\n  [1] splines_4.4.0           ggplotify_0.1.2         cellranger_1.1.0       \n  [4] polyclip_1.10-6         confintr_1.0.2          lifecycle_1.0.4        \n  [7] rstatix_0.7.2           lattice_0.22-6          MASS_7.3-61            \n [10] crosstalk_1.2.1         backports_1.5.0         magrittr_2.0.3         \n [13] sass_0.4.9              rmarkdown_2.27          jquerylib_0.1.4        \n [16] yaml_2.3.8              cowplot_1.1.3           DBI_1.2.3              \n [19] RColorBrewer_1.1-3      abind_1.4-5             zlibbioc_1.50.0        \n [22] ggraph_2.2.1            yulab.utils_0.1.4       tweenr_2.0.3           \n [25] GenomeInfoDbData_1.2.12 enrichplot_1.24.0       tidytree_0.4.6         \n [28] MatrixModels_0.5-3      codetools_0.2-20        DelayedArray_0.30.1    \n [31] DOSE_3.30.1             xml2_1.3.6              ggforce_0.4.2          \n [34] tidyselect_1.2.1        aplot_0.2.3             UCSC.utils_1.0.0       \n [37] farver_2.1.2            viridis_0.6.5           jsonlite_1.8.8         \n [40] tidygraph_1.3.1         survival_3.7-0          tools_4.4.0            \n [43] treeio_1.28.0           Rcpp_1.0.12             glue_1.7.0             \n [46] gridExtra_2.3           SparseArray_1.4.8       xfun_0.45              \n [49] qvalue_2.36.0           withr_3.0.0             fastmap_1.2.0          \n [52] fansi_1.0.6             SparseM_1.83            digest_0.6.35          \n [55] timechange_0.3.0        R6_2.5.1                gridGraphics_0.5-1     \n [58] colorspace_2.1-0        GO.db_3.19.1            RSQLite_2.3.7          \n [61] utf8_1.2.4              generics_0.1.3          ggsci_3.2.0            \n [64] graphlayouts_1.1.1      httr_1.4.7              htmlwidgets_1.6.4      \n [67] S4Arrays_1.4.1          scatterpie_0.2.3        pkgconfig_2.0.3        \n [70] gtable_0.3.5            blob_1.2.4              XVector_0.44.0         \n [73] shadowtext_0.1.3        htmltools_0.5.8.1       carData_3.0-5          \n [76] fgsea_1.30.0            scales_1.3.0            png_0.1-8              \n [79] ggfun_0.1.5             rstudioapi_0.16.0       tzdb_0.4.0             \n [82] reshape2_1.4.4          nlme_3.1-165            cachem_1.1.0           \n [85] parallel_4.4.0          HDO.db_0.99.1           AnnotationDbi_1.66.0   \n [88] desc_1.4.3              pillar_1.9.0            grid_4.4.0             \n [91] vctrs_0.6.5             car_3.1-2               evaluate_0.24.0        \n [94] cli_3.6.2               locfit_1.5-9.9          compiler_4.4.0         \n [97] rlang_1.1.4             crayon_1.5.2            ggsignif_0.6.4         \n[100] labeling_0.4.3          plyr_1.8.9              fs_1.6.4               \n[103] stringi_1.8.4           viridisLite_0.4.2       BiocParallel_1.38.0    \n[106] munsell_0.5.1           Biostrings_2.72.1       lazyeval_0.2.2         \n[109] GOSemSim_2.30.0         quantreg_5.98           Matrix_1.7-0           \n[112] hms_1.1.3               patchwork_1.2.0         bit64_4.0.5            \n[115] KEGGREST_1.44.0         clipr_0.8.0             igraph_2.0.3           \n[118] broom_1.0.6             memoise_2.0.1           bslib_0.7.0            \n[121] ggtree_3.12.0           fastmatch_1.1-4         bit_4.0.5              \n[124] ape_5.8                 gson_0.1.0              polynom_1.4-1"
  },
  {
    "objectID": "panthermus.html",
    "href": "panthermus.html",
    "title": "Thermus Pangenome",
    "section": "",
    "text": "We downloaded (May 27th, 2024) all the Phylum Deinococcota assemblies from Refseq database using the NCBI tool datasets (v.16.5.0) installed in Conda.\n\n\nShow the code\nconda activate ncbi_datasets\nconda update -c conda-forge ncbi-datasets-cli\ncd thermaceae/thermus_refseq\ndatasets download genome taxon Thermaceae --filename thermaceae_dataset.zip --exclude-atypical --assembly-source 'refseq'\n\n\nTo obtain an index of the genome files, we converted the dataset_catalog.json to CSV (https://www.convertcsv.com/json-to-csv.htm) to obtain the file fasta.csv.\nTo work with homogeneous and updated genome annotations, we subsequently re-annotated all genome assemblies with Bakta (from Conda, v. 1.9.2) using the full database (DDBB v. 5.1) and the options --skip-crispr --force.\n\n\nShow the code\ncd pangenomes/deinococcota/ncbi_dataset/data\nconda activate bakta\nconda update bakta\nbakta_db download --output /Volumes/Trastero4/ddbb --type full \n#database is in external HD\nwhile IFS=, read -r col1 col2 col3\n    do\n        bakta --db /Volumes/Trastero4/ddbb/bakta-db --verbose --output ../../../bakta_results/$col3 --prefix $col3 --locus-tag $col3 --threads 16 $col1\n    done &lt; &lt;(tail -n +2 fasta.csv)\n\n\nThe pangenomes were constructed with PPanGGOLIN (v. 2.0.5) installed in Conda. You can see the whole documentation about PPanGGOLIN and the output files here. In order to construct different pangenomes at species, genus, family and order levels, we parse the taxonomy from NCBI datasets using dataformat tool and then use a short R script (parse_taxonomy.R) to generate the annotated genomes table lists.\nAfter testing different alternative datasets and clustering combinations, we empirically set the MMSeqs clustering sequence identity and coverage parameters to 0.4 and 0.5, respectively.\n\n\nShow the code\n#STEP 2\n#Run ppanggolin and write extra output files\nconda activate bioconda\ncd pangenomes\nppanggolin workflow --anno deinococcota.gbff.list --basename deinococcota --identity 0.4 --coverage 0.5 -o deinococcota_i4c5 -c 16 -f\nppanggolin workflow --anno thermaceae.gbff.list --basename thermaceae --identity 0.4 --coverage 0.5 -o thermaceae_i4c5 -c 16 -f\nppanggolin workflow --anno thermus.gbff.list --basename thermus --identity 0.4 --coverage 0.5 -o thermus_i4c5 -c 16 -f\nppanggolin workflow --anno tt.gbff.list --basename tthermophilus --identity 0.4 --coverage 0.5 -o tt_i4c5 -c 16 -f\n\n\nAdditionally, before moving forward with the pangenome, as reference, we are going to incorporate the gene names from the Thermus thermophilus strain HB27, as annotated in the NCBI Refseq assembly (GCF_000008125.1)."
  },
  {
    "objectID": "panthermus.html#correlation-between-tnseq-and-pangenome",
    "href": "panthermus.html#correlation-between-tnseq-and-pangenome",
    "title": "Thermus Pangenome",
    "section": "Correlation between TnSeq and Pangenome",
    "text": "Correlation between TnSeq and Pangenome\nNow we are going to test the correlation between the TnSeq score and group classification of the HB27 genes, with the number of conserved genes in each pangenome and the pangenome cluster.\n\n\nShow the code\n#corr\npanTnseq_Full[,c(2:5,22:29)] &lt;- lapply(panTnseq_Full[,c(2:5,22:29)], as.numeric)\nM &lt;-cor(panTnseq_Full[,c(2:5,22:29)], method = \"spearman\", use = \"pairwise.complete.obs\")\ntestRes &lt;-  cor.mtest(panTnseq_Full[,c(2:5,22:29)], conf.level = 0.95)\ncorrplot(M, type=\"lower\", p.mat = testRes$p, method = 'circle', insig='blank',\n         tl.col=\"black\",tl.srt = 45, addCoef.col ='black', number.cex = 0.5, col=brewer.pal(n=8, name=\"Spectral\"))\n\n\n\n\n\nFigure 21. Correlation between TnSeq and Pangenome variables.\n\n\n\n\nThere’s no overall correlation.\n\n\nShow the code\n#recuento\n\nhigh &lt;- c()\nintermediate &lt;- c()\nless &lt;- c()\nfor (i in 1:length(pangenomes)){\n  high[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\"  & panTnseq$cluster==\"Highly permissive\" ))\n   intermediate[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\" & panTnseq$cluster==\"Intermediate\" ))\n   less[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\" & panTnseq$cluster==\"Less permissive\" ))\n}\nstats &lt;- data.frame(high,intermediate,less)\nrow.names(stats) &lt;- names(pangenomes)\nstats &lt;- cbind(row.names(stats),stack(stats))\nnames(stats) &lt;- c(\"level\",\"ratio\",\"cluster\")\n#plot\nggplot(stats,aes(x=level, y=ratio,group=cluster)) + \n         geom_bar(aes(fill=cluster),stat = \"identity\",position=\"fill\",color=\"grey40\", alpha=0.8) + ylab(\"Persistent Genes  (%)\")+ geom_text(aes(label=ratio),size=5, position = position_fill(vjust=0.5) , col = \"black\")+xlab(\"Pangenome level\") +scale_y_continuous(labels = scales::percent) + theme_bw()\n\n\n\n\n\nFigure 22. Persistant genes in each pangenome).\n\n\n\n\nNow, let’s see genes distribution in the different groups using Venn diagrams.\n\n\nShow the code\nx &lt;- list(\n  Intermediate = panTnseq_Full$Genes[panTnseq_Full$cluster==\"Intermediate\"], \n  Highly_permissive = panTnseq_Full$Genes[panTnseq_Full$cluster==\"Highly permissive\"], \n  Less_permissive = panTnseq_Full$Genes[panTnseq_Full$cluster==\"Less permissive\"], \n  Persistent = panTnseq_Full$Genes[panTnseq_Full$tt_i4c5==\"persistent\"]\n  )\n\nlibrary(ggvenn)\n\n\nLoading required package: grid\n\n\nLoading required package: scales\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nShow the code\ntt &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Thermus thermophilus\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nx[[4]] &lt;- panTnseq_Full$Genes[panTnseq_Full$thermus_i4c5==\"persistent\"]\n\nthermus &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Thermus\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nx[[4]] &lt;- panTnseq_Full$Genes[panTnseq_Full$thermaceae_i4c5==\"persistent\"]\n\nthermaceae &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Thermaceae\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nx[[4]] &lt;- panTnseq_Full$Genes[panTnseq_Full$deinococcota_i4c5==\"persistent\"]\n\ndeinococcota &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Deinococcota\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nggarrange(tt, thermus, thermaceae, deinococcota, \n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 23. Venn diagram of TnSeq genes categories and Persistant genes in each pangenome)."
  },
  {
    "objectID": "panthermus.html#enrichment-analysis",
    "href": "panthermus.html#enrichment-analysis",
    "title": "Thermus Pangenome",
    "section": "Enrichment analysis",
    "text": "Enrichment analysis\n\n\nShow the code\nkk &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$thermaceae_i4c5==\"persistent\",1]),\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/tth/pathway\"...\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/tth\"...\n\n\nShow the code\np1 &lt;- dotplot(kk, title=\"Thermaceae core genome\")\n\nkk_D &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$deinococcota_i4c5==\"persistent\",1]),\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\np2 &lt;- dotplot(kk_D, title=\"Deinococcota core genome\")\n\nggarrange(p1, p2, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2)\n\n\n\n\n\nFigure 24. Significantly enriched KEGG Ontology groups made up of Intermediate/Less permissive genes within the Core genome (persistant genes) of Thermaceae (A) or Deinococcota (B).\n\n\n\n\n\n\nShow the code\nuniprot &lt;- bitr_kegg(panTnseq_Full$Genes, fromType=\"kegg\", toType='uniprot', organism='tth')\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/conv/uniprot/tth\"...\n\n\nShow the code\npanTnseq_Full &lt;- panTnseq_Full %&gt;%\n  mutate(uni = replace(Genes, Genes %in% uniprot$kegg, uniprot$uniprot))\n\nkk &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$thermus_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/conv/uniprot/tth\"...\n\n\nShow the code\np1 &lt;- dotplot(kk, title=\"Thermus core genome\")\n\n\nkk_t &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$thermaceae_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\np2 &lt;- dotplot(kk_t, title=\"Thermaceae core genome\")\n\nkk_D &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$deinococcota_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\np3 &lt;- dotplot(kk_D, title=\"Deinococcota core genome\")\n\nggarrange(p1, p2, p3,\n          labels = c(\"A\", \"B\", \"C\"), ncol=1,nrow = 3)\n\n\n\n\n\nFigure 25. Significantly enriched KEGG Ontology groups made up of Intermediate/Less permissive genes within the Core genome (persistant genes) of Thermaceae (A) or Deinococcota (B).\n\n\n\n\n\nClick for Session Information\n\n\n\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggvenn_0.1.10          scales_1.3.0           ggpubr_0.6.0          \n [4] clusterProfiler_4.12.0 RColorBrewer_1.1-3     corrplot_0.92         \n [7] ggstats_0.6.0          patchwork_1.2.0        lubridate_1.9.3       \n[10] forcats_1.0.0          stringr_1.5.1          purrr_1.0.2           \n[13] readr_2.1.5            tidyr_1.3.1            tibble_3.2.1          \n[16] tidyverse_2.0.0        dplyr_1.1.4            DT_0.33               \n[19] data.table_1.15.4      ggplot2_3.5.1          formatR_1.14          \n[22] knitr_1.47            \n\nloaded via a namespace (and not attached):\n  [1] rstudioapi_0.16.0       jsonlite_1.8.8          magrittr_2.0.3         \n  [4] farver_2.1.2            rmarkdown_2.27          fs_1.6.4               \n  [7] zlibbioc_1.50.0         vctrs_0.6.5             memoise_2.0.1          \n [10] ggtree_3.12.0           rstatix_0.7.2           htmltools_0.5.8.1      \n [13] broom_1.0.6             gridGraphics_0.5-1      htmlwidgets_1.6.4      \n [16] plyr_1.8.9              cachem_1.1.0            igraph_2.0.3           \n [19] lifecycle_1.0.4         pkgconfig_2.0.3         fuzzyjoin_0.1.6        \n [22] Matrix_1.7-0            R6_2.5.1                fastmap_1.2.0          \n [25] gson_0.1.0              GenomeInfoDbData_1.2.12 digest_0.6.35          \n [28] aplot_0.2.3             enrichplot_1.24.0       colorspace_2.1-0       \n [31] AnnotationDbi_1.66.0    S4Vectors_0.42.0        RSQLite_2.3.7          \n [34] labeling_0.4.3          fansi_1.0.6             timechange_0.3.0       \n [37] abind_1.4-5             httr_1.4.7              polyclip_1.10-6        \n [40] compiler_4.4.0          bit64_4.0.5             withr_3.0.0            \n [43] backports_1.5.0         BiocParallel_1.38.0     carData_3.0-5          \n [46] viridis_0.6.5           DBI_1.2.3               ggforce_0.4.2          \n [49] ggsignif_0.6.4          MASS_7.3-61             HDO.db_0.99.1          \n [52] tools_4.4.0             ape_5.8                 scatterpie_0.2.3       \n [55] glue_1.7.0              nlme_3.1-165            GOSemSim_2.30.0        \n [58] shadowtext_0.1.3        reshape2_1.4.4          fgsea_1.30.0           \n [61] generics_0.1.3          gtable_0.3.5            tzdb_0.4.0             \n [64] hms_1.1.3               car_3.1-2               tidygraph_1.3.1        \n [67] utf8_1.2.4              XVector_0.44.0          BiocGenerics_0.50.0    \n [70] ggrepel_0.9.5           pillar_1.9.0            vroom_1.6.5            \n [73] yulab.utils_0.1.4       splines_4.4.0           tweenr_2.0.3           \n [76] treeio_1.28.0           lattice_0.22-6          bit_4.0.5              \n [79] tidyselect_1.2.1        GO.db_3.19.1            Biostrings_2.72.1      \n [82] gridExtra_2.3           IRanges_2.38.0          stats4_4.4.0           \n [85] xfun_0.45               graphlayouts_1.1.1      Biobase_2.64.0         \n [88] stringi_1.8.4           UCSC.utils_1.0.0        lazyeval_0.2.2         \n [91] ggfun_0.1.5             yaml_2.3.8              evaluate_0.24.0        \n [94] codetools_0.2-20        ggraph_2.2.1            qvalue_2.36.0          \n [97] ggplotify_0.1.2         cli_3.6.2               munsell_0.5.1          \n[100] Rcpp_1.0.12             GenomeInfoDb_1.40.1     png_0.1-8              \n[103] parallel_4.4.0          blob_1.2.4              DOSE_3.30.1            \n[106] viridisLite_0.4.2       tidytree_0.4.6          crayon_1.5.2           \n[109] rlang_1.1.4             cowplot_1.1.3           fastmatch_1.1-4        \n[112] KEGGREST_1.44.0"
  },
  {
    "objectID": "reads_processing.html",
    "href": "reads_processing.html",
    "title": "TnSeq Illumina Data Processing",
    "section": "",
    "text": "Quality check, reads filtering and trimming was carried out with FastP 0.23.4 Chen et al. (2018) and reports were merged with MultiQC 1.17. Reads processing parameters were optimized to maximal proportion of mapped reads against the reference HB27 assembly GCA_000008125.\n\n\nShow the code\nconda activate bioconda\nconda install -c bioconda fastp\n#fastp 0.23.4\n\ncd data/Tnseq_thermus\nmkdir 00_fastp\nfastp -i 00_raw/TNB-03_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-03_trimmed.fastq -f 30 -t 10 -g -h TNB_03.html -j TNB_03_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-07_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-07_trimmed.fastq -f 30 -t 10 -g -h TNB_07.html -j TNB_07_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-01_S1_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-01_trimmed.fastq -f 30 -t 10 -g -h TNB_01.html -j TNB_01_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-09_S5_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-09_trimmed.fastq -f 30 -t 10 -g -h TNB_09.html -j TNB_09_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\n\ncd 00_fastp\nmkdir reports\nmv *.json reports\nmv *.html reports\n\nconda activate base\nmultiqc -v reports\n\n\nThe statistics of the final reads are shown in the Table 1 below. The detailed FastP combined reports is available here.\n\n\nShow the code\nfastp &lt;- read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, sep = \";\")\n\n\nWarning in read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, :\nincomplete final line found by readTableHeader on\n'00_fastp/merged_fastp_reports.csv'\n\n\nShow the code\nkbl(fastp[,c(1:4,6,5)], align = \"c\", col.names= c(\"Sample\",\"File\",\"% Duplication\",\"Final reads (M)\",\"Final reads (%)\",\"GC %\"), caption = \"Table 1. Statistics of fastp processed reads of HB27 TnSeq libraries\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T)\n\n\n\n\nTable 1. Statistics of fastp processed reads of HB27 TnSeq libraries\n\n\nSample\nFile\n% Duplication\nFinal reads (M)\nFinal reads (%)\nGC %\n\n\n\n\nppol_Mother\nTNB-01_S1_L001_R1_001\n78.20%\n0.9\n41.40%\n59.40%\n\n\nwt_Daughter\nTNB-03_S3_L001_R1_001\n72.40%\n2.7\n83.90%\n65.40%\n\n\nppol_Mother_replicate\nTNB-07_S3_L001_R1_001\n74.20%\n1.3\n88.30%\n65.80%\n\n\nwt_Daughter_replicate\nTNB-09_S5_L001_R1_001\n78.60%\n1.7\n92.10%\n64.90%\n\n\n\n\n\n\n\n\nThe original sample looks different, with less reads and length, as well as slight lower GC content. Note that HB27 chromosome has 1.894.877 bp and 69.5% GC and pTT27 has 232.605 and 69% GC.\nGiven that several samples were sequenced in the same batch, downplaying a technical problem with sequencing library o running, we hypothesize that some transposon insertions were unstable.\nInterestingly, some studies show that plasmid and intergenic/non-coding sequences has lower GC content Hu et al. (2022). Thus, we will analyze the ratio chromosome/plasmid, gene/intergenic and CG bias in all the samples (see below)."
  },
  {
    "objectID": "reads_processing.html#raw-data-processing",
    "href": "reads_processing.html#raw-data-processing",
    "title": "TnSeq Illumina Data Processing",
    "section": "",
    "text": "Quality check, reads filtering and trimming was carried out with FastP 0.23.4 Chen et al. (2018) and reports were merged with MultiQC 1.17. Reads processing parameters were optimized to maximal proportion of mapped reads against the reference HB27 assembly GCA_000008125.\n\n\nShow the code\nconda activate bioconda\nconda install -c bioconda fastp\n#fastp 0.23.4\n\ncd data/Tnseq_thermus\nmkdir 00_fastp\nfastp -i 00_raw/TNB-03_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-03_trimmed.fastq -f 30 -t 10 -g -h TNB_03.html -j TNB_03_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-07_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-07_trimmed.fastq -f 30 -t 10 -g -h TNB_07.html -j TNB_07_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-01_S1_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-01_trimmed.fastq -f 30 -t 10 -g -h TNB_01.html -j TNB_01_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-09_S5_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-09_trimmed.fastq -f 30 -t 10 -g -h TNB_09.html -j TNB_09_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\n\ncd 00_fastp\nmkdir reports\nmv *.json reports\nmv *.html reports\n\nconda activate base\nmultiqc -v reports\n\n\nThe statistics of the final reads are shown in the Table 1 below. The detailed FastP combined reports is available here.\n\n\nShow the code\nfastp &lt;- read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, sep = \";\")\n\n\nWarning in read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, :\nincomplete final line found by readTableHeader on\n'00_fastp/merged_fastp_reports.csv'\n\n\nShow the code\nkbl(fastp[,c(1:4,6,5)], align = \"c\", col.names= c(\"Sample\",\"File\",\"% Duplication\",\"Final reads (M)\",\"Final reads (%)\",\"GC %\"), caption = \"Table 1. Statistics of fastp processed reads of HB27 TnSeq libraries\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T)\n\n\n\n\nTable 1. Statistics of fastp processed reads of HB27 TnSeq libraries\n\n\nSample\nFile\n% Duplication\nFinal reads (M)\nFinal reads (%)\nGC %\n\n\n\n\nppol_Mother\nTNB-01_S1_L001_R1_001\n78.20%\n0.9\n41.40%\n59.40%\n\n\nwt_Daughter\nTNB-03_S3_L001_R1_001\n72.40%\n2.7\n83.90%\n65.40%\n\n\nppol_Mother_replicate\nTNB-07_S3_L001_R1_001\n74.20%\n1.3\n88.30%\n65.80%\n\n\nwt_Daughter_replicate\nTNB-09_S5_L001_R1_001\n78.60%\n1.7\n92.10%\n64.90%\n\n\n\n\n\n\n\n\nThe original sample looks different, with less reads and length, as well as slight lower GC content. Note that HB27 chromosome has 1.894.877 bp and 69.5% GC and pTT27 has 232.605 and 69% GC.\nGiven that several samples were sequenced in the same batch, downplaying a technical problem with sequencing library o running, we hypothesize that some transposon insertions were unstable.\nInterestingly, some studies show that plasmid and intergenic/non-coding sequences has lower GC content Hu et al. (2022). Thus, we will analyze the ratio chromosome/plasmid, gene/intergenic and CG bias in all the samples (see below)."
  },
  {
    "objectID": "reads_processing.html#reads-mapping-analysis",
    "href": "reads_processing.html#reads-mapping-analysis",
    "title": "TnSeq Illumina Data Processing",
    "section": "Reads Mapping Analysis",
    "text": "Reads Mapping Analysis\n\nMapping stats\nFiltered reads were mapped using Bowtie2 2.5.1.\n\n\nShow the code\ncd 00_raw/refs\nbowtie2-build GCA_000008125.fa HB27_gb\ncd ..\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-03_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB03_sorted.bam) 2&gt; TNB-03_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-07_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB07_sorted.bam) 2&gt; TNB-07_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-01_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB01_sorted.bam) 2&gt; TNB-01_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-09_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB09_sorted.bam) 2&gt; TNB-09_mapping.log\n\n\nLet’s have a look to the data from bowtie2 alignment reports and the average stats obtained with Weesam 1.6.\n\n\nShow the code\n#read bowtie stats\nbowtie2 &lt;- read.table(\"01_bowtie2/bowtie2_stats.csv\",sep=\";\",header=TRUE)\nbowtie2 &lt;- cbind(bowtie2[,c(1,4)],stack(bowtie2[,2:3]))\nbowtie2$sample &lt;- factor(bowtie2$sample, levels=c(\"TNB01\",\"TNB09\",\"TNB03\",\"TNB07\"))\n#read and combine  weesam data\nweesam &lt;- read.table(\"01_bowtie2/weeSAM_reports/TNB01.txt\", sep=\"\\t\", header=TRUE)\nweesam &lt;- rbind(weesam, read.table(\"01_bowtie2/weeSAM_reports/TNB03.txt\", sep=\"\\t\",header=TRUE), read.table(\"01_bowtie2/weeSAM_reports/TNB07.txt\", sep=\"\\t\",header=TRUE), read.table(\"01_bowtie2/weeSAM_reports/TNB09.txt\", sep=\"\\t\",header=TRUE))\nweesam$sample &lt;- c(\"TNB01\",\"TNB01\",\"TNB03\",\"TNB03\",\"TNB07\",\"TNB07\",\"TNB09\",\"TNB09\")\nweesam$aligned &lt;- c()\n#plots\ng1 &lt;- ggplot(bowtie2)+geom_bar(aes(x=sample,y=values, fill=sample,color=ind),position = \"stack\", stat=\"identity\",alpha = 0.7) + geom_point(aes(x=sample,y=rate * 25000,fill=sample),shape=21, size = 4 ) + scale_y_continuous(name = \"Mapped reads\", breaks = seq(0, 2.5e06, 5e05), sec.axis = sec_axis(~. /25000 , name = \"Overall alignment rate (%)\",  breaks = seq(0, 100,20))) + scale_color_manual(values=c('grey70','grey30'))+scale_fill_brewer(palette=\"Paired\") + theme_bw() + labs(fill= \"Sequencing library\",color=\"Mapping\")\nweesam$Ref_Name &lt;- factor(weesam$Ref_Name, labels=c(\"Chromosome\",\"pTT27\"))\ng2 &lt;- ggplot(weesam, aes(x = sample, color = sample, fill = sample)) +\n    geom_point(aes(y=X._Covered / 20, fill=sample), color=\"black\", shape=21, size=3) + geom_pointrange(aes( y = log10(Avg_Depth), ymin = log10(Avg_Depth / Std_Dev), ymax = log10(Avg_Depth * Std_Dev)), size = 1, alpha = 0.7, shape=18) + theme_bw() + facet_grid(~Ref_Name) + scale_y_continuous(name = \"Depth (log10)\", breaks = seq(-1, 5,1), sec.axis = sec_axis(~. *20 , name = \"Coverage (%)\",  breaks = seq(0,100,20))) + scale_fill_brewer(palette=\"Paired\") +\n    scale_color_brewer(palette=\"Paired\") + xlab(\"\") +  theme(axis.text.y.left = element_text(color = \"grey40\"),axis.title.y = element_text(colour = \"grey40\"),axis.text.y.right = element_text(color = \"black\"),axis.title.y.right = element_text(colour = \"black\"))\n\nggarrange(g1, g2, \n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 2, nrow = 1, widths=c(1,1.5),\n          common.legend = TRUE, legend = \"bottom\")\n\n\n\n\n\nFigure 1. TnSeq libraries mapping statistics. (A) Total number of mapped reads (bars, left axis) and overall alignment rate (points, right axis). (B) Reference sequence depth (diamonds, left axis) and coverage (round points, right axis). Samples corresponding to ppol and wt HB27 strains are colored in blues and greens, respectively.\n\n\n\n\n\n\nMapping profile in HB27 genome\nAgain, the sample TNB01 corresponding to ppol (Mother) is clearly different, with less reads and lower mapping rate. Let’s look in more detail the mapping per base pair, analyzed with Bedtools 2.30.0.\n\n\nShow the code\n#load data\ncoverage &lt;- fread(\"01_bowtie2/bedtools_output/TNB01_cov_fw.tsv.gz\",  header=FALSE, select=c(4,7,8))\ncoverage &lt;- cbind(coverage, fread(\"01_bowtie2/bedtools_output/TNB01_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB01\")\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB03_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB03_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB03\"))\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB07_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB07_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB07\"))\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB09_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB09_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB09\"))\n\nnames(coverage) &lt;- c(\"Chain\",\"Position\",\"Pos\",\"Neg\",\"Sample\")\ncoverage$Chain &lt;- as.factor(coverage$Chain)\ncoverage$Sample &lt;- as.factor(coverage$Sample)\n\n#sample for knitting\n\n\n#plot\ncoverage %&gt;% \n  slice_sample(n = 100000) %&gt;% \n  ggplot() +  geom_bar(aes(x=Position,y=-log2(Neg+1)),stat=\"identity\", color=\"red\",linewidth=1) + \n  geom_bar(aes(x=Position,y=log2(Pos+1)), stat=\"identity\", color=\"black\", linewidth=1) +\n  #geom_vline(xintercept=644000, col=\"blue\",size=1) +\n  facet_grid(Sample~Chain,  space = \"free\", scales=\"free\")+theme_bw()+ylab(\"Log2(Coverage)\")\n\n\n\n\n\nFigure 2. Per nucleotide absolute coverage of the filtered reads in each sample (log2 scale). Only 1M randomly-sampled positions per sample are shown.\n\n\n\n\nThe above plots are sampled to a max of 106 points, full plots are in the folder bamdash and can be accessed with the following links, as interactive plots and SVG images.\n\nTable 2. Bamdash coverage plots\n\n\nSample\nChromosome\npTT27 plasmid\n\n\n\n\nHB27\nReport - SVG\nReport - SVG\n\n\nHB27_rep\nReport - SVG\nReport - SVG\n\n\nPpol\nReport - SVG\nReport - SVG\n\n\nPpol_rep\nReport - SVG\nReport - SVG\n\n\n\nThe two replicates have a smaller range than the primary samples (mother and daughter), but we can still recognize two regions with a very high frequency of insertions in the reverse strand, located at positions 576,160 and 1,457,335 of the chromosome and almost overlapping in the four samples. These regions are not very clear in logarithmically scaled plots, but they caught our attention when we analyzed linearly scaled plots.\nWe have now decided to investigate these regions in more detail. The first hotspot corresponds to gene TT_C0593 (Figure 3), which encodes a 5-carboxymethyl-2-hydroxymuconate semialdehyde dehydrogenase, an oxidoreductase involved in tyrosine metabolism that may be dispensable in rich media. This target region corresponds to a GC track, the preferred sequence for Tn5 Green et al. (2012). However, as the coverage indicates multiple nearby integration sites, the high integration rate within TT_C0593 may indicate that this gene is not required rather than a transposase artifact.\n\n\nShow the code\ncov &lt;- ggplot(coverage[coverage$Position &gt; 570000 & coverage$Position &lt; 580000]) +  geom_bar(aes(x=Position,y=Neg * -1),color=\"red\", stat=\"identity\", linewidth=1) +\n  geom_bar(aes(x=Position,y=Pos),color=\"black\", stat=\"identity\",linewidth=1) +\n  facet_grid(Sample~Chain, space = \"free\", scales=\"free_y\")+theme_bw()+ylab(\"Coverage\")\n\ncoding &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\n\ngenes &lt;- ggplot(coding[coding$V4 &gt; 570000 & coding$V4 &lt; 580000,], aes(xmin = V4, xmax = V5, y = V1, fill = substr(V9,9,16), label=substr(V9,9,16))) +\n  geom_gene_arrow() +\n  geom_gene_label(align = \"left\")+\n  theme_bw() +\n  geom_vline(xintercept =576160, linetype=\"dashed\",linewidth=1) +\n  scale_fill_brewer(palette = \"Set3\") +theme(legend.position=\"none\") + ylab(\"\") + scale_y_discrete(labels=\"Chr\") + scale_x_continuous(breaks = seq(570000, 580000, 2500))\n\nggarrange(cov, genes, \n          labels = c(\"A\", \"B\"), ncol=1,heights=c(3,1)\n         )\n\n\n\n\n\nFigure 3. TnSeq insertion hotspot (A) Detailed coverage (linear scale) in the region 570000-580000 of HB27 chromosome. (B) Annotated features in the detailed region. The vertical dashed line indicated the position of the highest coverage.\n\n\n\n\nThe second and more important hotspot (Figure 4) is located in an intergenic region between locus TT_C1532 (glucosamine-fructose-6-phosphate aminotransferase) and TT_C1533 (S-layer protein). The sequence in this site appears to be more diverse but also contains GC traces. However, since we will normalize the counts per gene based on the mapped reads in the coding regions (see below), this promiscuous site will not affect our analysis.\n\n\nShow the code\ncov &lt;- ggplot(coverage[coverage$Position &gt; 1445000 & coverage$Position &lt; 1458000]) +  geom_bar(aes(x=Position,y=Neg * -1),color=\"red\", stat=\"identity\", linewidth=1) +\n  geom_bar(aes(x=Position,y=Pos),color=\"black\", stat=\"identity\",linewidth=1) +\n  facet_grid(Sample~Chain, space = \"free\", scales=\"free_y\")+theme_bw()+ylab(\"Coverage\")\n\ngenes &lt;- ggplot(coding[coding$V4 &gt; 1445000 & coding$V4 &lt; 1458000,], aes(xmin = V4, xmax = V5, y = V1, fill = substr(V9,9,16), label=substr(V9,9,16))) +\n  geom_gene_arrow() +\n  geom_gene_label(align = \"left\")+\n  theme_bw() +\n  geom_vline(xintercept =1457335, linetype=\"dashed\",linewidth=1) +\n  scale_fill_brewer(palette = \"Set3\") +theme(legend.position=\"none\") + ylab(\"\") + scale_y_discrete(labels=\"Chr\") + scale_x_continuous(breaks = seq(1444000, 1458000, 4000))\n\nggarrange(cov, genes, \n          labels = c(\"A\", \"B\"), ncol=1,heights=c(3,1)\n         )\n\n\n\n\n\nFigure 4. TnSeq insertion hotspot (A) Detailed coverage in the region 1445000-1458000 of HB27 chromosome. (B) Annotated features in the detailed region. The vertical dashed line indicated the position of the highest coverage.\n\n\n\n\n\n\nMapping insertions in key genes\n\n\nShow the code\n#read Table\nLH &lt;- read_xlsx(\"DNAprocessestoGraph.xlsx\",sheet=1)\n\n\nNew names:\n• `` -&gt; `...17`\n\n\nShow the code\nLH &lt;- LH[grep(\"TT_C\",LH$Genes),]\ncoding$Genes &lt;- substr(coding$V9,9,16)\ntmp &lt;- coding[coding$V3==\"CDS\",c(10,4,5)]\n#tmp &lt;- HB27_genome[HB27_genome$V3 ==\"gene\",c(9,4,5)]\n\n#ribosoma &lt;- c(\"TT_C3035\",\"TT_C3056\",\"TT_C3036\",\"TT_C3055\",\"TT_C3024\",\"TT_C3048\")\ntmp &lt;- tmp[tmp$Genes %in% LH$Genes,]\n#tmp &lt;- tmp[tmp$Genes %in% ribosoma,]\ncov &lt;- list()\ncov &lt;- lapply(1:nrow(tmp), FUN = function(i) {\n  ggplot(coverage[coverage$Chain==\"Chr\" & coverage$Position &gt; tmp[i,2] & coverage$Position &lt; tmp[i,3],]) +  \n    #geom_bar(aes(x=Position,y=log2(Neg+1) * -1),color=\"red\", stat=\"identity\", linewidth=1) + \n  geom_bar(aes(x=Position,y=log2(Pos+Neg+1)),color=\"grey30\",alpha=0.6, stat=\"identity\",linewidth=1) +\n    scale_x_continuous(breaks=c(tmp[i,2],tmp[i,3])) + xlab(\"\") +\n  facet_grid(Sample~Chain, space = \"free\", scales=\"free_y\")+theme_bw()+ylab(\"Log2(Coverage)\") +geom_vline(aes(xintercept=tmp[i,2]+(tmp[i,3]-tmp[i,2])*0.1),linewidth=1, linetype=\"dashed\", color=\"blue\") +\n    geom_vline(aes(xintercept=tmp[i,3]-(tmp[i,3]-tmp[i,2])*0.1),linewidth=1, linetype=\"dashed\", color=\"blue\") +\n    ggtitle(tmp$Genes[i])\n})\n#do.call(\"grid.arrange\", c(cov, ncol = 3))\n\n\n\ncoverage_mean &lt;- coverage[coverage$Chain==\"Chr\"] %&gt;%\n  group_by(Position) %&gt;%\n  dplyr::summarize(Mean = mean(c(Pos,Neg), na.rm=TRUE))\ncov_mean &lt;- list()\ncov_mean &lt;- lapply(1:nrow(tmp), FUN = function(i) {\n  ggplot(coverage_mean[coverage_mean$Position &gt; tmp[i,2] & coverage_mean$Position &lt; tmp[i,3],]) +  \n    #geom_bar(aes(x=Position,y=log2(Neg+1) * -1),color=\"red\", stat=\"identity\", linewidth=1) + \n  geom_bar(aes(x=Position,y=log2(Mean+1)),color=\"grey30\",alpha=0.6, stat=\"identity\",linewidth=1) +\n    scale_x_continuous(breaks=c(tmp[i,2],tmp[i,3])) + xlab(\"\") +\n  theme_bw()+ylab(\"Log2(Coverage)\") +geom_vline(aes(xintercept=tmp[i,2]+(tmp[i,3]-tmp[i,2])*0.1),linewidth=1, linetype=\"dashed\", color=\"blue\") +\n    geom_vline(aes(xintercept=tmp[i,3]-(tmp[i,3]-tmp[i,2])*0.1),linewidth=1, linetype=\"dashed\", color=\"blue\") +\n    ggtitle(tmp$Genes[i])\n})\ndo.call(\"grid.arrange\", c(cov_mean, ncol = 3))\n\n\n\n\n\nFigure 5. Average coverage per nucleotide for some key genes. For simplicity, total coverage in forward and reverse strands in all libraries were merged. Gene coordinates are indicated in each plot. The dashed blue lines mark the 80% central gene interval considered for score calculation."
  },
  {
    "objectID": "reads_processing.html#integration-score-per-gene",
    "href": "reads_processing.html#integration-score-per-gene",
    "title": "TnSeq Illumina Data Processing",
    "section": "Integration score per gene",
    "text": "Integration score per gene\n\nIntegration events counts and score\nNow we are going to transform the mapped reads into hits per gene, to obtain a normalized insertion score, by the following steps:\n\nWe only consider insertions within the middle 80% regions of genes, because insertions landing in the flanking sections of genes might give rise to truncated of chimeric proteins partially functional. The counts of Tn insertions will be obtained with FeatureCounts , implemented in the R package Rsubread.\nWe will normalize by the total number of mapped reads within the coding regions (80% central).\nWe will obtain a ratio of observed to expected Tn insertions.\nWe will make a log2-transformation in pseudocounts ($$log_2(x+1)) to avoid negative scores.\n\nAll in all, our score will be obtained with the following formula:\n\\[\nScore = log_2 \\left( \\frac{count}{\\text{sample mapped reads} * \\frac{\\text{gen length} }{\\text{genome length}}} +1 \\right)\n\\]\nAdditionally, to minimize the inter-experiments differences, the final standard scores (Z-score) were centered and scaled using the R function scale().\nIn the following plots you can see the distribution of scores between samples.\n\n\nShow the code\n#gene table formatted with 80% central gene\nHB27_genome &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\nHB27_genome$Chr &lt;- \"AE017221.1\"\nHB27_genome$Chr[8088:nrow(coding)] &lt;- \"AE017222.1\"\nHB27_genome$V9 &lt;-  substr(HB27_genome$V9,9,16)\nHB27_genome80 &lt;- HB27_genome\n\nHB27_genome80 &lt;- data.frame(HB27_genome80[,c(9,1,4,5,7)])\ncolnames(HB27_genome80) &lt;- c(\"GeneID\",\"Chr\",\"Start\",\"End\",\"Strand\")\nHB27_genome80$Start &lt;- HB27_genome80$Start + (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80$End &lt;- HB27_genome80$End - (HB27_genome80$End - HB27_genome80$Start) * 0.1\n\n#map with FeatureCounts\nsamples &lt;- c(\"HB27\"=\"TNB03\", \"HB27_rep\"=\"TNB07\",\"ppol\"=\"TNB01\", \"ppol\"=\"TNB09\")\n\ndata &lt;- list()\nfor (i in 1:4){\n  data[[i]] &lt;- featureCounts(files=paste0(\"01_bowtie2/mapping_\",samples[i],\"_sorted.bam\"),annot.ext=na.omit(HB27_genome80),isGTFAnnotationFile=FALSE,isPairedEnd=FALSE,countMultiMappingReads=TRUE, allowMultiOverlap=TRUE, fraction = TRUE, ignoreDup = TRUE)\n  data[[i]]$counts &lt;- as.data.frame(data[[i]]$counts)\n  data[[i]]$counts$random &lt;- data[[i]]$stat[2][1,1] * (data[[i]]$annotation$Length / 2127482)\n  data[[i]]$counts$genes &lt;- row.names(data[[i]]$counts)\n  data[[i]]$counts$pseudocounts &lt;- log2(data[[i]]$counts[,1]/data[[i]]$counts[,2] + 1)\n  names(data[[i]]$counts) &lt;- c(\"Counts\",\"Random\",\"Genes\",\"Pseudocounts\")\n  data[[i]]$counts &lt;- data[[i]]$counts[,c(3,1,2,4)]\n}\n\n\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB03_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid99845 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB03_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 2192839                                              ||\n||    Successfully assigned alignments : 1880857 (85.8%)                      ||\n||    Running time : 0.02 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB07_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid99845 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB07_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 1099044                                              ||\n||    Successfully assigned alignments : 960432 (87.4%)                       ||\n||    Running time : 0.01 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB01_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid99845 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB01_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 539737                                               ||\n||    Successfully assigned alignments : 374026 (69.3%)                       ||\n||    Running time : 0.01 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB09_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid99845 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB09_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 1331276                                              ||\n||    Successfully assigned alignments : 1184920 (89.0%)                      ||\n||    Running time : 0.01 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n\nShow the code\ntnseq &lt;- data.frame(data[[1]]$counts,data[[2]]$counts[,2:4], data[[3]]$counts[,2:4],data[[4]]$counts[,2:4])\nnames(tnseq) &lt;- c(\"Genes\",\"Counts_HB27\",\"Random_HB27\",\"Score_HB27\",\"Counts_HB27_rep\",\"Random_HB27_rep\",\"Score_HB27_rep\",\"Counts_ppol\",\"Random_ppol\",\"Score_ppol\",\"Counts_ppol_rep\",\"Random_ppol_rep\",\"Score_ppol_rep\")\n#write.table(tnseq,\"tnseq_counts_scores.csv\",quote=FALSE,sep=\";\",row.names = FALSE)\nscores &lt;- as.data.frame(scale(tnseq[,c(4,7,10,13)]))\n#write.table(scores,\"scores80.csv\",row.names = TRUE,sep=\";\")\n\n\n#calculate 10-90% quantile\nq &lt;- data.frame(\n  ind = c(\"Score_HB27\",\"Score_HB27_rep\",\"Score_ppol\",\"Score_ppol_rep\"),\n  values= c(quantile(scores[,1],0.1, na.rm=TRUE),\n            quantile(scores[,2], 0.1, na.rm=TRUE), \n            quantile(scores[,3],0.1, na.rm=TRUE),\n            quantile(scores[,4], 0.1, na.rm=TRUE),\n            quantile(scores[,1],0.9, na.rm=TRUE),\n            quantile(scores[,2], 0.9, na.rm=TRUE), \n            quantile(scores[,3],0.9, na.rm=TRUE),\n            quantile(scores[,4], 0.9, na.rm=TRUE)\n            ))\n#plot distribution\nbox &lt;- ggplot(stack(scores), aes(x=ind, y=values)) + xlab(\"\") + \n  ylab(\"Score\")+\n  geom_boxplot(outlier.shape=8,outlier.size=3,aes(color=ind,fill=ind,alpha=0.8),\n               linewidth = 1)+theme_linedraw()+geom_jitter(alpha=0.1,aes(color=ind)) +\n # geom_point(data=q,aes(x=ind,y=values,fill=ind),shape=23,size=4) +\n  theme(axis.text.x = element_text(face=\"bold\", vjust=1))+\n  theme(legend.position = \"none\") + scale_color_brewer(palette=\"Paired\")+\n  scale_fill_brewer(palette=\"Paired\")\n\n#correlation\nwt &lt;- ggplot(data = scores, aes(x=Score_HB27,y=Score_HB27_rep))+geom_point(size=3,alpha=0.6, color=\"#1F78B4\") +  theme_linedraw() + ylim(0,7) +\n  xlab(\"HB27\") + ylab(\"HB27_rep\") + stat_poly_line(color=\"#1F78B4\",fill=\"#1F78B4\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nppol &lt;- ggplot(data = scores, aes(x=Score_ppol,y=Score_ppol_rep))+geom_point(size=3,alpha=0.6, color=\"#33A02C\")  + theme_linedraw() + ylim(0,7) +\n  xlab(\"ppol\") + ylab(\"ppol_rep\") +  stat_poly_line(color=\"#33A02C\",fill=\"#33A02C\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\nggarrange(box, wt, ppol,\n          labels = c(\"A\", \"B\",\"C\"), ncol=1\n         )\n\n\nWarning: Removed 1484 rows containing non-finite outside the scale range\n(`stat_poly_line()`).\n\n\nWarning: Removed 1484 rows containing non-finite outside the scale range\n(`stat_poly_eq()`).\n\n\nWarning: Removed 1484 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 1329 rows containing non-finite outside the scale range\n(`stat_poly_line()`).\n\n\nWarning: Removed 1329 rows containing non-finite outside the scale range\n(`stat_poly_eq()`).\n\n\nWarning: Removed 1329 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nFigure 6. Tn insertion scores per gene. (A) Boxplot of gene scores per sample. (B) Correlation of scores per gene and sample.\n\n\n\n\nAs we can see, the correlation between both PPOL samples is only moderate, in agreement with a clear difference in the original sample. This can be also seen in the PCA plot below, in which the Ppolrep (TNB09) sample contains around 20% variability.\n\n\nShow the code\ntnseq.pca &lt;- prcomp(tnseq[,c(4,7,10,13)], \n                   center = TRUE, \n                   scale. = TRUE) \nbiplot(tnseq.pca) \n\n\n\n\n\nFigure 7. Samples PCA plot.\n\n\n\n\n\n\n\n\n\n\nShould we rule out the ppol mother replicate sample?\n\n\n\nThis sample contains 20% of the total data variance. Therefore, it will hinder the analysis of gene essentiality and probably lead to false negative results. However, we decided to keep it as its inherent divergence will also strengthen our results.\n\n\nIn order to analyze in detail the difference between samples, we construct also an interactive plot. Put your mouse pointer over any point and you will see the Score and the Gene.\n\n\nShow the code\nscores$mean &lt;- apply(scores, 1, mean)\nkk &lt;- cbind(tnseq$Genes,scores$mean,stack(scores))\ndis &lt;- ggplot(data=kk) +\n  geom_point(aes(x=reorder(`tnseq$Genes`,`scores$mean`,decreasing=TRUE),y=values,color=ind), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\nShow the code\nggplotly(dis)\n\n\n\n\nFigure 8. Comparison of Tn insertion Z-scores per gene. Values were sorted by the average of all samples.\n\n\n\nClick for Session Information\n\n\n\n\n\n\n\n\nShow the code\n#from https://github.com/holtzy/quarto-tricks\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] gridExtra_2.3       readxl_1.4.3        ggpmisc_0.5.6      \n [4] ggpp_0.5.7          plotly_4.10.4       details_0.3.0      \n [7] ggpubr_0.6.0        lubridate_1.9.3     forcats_1.0.0      \n[10] stringr_1.5.1       purrr_1.0.2         readr_2.1.5        \n[13] tidyr_1.3.1         tibble_3.2.1        tidyverse_2.0.0    \n[16] dplyr_1.1.4         Rsubread_2.18.0     gggenes_0.5.1      \n[19] kableExtra_1.4.0    data.table_1.15.4   ggplot2_3.5.1      \n[22] formatR_1.14        knitr_1.47          BiocManager_1.30.23\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   viridisLite_0.4.2  farver_2.1.2       R.utils_2.12.3    \n [5] fastmap_1.2.0      lazyeval_0.2.2     digest_0.6.35      timechange_0.3.0  \n [9] lifecycle_1.0.4    survival_3.7-0     magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.4        tools_4.4.0        utf8_1.2.4         yaml_2.3.8        \n[17] ggsignif_0.6.4     labeling_0.4.3     htmlwidgets_1.6.4  xml2_1.3.6        \n[21] RColorBrewer_1.1-3 abind_1.4-5        withr_3.0.0        R.oo_1.26.0       \n[25] desc_1.4.3         grid_4.4.0         fansi_1.0.6        colorspace_2.1-0  \n[29] scales_1.3.0       MASS_7.3-61        cli_3.6.2          rmarkdown_2.27    \n[33] generics_0.1.3     rstudioapi_0.16.0  httr_1.4.7         tzdb_0.4.0        \n[37] polynom_1.4-1      splines_4.4.0      cellranger_1.1.0   vctrs_0.6.5       \n[41] Matrix_1.7-0       jsonlite_1.8.8     carData_3.0-5      SparseM_1.83      \n[45] confintr_1.0.2     car_3.1-2          hms_1.1.3          rstatix_0.7.2     \n[49] crosstalk_1.2.1    systemfonts_1.1.0  clipr_0.8.0        glue_1.7.0        \n[53] cowplot_1.1.3      stringi_1.8.4      gtable_0.3.5       munsell_0.5.1     \n[57] pillar_1.9.0       htmltools_0.5.8.1  quantreg_5.98      ggfittext_0.10.2  \n[61] R6_2.5.1           evaluate_0.24.0    lattice_0.22-6     highr_0.11        \n[65] R.methodsS3_1.8.2  png_0.1-8          backports_1.5.0    broom_1.0.6       \n[69] MatrixModels_0.5-3 svglite_2.1.3      xfun_0.45          pkgconfig_2.0.3"
  },
  {
    "objectID": "reads_dd_processing.html",
    "href": "reads_dd_processing.html",
    "title": "TnSeq Illumina Data Processing",
    "section": "",
    "text": "Quality check, reads filtering, trimming and deduplication was carried out with FastP 0.23.4 Chen et al. (2018) and reports were merged with MultiQC 1.22.3. Reads processing parameters were optimized to maximal proportion of mapped reads against the reference HB27 assembly GCA_0000081251.\n\n\nShow the code\nconda activate bioconda\nconda install -c bioconda fastp\n#fastp 0.23.4\n\ncd data/Tnseq_thermus\nmkdir 00_fastp\nfastp -i 00_raw/TNB-03_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-03_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_03_dd.html -j 00_fastp/TNB_03_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-01_S1_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-01_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_01_dd.html -j 00_fastp/TNB_01_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-07_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-07_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_07_dd.html -j 00_fastp/TNB_07_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-09_S5_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-09_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_09_dd.html -j 00_fastp/TNB_09_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\n\ncd 00_fastp\nmkdir reports_dd\nmv *.json reports_dd\nmv *.html reports_dd\n\nconda activate base\nmultiqc -v reports_dd\n\n\nThe statistics of the final reads, after QC-filtering and dedupication, are shown in the Table 1 below. The detailed FastP combined reports is available here.\n\n\nShow the code\nfastp &lt;- read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, sep = \";\")\nfastp$Sample &lt;- c(\"Ppol_1\",\"HB27_1\",\"HB27_2\",\"Ppol_2\")\nfastp$initial_reads &lt;- c(2170192,3196758,1515716, 1820971)\nmy.cols &lt;- brewer.pal(4, \"Paired\")\nkbl(fastp[c(1,4,2,3),c(1,2,8,3,4,6,5)], align = \"c\", row.names = FALSE,col.names= c(\"Library\",\"File\",\"Reads\",\"% Duplication\",\"Final reads (M)\",\"Final reads (%)\",\"GC %\"), caption = \"Table 1. Statistics of fastp processed reads of HB27 TnSeq libraries\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T, color=my.cols)\n\n\n\nTable 1. Statistics of fastp processed reads of HB27 TnSeq libraries\n\n\nLibrary\nFile\nReads\n% Duplication\nFinal reads (M)\nFinal reads (%)\nGC %\n\n\n\n\nPpol_1\nTNB-01_S1_L001_R1_001\n2170192\n78.20%\n0.9\n41.40%\n59.40%\n\n\nPpol_2\nTNB-09_S5_L001_R1_001\n1820971\n78.60%\n1.7\n92.10%\n64.90%\n\n\nHB27_1\nTNB-03_S3_L001_R1_001\n3196758\n72.40%\n2.7\n83.90%\n65.40%\n\n\nHB27_2\nTNB-07_S3_L001_R1_001\n1515716\n74.20%\n1.3\n88.30%\n65.80%\n\n\n\n\n\n\n\nThe original sample looks slightly different, with less reads and length, as well as somewhat lower GC content. Note that HB27 chromosome has 1.894.877 bp and 69.5% GC and pTT27 has 232.605 and 69% GC.\nGiven that several samples were sequenced in the same batch, downplaying a technical problem with sequencing library o running, we hypothesize that some transposon insertions may be unstable in the context of Thermus."
  },
  {
    "objectID": "reads_dd_processing.html#raw-data-processing",
    "href": "reads_dd_processing.html#raw-data-processing",
    "title": "TnSeq Illumina Data Processing",
    "section": "",
    "text": "Quality check, reads filtering, trimming and deduplication was carried out with FastP 0.23.4 Chen et al. (2018) and reports were merged with MultiQC 1.22.3. Reads processing parameters were optimized to maximal proportion of mapped reads against the reference HB27 assembly GCA_0000081251.\n\n\nShow the code\nconda activate bioconda\nconda install -c bioconda fastp\n#fastp 0.23.4\n\ncd data/Tnseq_thermus\nmkdir 00_fastp\nfastp -i 00_raw/TNB-03_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-03_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_03_dd.html -j 00_fastp/TNB_03_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-01_S1_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-01_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_01_dd.html -j 00_fastp/TNB_01_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-07_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-07_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_07_dd.html -j 00_fastp/TNB_07_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-09_S5_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA -o 00_fastp/TNB-09_trimmed_dd.fastq -f 30 -t 10 -g -D -h 00_fastp/TNB_09_dd.html -j 00_fastp/TNB_09_fastp_dd.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\n\ncd 00_fastp\nmkdir reports_dd\nmv *.json reports_dd\nmv *.html reports_dd\n\nconda activate base\nmultiqc -v reports_dd\n\n\nThe statistics of the final reads, after QC-filtering and dedupication, are shown in the Table 1 below. The detailed FastP combined reports is available here.\n\n\nShow the code\nfastp &lt;- read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, sep = \";\")\nfastp$Sample &lt;- c(\"Ppol_1\",\"HB27_1\",\"HB27_2\",\"Ppol_2\")\nfastp$initial_reads &lt;- c(2170192,3196758,1515716, 1820971)\nmy.cols &lt;- brewer.pal(4, \"Paired\")\nkbl(fastp[c(1,4,2,3),c(1,2,8,3,4,6,5)], align = \"c\", row.names = FALSE,col.names= c(\"Library\",\"File\",\"Reads\",\"% Duplication\",\"Final reads (M)\",\"Final reads (%)\",\"GC %\"), caption = \"Table 1. Statistics of fastp processed reads of HB27 TnSeq libraries\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T, color=my.cols)\n\n\n\nTable 1. Statistics of fastp processed reads of HB27 TnSeq libraries\n\n\nLibrary\nFile\nReads\n% Duplication\nFinal reads (M)\nFinal reads (%)\nGC %\n\n\n\n\nPpol_1\nTNB-01_S1_L001_R1_001\n2170192\n78.20%\n0.9\n41.40%\n59.40%\n\n\nPpol_2\nTNB-09_S5_L001_R1_001\n1820971\n78.60%\n1.7\n92.10%\n64.90%\n\n\nHB27_1\nTNB-03_S3_L001_R1_001\n3196758\n72.40%\n2.7\n83.90%\n65.40%\n\n\nHB27_2\nTNB-07_S3_L001_R1_001\n1515716\n74.20%\n1.3\n88.30%\n65.80%\n\n\n\n\n\n\n\nThe original sample looks slightly different, with less reads and length, as well as somewhat lower GC content. Note that HB27 chromosome has 1.894.877 bp and 69.5% GC and pTT27 has 232.605 and 69% GC.\nGiven that several samples were sequenced in the same batch, downplaying a technical problem with sequencing library o running, we hypothesize that some transposon insertions may be unstable in the context of Thermus."
  },
  {
    "objectID": "reads_dd_processing.html#reads-mapping-analysis",
    "href": "reads_dd_processing.html#reads-mapping-analysis",
    "title": "TnSeq Illumina Data Processing",
    "section": "Reads Mapping Analysis",
    "text": "Reads Mapping Analysis\n\nMapping stats\nFiltered reads were mapped using Bowtie2 2.5.1.\n\n\nShow the code\ncd 00_raw/refs\nbowtie2-build GCA_000008125.fa HB27_gb\ncd ..\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-03_trimmed_dd.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB03_dd_sorted.bam) 2&gt; TNB-03_dd_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-07_trimmed_dd.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB07_dd_sorted.bam) 2&gt; TNB-07_dd_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-01_trimmed_dd.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB01_dd_sorted.bam) 2&gt; TNB-01_dd_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-09_trimmed_dd.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB09_dd_sorted.bam) 2&gt; TNB-09_dd_mapping.log\n\n\nLet’s have a look to the data from bowtie2 alignment reports and the average stats obtained with Weesam 1.6.\n\n\nShow the code\n#read bowtie stats\nbowtie2 &lt;- read.table(\"01_bowtie2/bowtie2_stats.csv\",sep=\";\",header=TRUE)\nbowtie2 &lt;- cbind(bowtie2[,c(1,4)],stack(bowtie2[,2:3]))\nbowtie2$library &lt;- ifelse(bowtie2$sample==\"TNB01\",\"Ppol_1\",ifelse(bowtie2$sample==\"TNB07\",\"Ppol_2\",ifelse(bowtie2$sample==\"TNB03\",\"HB27_1\",\"HB27_2\")))\nbowtie2$library &lt;- factor(bowtie2$library, levels=c(\"Ppol_1\",\"Ppol_2\",\"HB27_1\",\"HB27_2\"))\n#read and combine  weesam data\nweesam &lt;- read.table(\"01_bowtie2/weeSAM_reports/TNB01.txt\", sep=\"\\t\", header=TRUE)\nweesam &lt;- rbind(weesam, read.table(\"01_bowtie2/weeSAM_reports/TNB09.txt\", sep=\"\\t\",header=TRUE), read.table(\"01_bowtie2/weeSAM_reports/TNB03.txt\", sep=\"\\t\",header=TRUE), read.table(\"01_bowtie2/weeSAM_reports/TNB07.txt\", sep=\"\\t\",header=TRUE))\nweesam$sample &lt;- c(\"TNB01\",\"TNB01\",\"TNB09\",\"TNB09\",\"TNB03\",\"TNB03\",\"TNB07\",\"TNB07\")\nweesam$library &lt;- ifelse(weesam$sample==\"TNB01\",\"Ppol_1\",ifelse(weesam$sample==\"TNB07\",\"Ppol_2\",ifelse(weesam$sample==\"TNB03\",\"HB27_1\",\"HB27_2\")))\nweesam$library &lt;- factor(weesam$library, levels=c(\"Ppol_1\",\"Ppol_2\",\"HB27_1\",\"HB27_2\"))\nweesam$aligned &lt;- c()\n#plots\ng1 &lt;-ggplot(bowtie2)+geom_bar(aes(x=library,y=values, fill=library,color=ind),position = \"stack\", stat=\"identity\",alpha = 0.7) + \n  geom_point(aes(x=library,y=rate * 25000,fill=library),shape=21, size = 4 ) + \n  scale_y_continuous(name = \"Mapped reads\", breaks = seq(0, 2.5e06, 5e05), sec.axis = sec_axis(~. /25000 , name = \"Overall alignment rate (%)\",  breaks = seq(0, 100,20))) + scale_color_manual(values=c('grey70','grey30'))+scale_fill_brewer(labels=fastp$Sample[c(1,3,2,4)],palette=\"Paired\") + theme_bw() + xlab(\"\")+labs(fill= \"Sequencing library\")+guides(color=\"none\")\n  \nweesam$Ref_Name &lt;- factor(weesam$Ref_Name, labels=c(\"Chromosome\",\"pTT27\"))\ng2 &lt;- ggplot(weesam, aes(x = library, color = library, fill = library)) +\n    geom_point(aes(y=X._Covered / 20, fill=library), color=\"black\", shape=21, size=3) + geom_pointrange(aes( y = log10(Avg_Depth), ymin = log10(Avg_Depth / Std_Dev), ymax = log10(Avg_Depth * Std_Dev)), size = 1, alpha = 0.7, shape=18) + theme_bw() + facet_grid(~Ref_Name) + scale_y_continuous(name = \"Depth (log10)\", breaks = seq(-1, 5,1), sec.axis = sec_axis(~. *20 , name = \"Breadth (%)\",  breaks = seq(0,100,20))) + scale_fill_brewer(palette=\"Paired\") +\n    scale_color_brewer(labels=fastp$library[c(1,3,2,4)],palette=\"Paired\") + xlab(\"\") +  theme(axis.text.y.left = element_text(color = \"grey40\"),axis.title.y = element_text(colour = \"grey40\"),axis.text.y.right = element_text(color = \"black\"),axis.title.y.right = element_text(colour = \"black\"))+guides(fill=\"none\", color=\"none\")\n\nggarrange(g1, g2, \n          labels = c(\"A\", \"B\"),\n          ncol = 2, nrow = 1, widths=c(1,1.5),\n          common.legend = TRUE, legend = \"bottom\")\n\n\n\n\n\nFigure 1. TnSeq libraries mapping statistics. (A) Reference sequence depth (diamonds, left axis) and coverage (round points, right axis). Samples corresponding to ppol and wt HB27 strains are colored in blues and greens, respectively. (B) Total number of mapped reads (bars, left axis) and overall alignment rate (points, right axis).\n\n\n\n\nThe mapping shows that overall 80% of the reads mapped once within the HB27 chromosome, giving rise to a good coverage of the HB27 genome, with roughly 100x coverage depth and 50% of coverage breadth. However, again, the sample TNB01 corresponding to ppol (Mother) is clearly different, with less reads and lower mapping rate.\n\n\nMapping coverage in HB27 genome\nLet’s look in more detail the mapping per base pair, analyzed with Bedtools 2.30.0.\n\n\nShow the code\n#load data\ncoverage &lt;- fread(\"01_bowtie2/bedtools_output/TNB01_dd_cov_fw.tsv.gz\",  header=FALSE, select=c(4,7,8))\ncoverage &lt;- cbind(coverage, fread(\"01_bowtie2/bedtools_output/TNB01_dd_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB01\")\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB09_dd_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB09_dd_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB09\"))\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB03_dd_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB03_dd_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB03\"))\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB07_dd_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB07_dd_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB07\"))\n\nnames(coverage) &lt;- c(\"Chain\",\"Position\",\"Pos\",\"Neg\",\"Sample\")\ncoverage$Chain &lt;- as.factor(coverage$Chain)\ncoverage$Sample &lt;- factor(coverage$Sample, levels=c(\"TNB01\",\"TNB09\",\"TNB03\",\"TNB07\"))\n\n#code for circos plot modified from https://www.royfrancis.com/beautiful-circos-plots-in-r/\n#coverage for circos processed in external script \"scripts/circos.R\"\nload(\"cov_chr.Rdata\")\n\n#circos plot\ncircos.clear()\ncol_text &lt;- \"grey40\"\ncircos.par(\"track.height\"=0.8, gap.degree=0, cell.padding=c(0, 0, 0, 0))\ncircos.initialize(factors=c(\"AE017221.1\"), \n                  xlim=matrix(c(0, 1894877), ncol=2))\n\ncircos.track(ylim=c(0, 1), panel.fun=function(x, y) {\n  chr=CELL_META$sector.index\n  xlim=CELL_META$xlim\n  ylim=CELL_META$ylim\n  circos.text(mean(xlim), mean(ylim), chr, cex=0.6, col=col_text, \n              facing=\"bending.inside\", niceFacing=TRUE)\n}, bg.col=\"grey90\", bg.border=F, track.height=0.06)\n\nbrk &lt;- c(0, 0.25,0.5,0.75, 1, 1.25,1.5, 1.75,2, 2.5, 3)*10^6\ncircos.track(track.index = get.current.track.index(), panel.fun=function(x, y) {\n  circos.axis(h=\"top\", major.at=brk, labels=round(brk/10^6, 2), labels.cex=0.6, \n              col=col_text, labels.col=col_text, lwd=0.7, labels.facing=\"clockwise\")\n}, bg.border=F)\n\n#cov tracks\n\ncircos.track(factors=cov_chr[[1]]$X1, x=cov_chr[[1]]$X2, y=log10(cov_chr[[1]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[1], lwd=1)\n}, ylim=range(log10(cov_chr[[1]]$X4+1)), track.height=0.1, bg.border=F)\n\n\ncircos.track(factors=cov_chr[[2]]$X1, x=cov_chr[[2]]$X2, y=log10(cov_chr[[2]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[2], lwd=1)\n}, ylim=range(log10(cov_chr[[2]]$X4+1)), track.height=0.08, bg.border=F)\n\ncircos.track(factors=cov_chr[[3]]$X1, x=cov_chr[[3]]$X2, y=log10(cov_chr[[3]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[3], lwd=1)\n}, ylim=range(log10(cov_chr[[3]]$X4+1)), track.height=0.08, bg.border=F)\n\n\ncircos.track(factors=cov_chr[[4]]$X1, x=cov_chr[[4]]$X2, y=log10(cov_chr[[4]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[4], lwd=1)\n}, ylim=range(log10(cov_chr[[4]]$X4+1)), track.height=0.08, bg.border=F)\n\n\n\n\n\nFigure 2. HB27 wt (green) and Ppol (blue) TnSeq libraries mapping in HB27 chromosome. Coverage is represented the mean cov per 1 kb widows in log10 scale. Outer circle scale in Mb.\n\n\n\n\n\n\nShow the code\n#coverage for circos processed in external script \"scripts/circos.R\"\nload(\"cov_pTT27.Rdata\")\n\n\n#pTT27 circos plot\ncircos.clear()\ncol_text &lt;- \"grey40\"\ncircos.par(\"track.height\"=0.8, gap.degree=0, cell.padding=c(0, 0, 0, 0))\ncircos.initialize(factors=c(\"AE017222.1\"), \n                  xlim=matrix(c(0, 232605), ncol=2))\n\ncircos.track(ylim=c(0, 1), panel.fun=function(x, y) {\n  chr=CELL_META$sector.index\n  xlim=CELL_META$xlim\n  ylim=CELL_META$ylim\n  circos.text(mean(xlim), mean(ylim), chr, cex=0.6, col=col_text, \n              facing=\"bending.inside\", niceFacing=TRUE)\n}, bg.col=\"grey90\", bg.border=F, track.height=0.09)\n\nbrk &lt;- c(0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3)*10^6\ncircos.track(track.index = get.current.track.index(), panel.fun=function(x, y) {\n  circos.axis(h=\"top\", major.at=brk, labels=round(brk/10^6, 2), labels.cex=0.6, \n              col=col_text, labels.col=col_text, lwd=0.7, labels.facing=\"clockwise\")\n}, bg.border=F)\n\n#cov tracks\ncircos.track(factors=cov[[1]]$X1, x=cov[[1]]$X2, y=log10(cov[[1]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[1], lwd=1)\n}, ylim=range(log10(cov[[1]]$X4+1)), track.height=0.08, bg.border=F)\n\ncircos.track(factors=cov[[2]]$X1, x=cov[[2]]$X2, y=log10(cov[[2]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[2], lwd=1)\n}, ylim=range(log10(cov[[2]]$X4+1)), track.height=0.08, bg.border=F)\n\ncircos.track(factors=cov[[3]]$X1, x=cov[[3]]$X2, y=log10(cov[[3]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[3], lwd=1)\n}, ylim=range(log10(cov[[3]]$X4+1)), track.height=0.08, bg.border=F)\n\n\ncircos.track(factors=cov[[4]]$X1, x=cov[[4]]$X2, y=log10(cov[[4]]$X4+1), panel.fun=function(x, y) {\n  circos.lines(x, y, col=my.cols[4], lwd=1)\n}, ylim=range(log10(cov[[4]]$X4+1)), track.height=0.08, bg.border=F)\n\n\n\n\n\nFigure 3. HB27 wt (green) and Ppol (blue) TnSeq libraries mapping in pTT27 plasmid. Coverage is represented the mean cov per 1 kb widows in log10 scale. Outer circle scale in Mb.\n\n\n\n\nThe above plots represent mean coverage per 1000 bp windows, full plots are in the folder bamdash and can be accessed with the following links, as interactive plots and SVG images.\n\nTable 2. Bamdash coverage plots\n\n\nSample\nChromosome\npTT27 plasmid\n\n\n\n\nHB27\nReport - SVG\nReport - SVG\n\n\nHB27_rep\nReport - SVG\nReport - SVG\n\n\nppol\nReport - SVG\nReport - SVG\n\n\nppol_rep\nReport - SVG\nReport - SVG\n\n\n\nThe two replicates have a smaller range than the primary samples (mother and daughter), but we can still recognize two regions with a very high frequency of insertions in the reverse strand, located at positions 576,160 and 1,457,335 of the chromosome and almost overlapping in the four samples.\nWe have now decided to investigate these regions in more detail. The first hotspot corresponds to gene TT_C0593 (Figure 3), which encodes a 5-carboxymethyl-2-hydroxymuconate semialdehyde dehydrogenase, an oxidoreductase involved in tyrosine metabolism that may be dispensable in rich media. This target region corresponds to a GC track, the preferred sequence for Tn5 Green et al. (2012). However, as the coverage indicates multiple nearby integration sites, the high integration rate within TT_C0593 may indicate that this gene is not required rather than a transposase artifact.\n\n\nShow the code\ncov &lt;- ggplot(coverage[coverage$Position &gt; 570000 & coverage$Position &lt; 580000]) +  geom_bar(aes(x=Position,y=Neg * -1),color=\"red\", stat=\"identity\", linewidth=1) +\n  geom_bar(aes(x=Position,y=Pos),color=\"black\", stat=\"identity\",linewidth=1) +\n  facet_grid(Sample~Chain, space = \"free\", scales=\"free_y\")+theme_bw()+ylab(\"Coverage\")\n\ncoding &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\n\ngenes &lt;- ggplot(coding[coding$V4 &gt; 570000 & coding$V4 &lt; 579000,], aes(xmin = V4, xmax = V5, y = V1, fill = substr(V9,9,16), label=substr(V9,9,16))) +\n  geom_gene_arrow() +\n  geom_gene_label(align = \"left\")+\n  theme_bw() +\n  geom_vline(xintercept =576160, linetype=\"dashed\",linewidth=1) +\n  scale_fill_brewer(palette = \"Set3\") +theme(legend.position=\"none\",plot.margin=margin(0,1,0,0.75,unit = \"cm\")) + ylab(\"\") + scale_y_discrete(labels=\"Chr\") + scale_x_continuous(breaks = seq(570000, 580000, 2500))\n\nggarrange(cov, genes, \n          labels = c(\"A\", \"B\"), ncol=1,heights=c(3,1)\n         )\n\n\n\n\n\nFigure 4. TnSeq insertion hotspot (A) Detailed coverage (linear scale) in the region 570000-580000 of HB27 chromosome in each sample, Ppol (TNB01), Ppol_rep (TNB09), HB27 (TNB03) and HB27_rep (TNB07). (B) Annotated features in the detailed region. The vertical dashed line indicated the position of the highest coverage.\n\n\n\n\nThe second and more strong hotspot (Figure 5) is located in an intergenic region between locus TT_C1532 (glucosamine-fructose-6-phosphate aminotransferase) and TT_C1533 (S-layer protein). The sequence in this point appears to be more diverse but also contains GC traces. This hostpot is likely consequence of the use of S-layer protein promoter in front of the kanamycin resistance gene used for the transposition selection. Moreover, since we will normalize the counts per gene based on the mapped reads in the coding regions (see below), this promiscuous site will not affect our analysis.\n\n\nShow the code\ncov &lt;- ggplot(coverage[coverage$Position &gt; 1447000 & coverage$Position &lt; 1459500]) +  geom_bar(aes(x=Position,y=Neg * -1),color=\"red\", stat=\"identity\", linewidth=1) +\n  geom_bar(aes(x=Position,y=Pos),color=\"black\", stat=\"identity\",linewidth=1) +\n  facet_grid(Sample~Chain, space = \"free\", scales=\"free_y\")+theme_bw()+ylab(\"Coverage\")\n\ngenes &lt;- ggplot(coding[coding$V4 &gt; 1445000 & coding$V4 &lt; 1458000,], aes(xmin = V4, xmax = V5, y = V1, fill = substr(V9,9,16), label=substr(V9,9,16))) +\n  geom_gene_arrow() +\n  geom_gene_label(align = \"left\")+\n  theme_bw() +\n  geom_vline(xintercept =1457335, linetype=\"dashed\",linewidth=1) +\n  scale_fill_brewer(palette = \"Set3\") +theme(legend.position=\"none\",plot.margin=margin(0,0.8,0,0,unit = \"cm\")) + ylab(\"\") + scale_y_discrete(labels=\"Chr\") + scale_x_continuous(breaks = seq(1444000, 1457000, 4000))\n\nggarrange(cov, genes, \n          labels = c(\"A\", \"B\"), ncol=1,heights=c(3,1)\n         )\n\n\n\n\n\nFigure 5. TnSeq insertion hotspot (A) Detailed coverage in the region 1445000-1458000 of HB27 chromosome in each sequencing library: Ppol (TNB01), Ppol_rep (TNB09), HB27 (TNB03) and HB27_rep (TNB07). (B) Annotated features in the detailed region. The vertical dashed line indicated the position of the highest coverage."
  },
  {
    "objectID": "reads_dd_processing.html#integration-score-per-gene",
    "href": "reads_dd_processing.html#integration-score-per-gene",
    "title": "TnSeq Illumina Data Processing",
    "section": "Integration score per gene",
    "text": "Integration score per gene\n\nIntegration events counts and score\nNow we are going to transform the mapped reads into hits per gene, to obtain a normalized insertion score, by the following steps:\n\nWe only consider insertions within the 10-90% interval of each gene, because insertions landing in the flanking sections of genes might give rise to truncated of chimeric proteins partially functional. The counts of Tn insertions will be obtained from the read mapping coordinates, considering the alignment start and the strand, after conversion of the BAM file to a tabulated format (BED).\nWe will normalize by the total number of mapped reads within the coding regions (80% central).\nWe will obtain a ratio of observed to expected Tn insertions.\nWe will make a log2-transformation in pseudocounts ($$log_2(x+1)) to avoid negative scores.\n\nAll in all, our score will be obtained with the following formula:\n\\[\nScore = log_2 \\left( \\frac{count}{\\text{sample mapped reads} * \\frac{\\text{gen length} }{\\text{genome length}}} +1 \\right)\n\\]\nAdditionally, to minimize the inter-experiments differences, the final standard scores (Z-score) were centered and scaled using the R function scale().\nIn the following plots you can see the distribution of scores between samples.\n\n\nShow the code\ncd ~/data/TnSeq_thermus\nbedtools bamtobed -i 01_bowtie2/mapping_TNB03_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB03_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB01_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB01_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB07_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB07_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB09_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB09_dd_sorted.bed\n\n\n\n\nShow the code\n#gene table formatted with 80% central gene\nHB27_genome &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\nHB27_genome$Chr &lt;- \"AE017221.1\"\nHB27_genome$Chr[8088:nrow(coding)] &lt;- \"AE017222.1\"\nHB27_genome$V9 &lt;-  substr(HB27_genome$V9,9,16)\n\n#correct TT_C0145 coordinates and remove TT_C0146\nHB27_genome$stop[HB27_genome$Genes==\"TT_C0145\" & HB27_genome$V3==\"gene\"] &lt;- HB27_genome$stop[HB27_genome$Genes==\"TT_C0146\" & HB27_genome$V3==\"gene\"]\nHB27_genome[-as.numeric(rownames(HB27_genome[HB27_genome$Genes==\"TT_C0146\",])),]\n\n\n [1] V1  V2  V3  V4  V5  V6  V7  V8  V9  Chr\n&lt;0 rows&gt; (or 0-length row.names)\n\n\nShow the code\n#select \"gene\" feature for mapping\nHB27_genome80 &lt;- HB27_genome[HB27_genome$V3==\"gene\",]\n\n#subset the 10-90% gene interval and reshape table\nHB27_genome80 &lt;- data.frame(HB27_genome80[,c(9,1,4,5,7)])\ncolnames(HB27_genome80) &lt;- c(\"GeneID\",\"Chr\",\"Start\",\"End\",\"Strand\")\nHB27_genome80$Start &lt;- HB27_genome80$Start + (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80$End &lt;- HB27_genome80$End - (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80 &lt;- HB27_genome80[,c(1,2,5,3,4)]\n\n#load BED files\nsamples &lt;- c(\"HB27\"=\"TNB03\", \"HB27_rep\"=\"TNB07\",\"ppol\"=\"TNB01\", \"ppol_rep\"=\"TNB09\")\n\ndata &lt;- list()\ninsertion_table &lt;- list()\nscores_table &lt;- list()\n#prepare HB27_genome80 for foverlaps()\nnames(HB27_genome80) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"start\",\"end\") \nHB27_genome80 &lt;- as.data.table(HB27_genome80)\nsetkey(HB27_genome80, start, end) #keyed\n\n#match read mapping start with genes coordinates to obtain insertion sites per gene\nfor (i in 1:4){\n  data[[i]] &lt;- fread(input = paste0(\"01_bowtie2/mapping_\",samples[i],\"_dd_sorted.bed\"))\n  #filter by alignment quality\n  data[[i]] &lt;- data[[i]][data[[i]]$V5 &gt; 5]\n    data[[i]] &lt;- data[[i]][,c(1,6,2,3)]\n    names(data[[i]]) &lt;- c(\"Mapped_Chr\",\"Strand\",\"start\",\"end\")\n    insertion_table[[i]] &lt;- foverlaps(as.data.table(data[[i]]),HB27_genome80,type=\"within\",nomatch = NULL,mult=\"all\")\n    insertion_table[[i]] &lt;- subset(insertion_table[[i]], Chr==Mapped_Chr)\n    insertion_table[[i]] &lt;- insertion_table[[i]][,-9]\n    scores_table[[i]] &lt;- as.data.frame(table(insertion_table[[i]]$Gene))\n    names(scores_table[[i]]) &lt;- c(\"Gene\",\"Counts\")\n    scores_table[[i]] &lt;- merge(as.data.frame(HB27_genome80),scores_table[[i]])\n    scores_table[[i]]$score &lt;- log2((scores_table[[i]]$Counts / (nrow(insertion_table[[i]])* (scores_table[[i]]$end-scores_table[[i]]$start)/2127482)) +1 )\n  }\n\ntnseq &lt;- merge(scores_table[[1]],scores_table[[2]][,c(1,6,7)], by=\"Gene\")\nnames(tnseq) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"Start80\",\"End80\",\"Counts_HB27\",\"Score_HB27\",\"Counts_HB27_rep\",\"Score_HB27_rep\")\ntnseq &lt;- merge(tnseq,scores_table[[3]][,c(1,6,7)], by=\"Gene\")\n\ntnseq &lt;- merge(tnseq,scores_table[[4]][,c(1,6,7)], by=\"Gene\")\nnames(tnseq) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"Start80\",\"End80\",\"Counts_HB27\",\"Score_HB27\",\"Counts_HB27_rep\",\"Score_HB27_rep\",\"Counts_ppol\",\"Score_ppol\",\"Counts_ppol_rep\",\"Score_ppol_rep\")\n#write.table(tnseq,\"tnseq_dd_counts_scores.csv\",quote=FALSE,sep=\";\",row.names = FALSE)\nscores &lt;- as.data.frame(scale(tnseq[,c(7,9,11,13)]))\nrow.names(scores) &lt;- tnseq$Gene\n#write.table(scores,\"scores80_dd.csv\",row.names = TRUE,sep=\";\")\n\n\n#calculate 10-90% quantile\nq &lt;- data.frame(\n  ind = c(\"Score_HB27\",\"Score_HB27_rep\",\"Score_ppol\",\"Score_ppol_rep\"),\n  values= c(quantile(scores[,1],0.1, na.rm=TRUE),\n            quantile(scores[,2], 0.1, na.rm=TRUE), \n            quantile(scores[,3],0.1, na.rm=TRUE),\n            quantile(scores[,4], 0.1, na.rm=TRUE),\n            quantile(scores[,1],0.9, na.rm=TRUE),\n            quantile(scores[,2], 0.9, na.rm=TRUE), \n            quantile(scores[,3],0.9, na.rm=TRUE),\n            quantile(scores[,4], 0.9, na.rm=TRUE)\n            ))\n#plot distribution\nbox &lt;- ggplot(stack(scores), aes(x=ind, y=values)) + xlab(\"\") + \n  ylab(\"Score\")+\n  geom_boxplot(outlier.shape=8,outlier.size=3,aes(color=ind,fill=ind,alpha=0.8),\n               linewidth = 1)+theme_linedraw()+geom_jitter(alpha=0.1,aes(color=ind)) +\n # geom_point(data=q,aes(x=ind,y=values,fill=ind),shape=23,size=4) +\n  theme(axis.text.x = element_text(face=\"bold\", vjust=1))+\n  theme(legend.position = \"none\") + scale_color_brewer(palette=\"Paired\")+\n  scale_fill_brewer(palette=\"Paired\")\n\n#correlation\nwt &lt;- ggplot(data = scores, aes(x=Score_HB27,y=Score_HB27_rep))+geom_point(size=3,alpha=0.6, color=\"#1F78B4\") +  theme_linedraw() + ylim(-2,7) +\n  xlab(\"HB27\") + ylab(\"HB27_rep\") + stat_poly_line(color=\"#1F78B4\",fill=\"#1F78B4\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nppol &lt;- ggplot(data = scores, aes(x=Score_ppol,y=Score_ppol_rep))+geom_point(size=3,alpha=0.6, color=\"#33A02C\")  + theme_linedraw() + ylim(-2,7) +\n  xlab(\"ppol\") + ylab(\"ppol_rep\") +  stat_poly_line(color=\"#33A02C\",fill=\"#33A02C\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\nggarrange(box, wt, ppol,\n          labels = c(\"A\", \"B\",\"C\"), ncol=1\n         )\n\n\n\n\n\nFigure 6. Tn insertion scores per gene. (A) Boxplot of gene scores per sample. (B) Correlation of scores per gene and sample.\n\n\n\n\nAs we can see, the correlation between both PPOL samples is only moderate, in agreement with a clear difference in the original sample. This can be also seen in the PCA plot below, in which the Ppol_rep (TNB09) sample contains around 20% variability.\n\n\nShow the code\ntnseq.pca &lt;- prcomp(tnseq[,c(7,9,11,13)], \n                   center = TRUE, \n                   scale. = TRUE) \nbiplot(tnseq.pca, expand=2.75, xlim=c(-0.04,0.15),ylim=c(-0.2,0.2) )\n\n\n\n\n\nFigure 7. Samples PCA plot.\n\n\n\n\n\n\n\n\n\n\nShould we rule out the ppol mother sample?\n\n\n\nThis sample contains 20% of the total data variance. Therefore, it will hinder the analysis of gene essentiality and probably lead to false negative results. However, we decided to keep it as its inherent divergence will also strengthen our results.\n\n\nIn order to analyze in detail the difference between samples, we construct also an interactive plot. Put your mouse pointer over any point and you will see the Score and the Gene.\n\n\nShow the code\nscores$mean &lt;- apply(scores, 1, mean)\nkk &lt;- cbind(tnseq$Gene,scores$mean,stack(scores))\ndis &lt;- ggplot(data=kk) +\n  geom_point(aes(x=reorder(`tnseq$Gene`,`scores$mean`,decreasing=TRUE),y=values,color=ind), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\nShow the code\nggplotly(dis)\n\n\n\n\nFigure 8. Comparison of Tn insertion Z-scores per gene. Values were sorted by the average of all samples.\n\n\n\n\nInsertions in key genes\n\n\nShow the code\n#read Table\nLH &lt;- read_xlsx(\"DNAprocessestoGraph.xlsx\",sheet=1)\n\n\nNew names:\n• `` -&gt; `...17`\n\n\nShow the code\nLH &lt;- LH[grep(\"TT_C\",LH$Genes),]\ncoding$Genes &lt;- substr(coding$V9,9,16)\ntmp &lt;- coding[coding$V3==\"CDS\",c(1,10,4,5)]\n#tmp &lt;- HB27_genome[HB27_genome$V3 ==\"gene\",c(9,4,5)]\n\n#ribosoma &lt;- c(\"TT_C3035\",\"TT_C3056\",\"TT_C3036\",\"TT_C3055\",\"TT_C3024\",\"TT_C3048\")\ntmp &lt;- tmp[tmp$Genes %in% LH$Genes,]\n#tmp &lt;- tmp[tmp$Genes %in% ribosoma,]\n\n\n#inssertions\ninsertions &lt;- vector(mode = \"list\", length = 4)\nnames(insertions) &lt;- names(samples)\n\nfor (j in 1:4){\n  for (i in 1:nrow(tmp)){\n  insertions[[j]][[i]] &lt;- insertion_table[[j]][insertion_table[[j]]$Gene==tmp$Genes[i],8]\n  }\n  names(insertions[[j]]) &lt;- tmp$Genes\n}\n\n\nkk &lt;- cbind(insertion_table[[1]], \"HB27\")\nkk &lt;- rbind(kk,cbind(insertion_table[[2]], \"HB27_rep\"))\nkk &lt;- rbind(kk,cbind(insertion_table[[3]], \"ppol\"))\nkk &lt;- rbind(kk,cbind(insertion_table[[4]], \"ppol_rep\"))\nkk$Strand &lt;- as.logical(kk$Strand==\"+\")\n\nkeygenes &lt;- list()\n\nkeygenes &lt;- lapply(1:nrow(tmp), FUN = function(i) {\n  tmp2 &lt;- tmp[c(i,i,i,i),]\n  tmp2$V1 &lt;- names(samples)\n  keygenes[[i]] &lt;- ggplot(tmp2, aes(xmin = V4, xmax = V5, y = forcats::fct_rev(V1),  label=Genes)) +\n    geom_gene_arrow() +\n    geom_feature(data = kk[kk$Gene %in% tmp2[,2],], aes(x = i.start, y = V2, forward = Strand,color=Strand)  ) + scale_color_discrete(name = \"Strand\", labels = c(\"Reverse\", \"Forward\")) + \n    theme_bw() + theme(legend.position=\"none\") +\n    geom_gene_label(align = \"left\") +  ylab(\"\") + xlab(\"\")\n})\ndo.call(\"grid.arrange\", c(keygenes, ncol = 3))\n\n\n\n\n\nFigure 9. Tn insertions in key genes in forward (blue) and reverse (pink) strands. Only insertions between 10-90% central gene interval considered for score calculation and plotted.\n\n\n\n\n\nClick for Session Information\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] circlize_0.4.16     gridExtra_2.3       readxl_1.4.3       \n [4] ggpmisc_0.6.0       ggpp_0.5.8-1        plotly_4.10.4      \n [7] details_0.3.0       ggpubr_0.6.0        lubridate_1.9.3    \n[10] forcats_1.0.0       stringr_1.5.1       purrr_1.0.2        \n[13] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[16] tidyverse_2.0.0     dplyr_1.1.4         Rsubread_2.19.0    \n[19] gggenes_0.5.1       kableExtra_1.4.0    data.table_1.15.4  \n[22] ggplot2_3.5.1       formatR_1.14        knitr_1.48         \n[25] BiocManager_1.30.23\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    viridisLite_0.4.2   farver_2.1.2       \n [4] R.utils_2.12.3      fastmap_1.2.0       lazyeval_0.2.2     \n [7] digest_0.6.36       timechange_0.3.0    lifecycle_1.0.4    \n[10] survival_3.7-0      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         ggsignif_0.6.4      labeling_0.4.3     \n[19] htmlwidgets_1.6.4   RColorBrewer_1.1-3  xml2_1.3.6         \n[22] abind_1.4-5         withr_3.0.1         R.oo_1.26.0        \n[25] desc_1.4.3          grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    scales_1.3.0        MASS_7.3-61        \n[31] cli_3.6.3           rmarkdown_2.28      generics_0.1.3     \n[34] rstudioapi_0.16.0   httr_1.4.7          tzdb_0.4.0         \n[37] polynom_1.4-1       splines_4.4.0       cellranger_1.1.0   \n[40] vctrs_0.6.5         Matrix_1.7-0        jsonlite_1.8.8     \n[43] carData_3.0-5       SparseM_1.84-2      confintr_1.0.2     \n[46] car_3.1-2           hms_1.1.3           rstatix_0.7.2      \n[49] crosstalk_1.2.1     systemfonts_1.1.0   clipr_0.8.0        \n[52] glue_1.7.0          cowplot_1.1.3       stringi_1.8.4      \n[55] gtable_0.3.5        shape_1.4.6.1       munsell_0.5.1      \n[58] pillar_1.9.0        htmltools_0.5.8.1   quantreg_5.98      \n[61] ggfittext_0.10.2    R6_2.5.1            evaluate_0.24.0    \n[64] lattice_0.22-6      highr_0.11          R.methodsS3_1.8.2  \n[67] png_0.1-8           backports_1.5.0     broom_1.0.6        \n[70] MatrixModels_0.5-3  svglite_2.1.3       xfun_0.47          \n[73] pkgconfig_2.0.3     GlobalOptions_0.1.2"
  },
  {
    "objectID": "reads_dd_processing.html#section",
    "href": "reads_dd_processing.html#section",
    "title": "TnSeq Illumina Data Processing",
    "section": "",
    "text": "Show the code\n#from https://github.com/holtzy/quarto-tricks\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] circlize_0.4.16     gridExtra_2.3       readxl_1.4.3       \n [4] ggpmisc_0.6.0       ggpp_0.5.8-1        plotly_4.10.4      \n [7] details_0.3.0       ggpubr_0.6.0        lubridate_1.9.3    \n[10] forcats_1.0.0       stringr_1.5.1       purrr_1.0.2        \n[13] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[16] tidyverse_2.0.0     dplyr_1.1.4         Rsubread_2.18.0    \n[19] gggenes_0.5.1       kableExtra_1.4.0    data.table_1.15.4  \n[22] ggplot2_3.5.1       formatR_1.14        knitr_1.47         \n[25] BiocManager_1.30.23\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    viridisLite_0.4.2   farver_2.1.2       \n [4] R.utils_2.12.3      fastmap_1.2.0       lazyeval_0.2.2     \n [7] digest_0.6.36       timechange_0.3.0    lifecycle_1.0.4    \n[10] survival_3.7-0      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.8          ggsignif_0.6.4      labeling_0.4.3     \n[19] htmlwidgets_1.6.4   RColorBrewer_1.1-3  xml2_1.3.6         \n[22] abind_1.4-5         withr_3.0.0         R.oo_1.26.0        \n[25] desc_1.4.3          grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-0    scales_1.3.0        MASS_7.3-61        \n[31] cli_3.6.3           rmarkdown_2.27      generics_0.1.3     \n[34] rstudioapi_0.16.0   httr_1.4.7          tzdb_0.4.0         \n[37] polynom_1.4-1       splines_4.4.0       cellranger_1.1.0   \n[40] vctrs_0.6.5         Matrix_1.7-0        jsonlite_1.8.8     \n[43] carData_3.0-5       SparseM_1.84        confintr_1.0.2     \n[46] car_3.1-2           hms_1.1.3           rstatix_0.7.2      \n[49] crosstalk_1.2.1     systemfonts_1.1.0   clipr_0.8.0        \n[52] glue_1.7.0          cowplot_1.1.3       stringi_1.8.4      \n[55] gtable_0.3.5        shape_1.4.6.1       munsell_0.5.1      \n[58] pillar_1.9.0        htmltools_0.5.8.1   quantreg_5.98      \n[61] ggfittext_0.10.2    R6_2.5.1            evaluate_0.24.0    \n[64] lattice_0.22-6      highr_0.11          R.methodsS3_1.8.2  \n[67] png_0.1-8           backports_1.5.0     broom_1.0.6        \n[70] MatrixModels_0.5-3  svglite_2.1.3       xfun_0.45          \n[73] pkgconfig_2.0.3     GlobalOptions_0.1.2"
  },
  {
    "objectID": "genes_classification_dd.html",
    "href": "genes_classification_dd.html",
    "title": "TnSeq Genes classification",
    "section": "",
    "text": "First, let’s check the density plots, to see how the data are grouped.\n\n\nShow the code\n#read data\nscores &lt;- read.csv2(\"scores80_11nov2024.csv\")\nscores &lt;- cbind(rownames(scores),scores[,1:4])\nsamples &lt;- c(\"Ppol_1\"=\"TNB01\", \"Ppol_2\"=\"TNB09\",\"HB27_1\"=\"TNB03\", \"HB27_2\"=\"TNB07\")\nnames(scores) &lt;- c(\"Genes\",names(samples))\nscores[,2:5] &lt;- lapply(scores[,2:5],as.numeric)\nscores$mean &lt;- apply(scores[,2:5], 1, mean,na.rm=TRUE)\n#replace NAs for the mean\n#for (i in 2:5){\n#  for (j in 1:nrow(scores)){\n#    scores[j,i][is.na(scores[j,i])] &lt;- scores[j,6]\n#  }\n#}\nmy.cols &lt;- brewer.pal(4, \"Paired\")\n#density plot\nden &lt;- ggplot(data=stack(scores[,2:6]))+geom_density(aes(x=as.numeric(values),fill=ind,color=ind), alpha=0.4)+\n    scale_color_manual(values=c(my.cols,\"black\")) +\n  scale_fill_manual(values=c(my.cols,\"black\")) +\n    geom_vline(aes(xintercept=-0.5), color=\"grey\", linetype=\"dashed\")+\n    geom_vline(aes(xintercept=0.5), color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") +\n  theme_bw()\n#Hist\nhist &lt;- ggplot(data=stack(scores[,2:6]))+geom_histogram(aes(x=as.numeric(values),fill=ind,color=ind, alpha=0.2),binwidth=0.2)+\n     #scale_color_manual(values=c(my.cols,\"black\")) +\n     #scale_fill_manual(values=c(my.cols,\"black\")) +\n  scale_color_brewer(palette=\"Paired\") + scale_fill_brewer(palette=\"Paired\")+   \n  geom_vline(aes(xintercept=-0.6), color=\"grey\", linetype=\"dashed\")+\n     geom_vline(aes(xintercept=1),\n                color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") + facet_grid(~ind) +\n     theme_bw()\n#ggsave(\"fig2b\",hist+theme(legend.position = \"none\"),width=6,height=4)\nggarrange(den, hist, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2)\n\n\n\n\n\nFigure 9. Distribution of Z-scores in density (A) and histogram (B) plots.\n\n\n\n\nConsistent with Figure 8, we can see that most genes are clustered at a Z-score &lt;0, with a peak around -0.5 (grey line) and a shoulder centered at 1 (orange line). This indicates that most genes have a low number of insertions and that there is a gradient of genes up to a very high number of insertions.\nIn previous bacteria, the TnSeq data follow a bimodal distribution consisting of an exponential distribution of essential genes and a gamma family curve for the non-essential genes, with an inflection point in between (Goodall et al. 2018.; Moule et al. 2014; Valentino et al. 2014; Higgins et al. 2020; Ramsey et al. 2020; A. Ghomi et al. 2024), even in polyploid bacteria (Rubin et al. 2015). However, there is no inflection point in our data, so we confirm that there are no clear groups of essential/non-essential genes and only a gamma distribution can be fitted (p-value 2x10-16).\nTo make an approximate classification of the genes, we will perform an unsupervised cluster analysis. A similar approach was also used in a recent work (A. Ghomi et al. 2024), using DBSCAN algorithm. However, in that work they also have bimodal curve and more clear density separation of the score index. With our data, we obtained two large groups with wide range of overlapping index that was no very informative.\n\n\nShow the code\ncl&lt;-dbscan(scores[,c(2:5)],eps=0.65,MinPts = 200)\n\n\nWarning in dbscan(scores[, c(2:5)], eps = 0.65, MinPts = 200): converting\nargument MinPts (fpc) to minPts (dbscan)!\n\n\nShow the code\nhullplot(scores[,c(2:5)],cl$cluster)\n\n\n\n\n\nFigure 10. DBSCAN algorithm clustering\n\n\n\n\n\n\nShow the code\ntmp &lt;- cbind(stack(scores[,2:5]),scores[,6],cl$cluster)\nnames(tmp) &lt;- c(\"values\",\"ind\",\"mean\",\"cluster\")\nggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=as.factor(cluster)), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\nFigure 11. DBSCAN clustering results\n\n\n\n\nThus, we decided to use a more classical approach and compare K-means and PAM clustering. First, we will test the number of clusters that allow us to better classify the genes.\n\n\nShow the code\n#wss o silhoutte?\nwss &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"wss\" , linecolor = \"darkblue\") + labs(title= \"Elbow (WSS)\") \nsi &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"silhouette\", linecolor = \"darkblue\")+ labs(title= \"SILHOUETTE\") \n\n#kmeans, pam \npam &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = cluster::pam, method = \"silhouette\", k.max = 10) + labs(title= \"PAM clustering\") \nk &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = kmeans, method = \"silhouette\", k.max = 10) + labs(title= \"K-means clustering\")\n\n\n\nggarrange(wss, si, pam,k,\n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 12. Determination of best number of clusters for the TnSeq data, using the elbow (A) or silhouette (B) method. Panels (C) and (D) show the number of clusters by PAM and K-means, respectively.)\n\n\n\n\nNow, we will compare all the clustering methods, DBSCAN and K-means and PAM with two clusters. We will select the method that yield a higher average silhouette value.\n\n\nShow the code\n#DBSCAN silhouette\nsil.dbscan &lt;- silhouette(cl$cluster, dist(scores[,c(2:5)]))\ns1 &lt;- fviz_cluster(object = cl, data = scores[,c(2:5)], ellipse.type = \"t\",labelsize = 0,\n              repel = FALSE) +\n     theme_bw() +\n     labs(title = \"DBSCAN clustering\") +\n     theme(legend.position = \"none\")\ns2 &lt;- fviz_silhouette(sil.dbscan, palette=\"jco\")+  theme(    panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n0       0  755          0.16\n1       1 1508          0.74\n\n\nShow the code\n#kmeans\nkmclust2 &lt;- eclust(scores[,2:5], k=2, FUNcluster=\"kmeans\", hc_metric=\"manhattan\",graph=F)\nk1 &lt;- fviz_cluster(object = kmclust2, data = datos, ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"Kmeans clustering\") +\n  theme(legend.position = \"none\")\n\nk2 &lt;- fviz_silhouette(kmclust2, palette=\"jco\")+  theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1 1797          0.69\n2       2  466          0.37\n\n\nShow the code\n#pams\nset.seed(123)\npam_clusters &lt;- pam(x= scores[,2:5], k=2, metric = \"manhattan\")\n\n\n#visualization\np1 &lt;- fviz_cluster(object = pam_clusters, data = scores[,2:5], ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"PAM clustering\") +\n  theme(legend.position = \"none\")\n\n\np2 &lt;- fviz_silhouette(pam_clusters, palette=\"jco\")+    theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1 1598          0.76\n2       2  665          0.26\n\n\nShow the code\nggarrange(s1,s2,k1, k2, p1,p2,\n          labels = c(\"A\", \"\",\"B\",\"\",\"C\",\"\"), ncol=2,nrow = 3)\n\n\n\n\n\nFigure 13. Comparison of clustering method. Cluster results and silhouette plots for DBSCAN (A), K-Means (B) and PAM (C) clustering method are shown.\n\n\n\n\nThe Kmeans clustering is slightly better as its clusters area are closer to the silhouette mean, thus we will keep this clusters and name them as “Highly Permissive” and “Intermediate” genes. As shown in the following plot, both groups are well separated.\n\n\nShow the code\n#full table\n#subset the ~10% genes with less insertions\ndatos.j = cbind(scores, cluster= kmclust2$cluster)\n\nggplot(data=cbind(datos.j$cluster,stack(datos.j[,2:5]))) +xlab(\"Z-Score (log2)\") + ylab(\"Gene density\") + \n     geom_density(aes(x=as.numeric(values),group=as.factor(`datos.j$cluster`), color=`datos.j$cluster`, fill=`datos.j$cluster`), alpha=0.7)+\n    theme_classic() + facet_grid(~ind)  +labs(fill=\"Cluster\",color=\"Cluster\")\n\n\n\n\n\nFigure 14. Density plot of genes by cluster in each sample.\n\n\n\n\nThe first group contains the genes with higher Z-score mean and the second large group contains the genes with less insertions. To highlight the top genes with less insertions, we empirically select the ~10% genes with less insertions as “Less Permissive” genes, corresponding to 212 genes with a Z-score &lt; -0.6. This subset is an artificial creation within the “Intermediate” cluster, not distinctly separate from it (Figure 16), but useful for data representation and discussion.\n\n\nShow the code\n#how many?\n#nrow(datos.j[datos.j$HB27_1&lt;(-0.6) & datos.j$HB27_2&lt;(-0.6)  & datos.j$Ppol_1&lt;(-0.6)  & datos.j$Ppol_2&lt;(-0.6) ,])\n\ndatos.j$cluster[datos.j$Ppol_1&lt;(-0.6) & datos.j$Ppol_2&lt;(-0.6)  & datos.j$HB27_1&lt;(-0.6)  & datos.j$HB27_2&lt;(-0.6)] &lt;- 3\ndatos.j$cluster &lt;- as.factor(datos.j$cluster)\n\ndatos.j &lt;- datos.j %&gt;% \n    mutate(across(c('Ppol_1', 'Ppol_2',\"HB27_1\",\"HB27_2\",\"mean\"), round, 3)) %&gt;% \nmutate(cluster = case_when(cluster == 1 ~ \"Intermediate\", cluster == 2 ~ \"Highly Permissive\",cluster==3 ~ \"Less Permissive\")) \n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\nShow the code\nggplot(data=cbind(datos.j$cluster,stack(datos.j[,2:5]))) +xlab(\"Z-Score\") + ylab(\"Gene density\") +\n     geom_density(aes(x=as.numeric(values),group=as.factor(`datos.j$cluster`), color=`datos.j$cluster`, fill=`datos.j$cluster`), alpha=0.7)+\n    theme_classic() + facet_grid(~ind)  +labs(fill=\"Cluster\",color=\"Cluster\")\n\n\n\n\n\nFigure 15. Density plot of genes by cluster in each sample including the Less Permissive group\n\n\n\n\nThe separation between the “Intermediate” and “Highly Permissive” cluster is not very clear, as expected. Thus, for some analysis, we will consider these groups as only one same cluster. The following table contain the genes Z-score and classification in three groups.\n\n\nShow the code\ndatatable(datos.j,rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\n\n\n\n\nShow the code\n#save final table\nwrite.table(datos.j,\"scores_clusters_11nov2024.csv\",sep=\";\",row.names=FALSE)\n\n\n\n\nLet’s see how are the groups in each sample. Note that the genes are ordered by their mean score.\n\n\nShow the code\ntmp &lt;- cbind(stack(datos.j[,2:5]),datos.j[,6:7])\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\np1 &lt;- ggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=cluster), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_manual(values=c(\"#FF9966\", \"#619CFF\" ,\"#3366CC\")) + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n#histogram\n#ggplot(data=tmp) +xlab(\"Z-Score (log2)\") + ylab(\"Gene density\") + \n #    geom_histogram(aes(x=as.numeric(values),color=cluster, fill=cluster), alpha=0.7, binwidth=0.2)+\n  #   theme_classic() + facet_grid(~ind) \n#final plot for paper\np2 &lt;- ggplot(data=datos.j[,6:7]) +xlab(\"Z-Score\") + ylab(\"Gene density\") +\n     geom_density(aes(x=as.numeric(mean),group=as.factor(cluster), color=cluster, fill=cluster), alpha=0.7)+\n     theme_classic()   +labs(fill=\"Group\",color=\"Group\")+scale_fill_manual(values=c(\"#FF9966\",\"#619CFF\" , \"#3366CC\"))+scale_color_manual(values=c(\"#FF9966\", \"#619CFF\" ,\"#3366CC\"))+guides(fill=guide_legend(position = \"inside\"))+theme(legend.position.inside = c(0.8,0.7))\nggsave(\"fig3a.pdf\",p2,width=4,height=2.5)\nggarrange(p1, p2,\n          labels = c(\"A\", \"B\"), ncol=1)\n\n\n\n\n\nFigure 16. Plot of Tn insertion Z-scores per gene and group. Density plot in all samples (A) and mean values (B). Values were sorted by the average of all samples.\n\n\n\n\n\n\n\nAlthough there is overall no differences between strains, we are going to check in detail if there is any gene with statistically significant more/less Tn insertions.\n\n\nShow the code\n#meethod from https://lashlock.github.io/compbio/R_presentation.html\n#we need to use raw counts as integers, no Z-scores and only complete cases\ncountData &lt;- read.csv('tnseq_dd_counts_scores_all.csv', header = TRUE, sep = \";\")\ncountData &lt;- na.omit(countData[,c(1,7,9,11,13)])\ncountData[,2:5] &lt;- lapply(countData[,2:5], as.integer)\n\nmetaData &lt;- data.frame(names(countData[,2:5]),c(\"Ppol\",\"Ppol\",\"HB27\",\"HB27\"),c(\"Exp1\",\"Exp2\",\"Exp1\",\"Exp2\"))\n\nnames(metaData) &lt;- c(\"Sample\",\"Strain\",\"Experiment\")\n\ndds &lt;- DESeqDataSetFromMatrix(countData=countData, \n                              colData=metaData, \n                              design=~Strain, tidy = TRUE)\n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nShow the code\ndds &lt;- DESeq(dds)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\nShow the code\nres &lt;- results(dds)\n\nres &lt;- res[order(res$padj),]\n\nres$diffexpressed &lt;- \"NO\"\nres$diffexpressed[res$log2FoldChange &gt; 2 & res$padj &lt; 0.01] &lt;- \"UP\"\nres$diffexpressed[res$log2FoldChange &lt; -2 & res$padj &lt; 0.01] &lt;- \"DOWN\"\n\nlibrary(ggrepel)\n# plot adding up all layers we have seen so far\nggplot(data=res, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=row.names(res))) +\n        geom_point() + \n        theme_minimal() +\n        geom_text_repel() +\n        scale_color_manual(values=c(\"blue\", \"black\", \"red\")) #+\n\n\nWarning: Removed 1315 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 1315 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\nWarning: ggrepel: 935 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nFigure 17. Volcano plot of differential Tn5 target genes in HB27 vs. Ppol strains (fold change &gt;4, p.adj&lt;0.01).\n\n\n\n\nShow the code\n        #geom_vline(xintercept=c(-2, 2), col=\"red\") +\n        #geom_hline(yintercept=-log10(0.05), col=\"red\")\n\n\nAs we can see there are genes with significant differences between samples."
  },
  {
    "objectID": "genes_classification_dd.html#classification-of-genes-by-z-scores",
    "href": "genes_classification_dd.html#classification-of-genes-by-z-scores",
    "title": "TnSeq Genes classification",
    "section": "",
    "text": "First, let’s check the density plots, to see how the data are grouped.\n\n\nShow the code\n#read data\nscores &lt;- read.csv2(\"scores80_11nov2024.csv\")\nscores &lt;- cbind(rownames(scores),scores[,1:4])\nsamples &lt;- c(\"Ppol_1\"=\"TNB01\", \"Ppol_2\"=\"TNB09\",\"HB27_1\"=\"TNB03\", \"HB27_2\"=\"TNB07\")\nnames(scores) &lt;- c(\"Genes\",names(samples))\nscores[,2:5] &lt;- lapply(scores[,2:5],as.numeric)\nscores$mean &lt;- apply(scores[,2:5], 1, mean,na.rm=TRUE)\n#replace NAs for the mean\n#for (i in 2:5){\n#  for (j in 1:nrow(scores)){\n#    scores[j,i][is.na(scores[j,i])] &lt;- scores[j,6]\n#  }\n#}\nmy.cols &lt;- brewer.pal(4, \"Paired\")\n#density plot\nden &lt;- ggplot(data=stack(scores[,2:6]))+geom_density(aes(x=as.numeric(values),fill=ind,color=ind), alpha=0.4)+\n    scale_color_manual(values=c(my.cols,\"black\")) +\n  scale_fill_manual(values=c(my.cols,\"black\")) +\n    geom_vline(aes(xintercept=-0.5), color=\"grey\", linetype=\"dashed\")+\n    geom_vline(aes(xintercept=0.5), color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") +\n  theme_bw()\n#Hist\nhist &lt;- ggplot(data=stack(scores[,2:6]))+geom_histogram(aes(x=as.numeric(values),fill=ind,color=ind, alpha=0.2),binwidth=0.2)+\n     #scale_color_manual(values=c(my.cols,\"black\")) +\n     #scale_fill_manual(values=c(my.cols,\"black\")) +\n  scale_color_brewer(palette=\"Paired\") + scale_fill_brewer(palette=\"Paired\")+   \n  geom_vline(aes(xintercept=-0.6), color=\"grey\", linetype=\"dashed\")+\n     geom_vline(aes(xintercept=1),\n                color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") + facet_grid(~ind) +\n     theme_bw()\n#ggsave(\"fig2b\",hist+theme(legend.position = \"none\"),width=6,height=4)\nggarrange(den, hist, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2)\n\n\n\n\n\nFigure 9. Distribution of Z-scores in density (A) and histogram (B) plots.\n\n\n\n\nConsistent with Figure 8, we can see that most genes are clustered at a Z-score &lt;0, with a peak around -0.5 (grey line) and a shoulder centered at 1 (orange line). This indicates that most genes have a low number of insertions and that there is a gradient of genes up to a very high number of insertions.\nIn previous bacteria, the TnSeq data follow a bimodal distribution consisting of an exponential distribution of essential genes and a gamma family curve for the non-essential genes, with an inflection point in between (Goodall et al. 2018.; Moule et al. 2014; Valentino et al. 2014; Higgins et al. 2020; Ramsey et al. 2020; A. Ghomi et al. 2024), even in polyploid bacteria (Rubin et al. 2015). However, there is no inflection point in our data, so we confirm that there are no clear groups of essential/non-essential genes and only a gamma distribution can be fitted (p-value 2x10-16).\nTo make an approximate classification of the genes, we will perform an unsupervised cluster analysis. A similar approach was also used in a recent work (A. Ghomi et al. 2024), using DBSCAN algorithm. However, in that work they also have bimodal curve and more clear density separation of the score index. With our data, we obtained two large groups with wide range of overlapping index that was no very informative.\n\n\nShow the code\ncl&lt;-dbscan(scores[,c(2:5)],eps=0.65,MinPts = 200)\n\n\nWarning in dbscan(scores[, c(2:5)], eps = 0.65, MinPts = 200): converting\nargument MinPts (fpc) to minPts (dbscan)!\n\n\nShow the code\nhullplot(scores[,c(2:5)],cl$cluster)\n\n\n\n\n\nFigure 10. DBSCAN algorithm clustering\n\n\n\n\n\n\nShow the code\ntmp &lt;- cbind(stack(scores[,2:5]),scores[,6],cl$cluster)\nnames(tmp) &lt;- c(\"values\",\"ind\",\"mean\",\"cluster\")\nggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=as.factor(cluster)), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\nFigure 11. DBSCAN clustering results\n\n\n\n\nThus, we decided to use a more classical approach and compare K-means and PAM clustering. First, we will test the number of clusters that allow us to better classify the genes.\n\n\nShow the code\n#wss o silhoutte?\nwss &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"wss\" , linecolor = \"darkblue\") + labs(title= \"Elbow (WSS)\") \nsi &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"silhouette\", linecolor = \"darkblue\")+ labs(title= \"SILHOUETTE\") \n\n#kmeans, pam \npam &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = cluster::pam, method = \"silhouette\", k.max = 10) + labs(title= \"PAM clustering\") \nk &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = kmeans, method = \"silhouette\", k.max = 10) + labs(title= \"K-means clustering\")\n\n\n\nggarrange(wss, si, pam,k,\n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 12. Determination of best number of clusters for the TnSeq data, using the elbow (A) or silhouette (B) method. Panels (C) and (D) show the number of clusters by PAM and K-means, respectively.)\n\n\n\n\nNow, we will compare all the clustering methods, DBSCAN and K-means and PAM with two clusters. We will select the method that yield a higher average silhouette value.\n\n\nShow the code\n#DBSCAN silhouette\nsil.dbscan &lt;- silhouette(cl$cluster, dist(scores[,c(2:5)]))\ns1 &lt;- fviz_cluster(object = cl, data = scores[,c(2:5)], ellipse.type = \"t\",labelsize = 0,\n              repel = FALSE) +\n     theme_bw() +\n     labs(title = \"DBSCAN clustering\") +\n     theme(legend.position = \"none\")\ns2 &lt;- fviz_silhouette(sil.dbscan, palette=\"jco\")+  theme(    panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n0       0  755          0.16\n1       1 1508          0.74\n\n\nShow the code\n#kmeans\nkmclust2 &lt;- eclust(scores[,2:5], k=2, FUNcluster=\"kmeans\", hc_metric=\"manhattan\",graph=F)\nk1 &lt;- fviz_cluster(object = kmclust2, data = datos, ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"Kmeans clustering\") +\n  theme(legend.position = \"none\")\n\nk2 &lt;- fviz_silhouette(kmclust2, palette=\"jco\")+  theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1 1797          0.69\n2       2  466          0.37\n\n\nShow the code\n#pams\nset.seed(123)\npam_clusters &lt;- pam(x= scores[,2:5], k=2, metric = \"manhattan\")\n\n\n#visualization\np1 &lt;- fviz_cluster(object = pam_clusters, data = scores[,2:5], ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"PAM clustering\") +\n  theme(legend.position = \"none\")\n\n\np2 &lt;- fviz_silhouette(pam_clusters, palette=\"jco\")+    theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1 1598          0.76\n2       2  665          0.26\n\n\nShow the code\nggarrange(s1,s2,k1, k2, p1,p2,\n          labels = c(\"A\", \"\",\"B\",\"\",\"C\",\"\"), ncol=2,nrow = 3)\n\n\n\n\n\nFigure 13. Comparison of clustering method. Cluster results and silhouette plots for DBSCAN (A), K-Means (B) and PAM (C) clustering method are shown.\n\n\n\n\nThe Kmeans clustering is slightly better as its clusters area are closer to the silhouette mean, thus we will keep this clusters and name them as “Highly Permissive” and “Intermediate” genes. As shown in the following plot, both groups are well separated.\n\n\nShow the code\n#full table\n#subset the ~10% genes with less insertions\ndatos.j = cbind(scores, cluster= kmclust2$cluster)\n\nggplot(data=cbind(datos.j$cluster,stack(datos.j[,2:5]))) +xlab(\"Z-Score (log2)\") + ylab(\"Gene density\") + \n     geom_density(aes(x=as.numeric(values),group=as.factor(`datos.j$cluster`), color=`datos.j$cluster`, fill=`datos.j$cluster`), alpha=0.7)+\n    theme_classic() + facet_grid(~ind)  +labs(fill=\"Cluster\",color=\"Cluster\")\n\n\n\n\n\nFigure 14. Density plot of genes by cluster in each sample.\n\n\n\n\nThe first group contains the genes with higher Z-score mean and the second large group contains the genes with less insertions. To highlight the top genes with less insertions, we empirically select the ~10% genes with less insertions as “Less Permissive” genes, corresponding to 212 genes with a Z-score &lt; -0.6. This subset is an artificial creation within the “Intermediate” cluster, not distinctly separate from it (Figure 16), but useful for data representation and discussion.\n\n\nShow the code\n#how many?\n#nrow(datos.j[datos.j$HB27_1&lt;(-0.6) & datos.j$HB27_2&lt;(-0.6)  & datos.j$Ppol_1&lt;(-0.6)  & datos.j$Ppol_2&lt;(-0.6) ,])\n\ndatos.j$cluster[datos.j$Ppol_1&lt;(-0.6) & datos.j$Ppol_2&lt;(-0.6)  & datos.j$HB27_1&lt;(-0.6)  & datos.j$HB27_2&lt;(-0.6)] &lt;- 3\ndatos.j$cluster &lt;- as.factor(datos.j$cluster)\n\ndatos.j &lt;- datos.j %&gt;% \n    mutate(across(c('Ppol_1', 'Ppol_2',\"HB27_1\",\"HB27_2\",\"mean\"), round, 3)) %&gt;% \nmutate(cluster = case_when(cluster == 1 ~ \"Intermediate\", cluster == 2 ~ \"Highly Permissive\",cluster==3 ~ \"Less Permissive\")) \n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\nShow the code\nggplot(data=cbind(datos.j$cluster,stack(datos.j[,2:5]))) +xlab(\"Z-Score\") + ylab(\"Gene density\") +\n     geom_density(aes(x=as.numeric(values),group=as.factor(`datos.j$cluster`), color=`datos.j$cluster`, fill=`datos.j$cluster`), alpha=0.7)+\n    theme_classic() + facet_grid(~ind)  +labs(fill=\"Cluster\",color=\"Cluster\")\n\n\n\n\n\nFigure 15. Density plot of genes by cluster in each sample including the Less Permissive group\n\n\n\n\nThe separation between the “Intermediate” and “Highly Permissive” cluster is not very clear, as expected. Thus, for some analysis, we will consider these groups as only one same cluster. The following table contain the genes Z-score and classification in three groups.\n\n\nShow the code\ndatatable(datos.j,rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\n\n\n\n\nShow the code\n#save final table\nwrite.table(datos.j,\"scores_clusters_11nov2024.csv\",sep=\";\",row.names=FALSE)\n\n\n\n\nLet’s see how are the groups in each sample. Note that the genes are ordered by their mean score.\n\n\nShow the code\ntmp &lt;- cbind(stack(datos.j[,2:5]),datos.j[,6:7])\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\np1 &lt;- ggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=cluster), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_manual(values=c(\"#FF9966\", \"#619CFF\" ,\"#3366CC\")) + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n#histogram\n#ggplot(data=tmp) +xlab(\"Z-Score (log2)\") + ylab(\"Gene density\") + \n #    geom_histogram(aes(x=as.numeric(values),color=cluster, fill=cluster), alpha=0.7, binwidth=0.2)+\n  #   theme_classic() + facet_grid(~ind) \n#final plot for paper\np2 &lt;- ggplot(data=datos.j[,6:7]) +xlab(\"Z-Score\") + ylab(\"Gene density\") +\n     geom_density(aes(x=as.numeric(mean),group=as.factor(cluster), color=cluster, fill=cluster), alpha=0.7)+\n     theme_classic()   +labs(fill=\"Group\",color=\"Group\")+scale_fill_manual(values=c(\"#FF9966\",\"#619CFF\" , \"#3366CC\"))+scale_color_manual(values=c(\"#FF9966\", \"#619CFF\" ,\"#3366CC\"))+guides(fill=guide_legend(position = \"inside\"))+theme(legend.position.inside = c(0.8,0.7))\nggsave(\"fig3a.pdf\",p2,width=4,height=2.5)\nggarrange(p1, p2,\n          labels = c(\"A\", \"B\"), ncol=1)\n\n\n\n\n\nFigure 16. Plot of Tn insertion Z-scores per gene and group. Density plot in all samples (A) and mean values (B). Values were sorted by the average of all samples.\n\n\n\n\n\n\n\nAlthough there is overall no differences between strains, we are going to check in detail if there is any gene with statistically significant more/less Tn insertions.\n\n\nShow the code\n#meethod from https://lashlock.github.io/compbio/R_presentation.html\n#we need to use raw counts as integers, no Z-scores and only complete cases\ncountData &lt;- read.csv('tnseq_dd_counts_scores_all.csv', header = TRUE, sep = \";\")\ncountData &lt;- na.omit(countData[,c(1,7,9,11,13)])\ncountData[,2:5] &lt;- lapply(countData[,2:5], as.integer)\n\nmetaData &lt;- data.frame(names(countData[,2:5]),c(\"Ppol\",\"Ppol\",\"HB27\",\"HB27\"),c(\"Exp1\",\"Exp2\",\"Exp1\",\"Exp2\"))\n\nnames(metaData) &lt;- c(\"Sample\",\"Strain\",\"Experiment\")\n\ndds &lt;- DESeqDataSetFromMatrix(countData=countData, \n                              colData=metaData, \n                              design=~Strain, tidy = TRUE)\n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nShow the code\ndds &lt;- DESeq(dds)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\nShow the code\nres &lt;- results(dds)\n\nres &lt;- res[order(res$padj),]\n\nres$diffexpressed &lt;- \"NO\"\nres$diffexpressed[res$log2FoldChange &gt; 2 & res$padj &lt; 0.01] &lt;- \"UP\"\nres$diffexpressed[res$log2FoldChange &lt; -2 & res$padj &lt; 0.01] &lt;- \"DOWN\"\n\nlibrary(ggrepel)\n# plot adding up all layers we have seen so far\nggplot(data=res, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=row.names(res))) +\n        geom_point() + \n        theme_minimal() +\n        geom_text_repel() +\n        scale_color_manual(values=c(\"blue\", \"black\", \"red\")) #+\n\n\nWarning: Removed 1315 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 1315 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\nWarning: ggrepel: 935 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nFigure 17. Volcano plot of differential Tn5 target genes in HB27 vs. Ppol strains (fold change &gt;4, p.adj&lt;0.01).\n\n\n\n\nShow the code\n        #geom_vline(xintercept=c(-2, 2), col=\"red\") +\n        #geom_hline(yintercept=-log10(0.05), col=\"red\")\n\n\nAs we can see there are genes with significant differences between samples."
  },
  {
    "objectID": "genes_classification_dd.html#genes-functional-classification",
    "href": "genes_classification_dd.html#genes-functional-classification",
    "title": "TnSeq Genes classification",
    "section": "Genes functional classification",
    "text": "Genes functional classification\n\nCOG\n\n\nShow the code\nnog &lt;- read_xlsx(\"00_raw/refs/MM_x4qgl_mt.emapper.annotations.xlsx\",sheet=1,skip=2)\nnog$seed_ortholog &lt;- gsub(\"262724.\",\"\",nog$seed_ortholog)\nnames(nog)[2] &lt;- \"Genes\"\n\n\nAfter calculating the Z-scores, we are going to group the genes by their functions, using COG and KEGG functional categories. Functional annotation was obtained at EggNog mapper website Cantalapiedra et al. (2021). We could annotate 2006 (92.4%) of the HB27 proteins.\n\n\nShow the code\n#load COG list\ncog &lt;- read.table(\"scripts/cog_list.csv\",sep=\";\",header=TRUE)\ncog &lt;- cog[-26,]\n\n#summarize and split categories\ncategories &lt;- c()\nfor (i in 1:nrow(cog)){\n  categories &lt;- grep(cog$category[i],nog$COG_category)\n  cog$sum[i] &lt;- length(categories)\n}\n\n#plot freqs\nggplot(cog,aes(y=as.numeric(sum), x=definition,color=group,fill=group)) + \n    geom_bar(stat=\"identity\", position=\"stack\", alpha=0.8) + ylab(\"Number of genes\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 500, by = 100))+\n  theme_classic() + theme(text=element_text(size=15),legend.text=element_text(size=9))\n\n\n\n\n\nFigure 18. COG groups annotated in HB27 genes\n\n\n\n\nAfter the incorporation of COG and KEGG annotations, the final TnSeq table is exported as tnSeq_dd_full.csv.\n\n\nShow the code\n#merge\nfinal &lt;- merge(datos.j,nog[,c(2,5,7,8,12)], all.x=TRUE)\n\nfinal$COG_category &lt;- final$COG_category %&gt;% replace_na('-')\nfor (i in 1:nrow(final)){\n  if (final$COG_category[i]!='-'){\n      final$COG_group[i] &lt;- cog$group[cog$category == substr(final$COG_category,1,1)[i]]  } else{\n        final$COG_group[i]=='-'\n    }\n}\nfinal$COG_group &lt;- as.factor(final$COG_group)\n\n#add Mario gene annotation\nmario &lt;- readxl::read_excel(\"00_raw/refs/HB8_HB27_final.xlsx\")\n\n\nNew names:\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n• `` -&gt; `...10`\n• `` -&gt; `...11`\n\n\nShow the code\nmario &lt;- subset(mario,!is.na(mario$HB27))\nmario &lt;- mario[,c(7,4,3,6,5,2)]\ncolnames(mario) &lt;- c(\"Genes\",\"Genes_HB8\",\"locus_tag\",\"name\",\"Description\",\"aa\")\nfinal &lt;- merge(final,mario,by=\"Genes\", all.x=TRUE)\nfinal$mean &lt;- apply(final[,2:5],1,mean)\nfinal$sd &lt;- apply(final[,2:5],1,sd)\nfinal[grep(\"tRNA-\",final$name),9] &lt;- \"J\"\nfinal[grep(\"tRNA-\",final$name),11] &lt;- \"ko:K14228\"\nfinal[grep(\"rRNA\",final$name),11] &lt;- \"ko:K01980\"\nfinal &lt;- final %&gt;% replace(is.na(.), '-')\nfinal[,8] &lt;- substr(final[,8],1,7)\nfinal &lt;- final[,c(1,7:16,2:6,18)]\nwrite.table(final,\"tnSeq_dd_full.csv\", sep=\";\", row.names=FALSE)\n\n#correlation\nwt &lt;- ggplot(data = final, aes(x=HB27_1,y=HB27_2,color=COG_group))+geom_point(size=3,alpha=0.6) +  theme_linedraw() + \n  xlab(\"HB27_1\") + ylab(\"HB27_2\") + stat_poly_line(color=\"#1F78B4\",fill=\"#1F78B4\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) +guides(color = guide_legend(nrow = 2))\n\n\nppol &lt;- ggplot(data = final, aes(x=Ppol_1,y=Ppol_2,color=COG_group))+geom_point(size=3,alpha=0.6)  + theme_linedraw() +\n  xlab(\"Ppol_1\") + ylab(\"Ppol_2\") +  stat_poly_line(color=\"#33A02C\",fill=\"#33A02C\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nggarrange(wt, ppol,\n          labels = c(\"A\", \"B\"), ncol=1,common.legend = TRUE,legend=\"bottom\")\n\n\n\n\n\nFigure 19. Tn insertion scores per gene. Correlation between samples in WT (A) and Ppol (B) strains. Genes are colored by COG group\n\n\n\n\nNow, we are going to plot the genes by groups and COG\n\n\nShow the code\nstats &lt;- as.data.frame(table(final$COG_category,final$cluster))\ncategories &lt;- c()\nfor (i in 1:nrow(cog)){\n  categories &lt;- grep(cog$category[i],stats$Var1)\n  categories_D &lt;- subset(stats[categories,], Var2==\"Highly Permissive\")\n  categories_R &lt;- subset(stats[categories,], Var2==\"Intermediate\")\n  categories_T &lt;- subset(stats[categories,], Var2==\"Less Permissive\")\n  cog$Less_permissive[i] &lt;- sum(categories_T$Freq)\n  cog$Intermediate[i] &lt;- sum(categories_R$Freq)\n  cog$Highly_permissive[i] &lt;- sum(categories_D$Freq)\n}\ncog2 &lt;- cbind(cog[,1:3],stack(cog[,5:7]))\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\ncog2 &lt;- cog2 %&gt;% replace(is.na(.), 0)\nfor (i in 1:nrow(cog2)){\n  cog2$ratio[i] &lt;- cog2$values[i]*100/sum(cog2$values[cog2$category==cog2$category[i]])\n}\ncog2$ind &lt;- factor(cog2$ind,levels=c(\"Highly_permissive\",\"Intermediate\",\"Less_permissive\"))\n\n\n#plot \nggplot(cog2[!cog2$values==0,],aes(y=ratio, x=definition, group=ind, fill=ind)) + \n    geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\", alpha=0.8) + ylab(\"Gene category (%)\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 100, by = 10)) +   theme_bw() + theme(text=element_text(size=15))+scale_fill_manual(values=c(\"#FF9966\", \"#619CFF\" ,\"#3366CC\"))+labs(fill=\"Group\")\n\n\n\n\n\nFigure 20. Distribution of gene groups by COG functions\n\n\n\n\nShow the code\n#ggsave(\"figs5a.pdf\",width=10,height=3.5)\n\n\n\n\nShow the code\nggplot(cog2[!cog2$values==0 & cog2$ind==\"Less_permissive\",],aes(y=ratio, x=definition, group=ind)) + \n     geom_bar(stat=\"identity\", position=\"stack\", fill=\"steelblue\", alpha=0.8) + ylab(\"Gene category (%)\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 100, by = 10)) +   theme_bw() + theme(text=element_text(size=15))\n\n\n\n\n\nFigure 21. Abundance of Less Permissive genes amongst COG functions\n\n\n\n\nShow the code\n#gsave(\"figs5b.pdf\",width=9,height=4)\n\n\n\n\nKEGG\nEggNog mapper could assign KEGG Ontology (KO) group to 1352 (62.28%) of the HB27 proteins. After revision of the KO annotation, we manually incorporated several missing tRNA genes to improve the statistics, using K14228 (tRNA-leu).\n\n\nShow the code\n#parse data and count\nko &lt;- fread(\"scripts/ko.csv\",sep=\";\",header=TRUE)\ntrna &lt;- read.csv2(\"scripts/tRNAs.csv\",header = FALSE)\nfinal$KEGG_ko &lt;- gsub(\"ko:\",\"\",final$KEGG_ko)\n#tRNAs annotation is not very good, so we corrected for statistics\n#all tRNAs not annotated were masked as K14228 (tRNA-leu)\nfinal$KEGG_ko[final$Genes %in% trna$V1] &lt;- \"K14228\"\n\nduplicate_ko_rows &lt;- function(data) {\n  data %&gt;% \n    mutate(reaction_ko = strsplit(KEGG_ko, \",\")) %&gt;%  # Split ko annotations\n    unnest(reaction_ko) %&gt;%                         # Unnest each annotation into separate rows\n    select(-KEGG_ko)                            # Keep original columns except split annotations\n}\ndatos_unnested &lt;- duplicate_ko_rows(final)\n\nstats &lt;- summarise(group_by(datos_unnested,reaction_ko,cluster),count =n())\n\n\n`summarise()` has grouped output by 'reaction_ko'. You can override using the\n`.groups` argument.\n\n\nShow the code\nstats &lt;- plyr::join(stats,ko[,c(1:3,5)])\n\n\nJoining by: reaction_ko\n\n\nShow the code\n#xtabs\nxkegg &lt;- as.data.frame(xtabs(count~a_class+b_class+pathway+cluster,data=stats))\nxkegg &lt;- xkegg[!xkegg$Freq==0,]\n\nfor (i in 1:nrow(xkegg)){\n  xkegg$ratio_b[i] &lt;- xkegg$Freq[i]*100/sum(xkegg$Freq[xkegg$b_class==xkegg$b_class[i]])\n}\n\n\nxkegg$ratio_b &lt;- as.numeric(xkegg$ratio_b)\n\nxkegg$a_class &lt;- as.factor(xkegg$a_class)\nxkegg$b_class &lt;- as.factor(xkegg$b_class)\nxkegg$cluster &lt;- factor(xkegg$cluster,levels=c(\"Less Permissive\",\"Intermediate\",\"Highly Permissive\"))\n\n#plot main kegg categories\n#ggplot(xkegg,aes(y=ratio_b, x=b_class, group=factor(ind), fill=ind)) +   geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\",linewidth=0.2, alpha=0.7) + ylab(\"KO group (%)\") + xlab(\"\") + theme_bw() + theme(text=element_text(size=15), axis.text.x = element_text( angle = 45,  hjust = 1, size = 12),plot.margin =margin(l=100,b=10,t=5,r=5) )   + facet_grid(~factor(a_class),scales=\"free\",space=\"free\",drop=TRUE,labeller = as_labeller(factor(xkegg$a_class), default=label_wrap_gen(14)))\n\n#detailed kegg plot\nggplot(xkegg, aes(y=Freq, x=pathway, group=cluster, fill=cluster)) + \n     geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\",linewidth=0.2, alpha=0.7) + ylab(\"KO group members\") + xlab(\"\") + theme_bw() + theme(text=element_text(size=15), axis.text.x = element_text( angle = 45,  hjust = 1, size = 12),plot.margin =margin(l=100,b=10,t=5,r=5) )  +\n     facet_wrap(~a_class+b_class,scales=\"free\",drop=TRUE,ncol=3, labeller = label_wrap_gen(30))  + theme(legend.position = \"none\")\n\n\n\n\n\nFigure 22. Ratio of Highly Permissive (blue), Intermediate (green) and Less Permissive (red) genes in each KEGG Ontology group\n\n\n\n\n\n\nKEGG Ontology groups with more Less Permissive genes\nNow we, will plot only the “Less Permissive” genes.\n\n\nShow the code\nggplot(xkegg[xkegg$cluster==\"Less Permissive\" & xkegg$Freq&gt;5,], aes(y=Freq, x=pathway, group=cluster)) +     geom_bar(stat=\"identity\", position=\"stack\",linewidth=0.2, alpha=0.7, fill=\"steelblue\") + ylab(\"KO group members\") + xlab(\"\") + theme_bw()+ theme(text=element_text(size=15),plot.margin =margin(l=100,b=10,t=5,r=5) ) + coord_flip()\n\n\n\n\n\nFigure 23. KEGG ontology categories for Less Permissive genes\n\n\n\n\nRibosome, transporters and some energy metabolism proteins are the categories with more Less Permissive genes.\n\n\nKEGG pathways with Intermediate/Less Permissive genes\n\n\nShow the code\nrepli &lt;- nog$Genes[grep(\"map03030\",nog$KEGG_Pathway)]\nrepli &lt;- datos.j[datos.j$Genes %in% repli,]\nrepli_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03030/\",paste0(repli[repli$cluster!=\"Highly Permissive\",1],collapse=\"/\"))\n\n\nber &lt;- nog$Genes[grep(\"map03410\",nog$KEGG_Pathway)]\nber &lt;- datos.j[datos.j$Genes %in% ber,]\nber_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03410/\",paste0(ber[ber$cluster!=\"Highly Permissive\",1],collapse=\"/\"))\n\nner &lt;- nog$Genes[grep(\"map03420\",nog$KEGG_Pathway)]\nner &lt;- datos.j[datos.j$Genes %in% ner,]\nner_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03420/\",paste0(ner[ner$cluster!=\"Highly Permissive\",1],collapse=\"/\"))\n\nmmr &lt;- nog$Genes[grep(\"map03430\",nog$KEGG_Pathway)]\nmmr &lt;- datos.j[datos.j$Genes %in% mmr,]\nmmr_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03430/\",paste0(mmr[mmr$cluster!=\"Highly Permissive\",1],collapse=\"/\"))\n\nhr &lt;- nog$Genes[grep(\"map03440\",nog$KEGG_Pathway)]\nhr &lt;- datos.j[datos.j$Genes %in% hr,]\nhr_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03430/\",paste0(hr[hr$cluster!=\"Highly Permissive\",1],collapse=\"/\"))\n\nrpo &lt;- nog$Genes[grep(\"map03020\",nog$KEGG_Pathway)]\nrpo &lt;- datos.j[datos.j$Genes %in% rpo,]\nrpo_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03020/\",paste0(rpo[rpo$cluster!=\"Highly Permissive\",1],collapse=\"/\"))\n\nribo &lt;- nog$Genes[grep(\"map03010\",nog$KEGG_Pathway)]\nribo &lt;- datos.j[datos.j$Genes %in% ribo,]\nribo_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03010/\",paste0(ribo[ribo$cluster!=\"Highly Permissive\",1],collapse=\"/\"))\nribo_link &lt;- paste0(ribo_link,paste0(\"/\",paste0(c(\"TT_C3035\",\"TT_C3056\",\"TT_C3036\",\"TT_C3055\",\"TT_C3024\",\"TT_C3048\"),collapse =\"/\")))\n\n\nAs an example, you can see some of the HB27 RNA transcrition & translation and DNA replication & repair pathways in the following links: Ribosome, RNA Polymerase, DNA Replication, Base Excision Repair, Mismatch Repair, Nucleotide Excision Repair, and Homologous Recombination. The genes with orthologs in HB27 are depicted with green background and the Intermediate/Less Permissive genes are highlighted in red.\n\n\nShow the code\ntt &lt;- search_kegg_organism('Thermus thermophilus', by='scientific_name')\nkk &lt;- enrichKEGG(gene         = datos.j[datos.j$cluster==\"Less Permissive\"|datos.j$cluster==\"Intermediate\",1],\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\nif (sum(kk@result$p.adjust&lt;0.05)!=0){\n  p1 &lt;- dotplot(kk, title=\"Significant enriched KO\")\n} else {\n  p1 &lt;- c()\n}\n\n\nmkk &lt;- enrichMKEGG(gene         = datos.j[datos.j$cluster==\"Less Permissive\"|datos.j$cluster==\"Intermediate\",1],\n                 organism     = 'tth',\n                   pvalueCutoff = 1,\n                   qvalueCutoff = 1)\nif (sum(mkk@result$p.adjust&lt;0.05)!=0){\np2 &lt;- dotplot(mkk, title=\"Significant enriched KEGG modules\")\n}else {\n  p2 &lt;- c()\n}\n\n\nggarrange(p1, p2, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2,heights=c(1,3))\n\n\n\nClick for Session Information\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggrepel_0.9.6               dbscan_1.2-0               \n [3] DESeq2_1.45.3               SummarizedExperiment_1.35.5\n [5] Biobase_2.65.1              MatrixGenerics_1.17.1      \n [7] matrixStats_1.4.1           GenomicRanges_1.57.2       \n [9] GenomeInfoDb_1.41.2         IRanges_2.39.2             \n[11] S4Vectors_0.43.2            BiocGenerics_0.51.3        \n[13] clusterProfiler_4.13.4      ggpmisc_0.6.0              \n[15] ggpp_0.5.8-1                cluster_2.1.6              \n[17] factoextra_1.0.7            details_0.3.0              \n[19] ggpubr_0.6.0                lubridate_1.9.3            \n[21] forcats_1.0.0               stringr_1.5.1              \n[23] purrr_1.0.2                 readr_2.1.5                \n[25] tidyr_1.3.1                 tibble_3.2.1               \n[27] tidyverse_2.0.0             dplyr_1.1.4                \n[29] RColorBrewer_1.1-3          readxl_1.4.3               \n[31] DT_0.33                     data.table_1.16.2          \n[33] ggplot2_3.5.1               formatR_1.14               \n[35] knitr_1.48                  BiocManager_1.30.25        \n\nloaded via a namespace (and not attached):\n  [1] splines_4.4.1           ggplotify_0.1.2         R.oo_1.26.0            \n  [4] cellranger_1.1.0        confintr_1.0.2          lifecycle_1.0.4        \n  [7] rstatix_0.7.2           lattice_0.22-6          MASS_7.3-61            \n [10] crosstalk_1.2.1         backports_1.5.0         magrittr_2.0.3         \n [13] sass_0.4.9              rmarkdown_2.28          jquerylib_0.1.4        \n [16] yaml_2.3.10             ggtangle_0.0.3          cowplot_1.1.3          \n [19] DBI_1.2.3               abind_1.4-8             zlibbioc_1.51.2        \n [22] R.utils_2.12.3          yulab.utils_0.1.7       GenomeInfoDbData_1.2.13\n [25] enrichplot_1.25.5       tidytree_0.4.6          MatrixModels_0.5-3     \n [28] codetools_0.2-20        DelayedArray_0.31.14    DOSE_3.99.1            \n [31] xml2_1.3.6              tidyselect_1.2.1        aplot_0.2.3            \n [34] UCSC.utils_1.1.0        farver_2.1.2            jsonlite_1.8.9         \n [37] Formula_1.2-5           survival_3.7-0          systemfonts_1.1.0      \n [40] tools_4.4.1             treeio_1.29.2           ragg_1.3.3             \n [43] Rcpp_1.0.13             glue_1.8.0              gridExtra_2.3          \n [46] SparseArray_1.5.45      xfun_0.48               qvalue_2.37.0          \n [49] withr_3.0.2             fastmap_1.2.0           fansi_1.0.6            \n [52] SparseM_1.84-2          digest_0.6.37           timechange_0.3.0       \n [55] R6_2.5.1                gridGraphics_0.5-1      textshaping_0.4.0      \n [58] colorspace_2.1-1        GO.db_3.20.0            RSQLite_2.3.7          \n [61] R.methodsS3_1.8.2       utf8_1.2.4              generics_0.1.3         \n [64] ggsci_3.2.0             httr_1.4.7              htmlwidgets_1.6.4      \n [67] S4Arrays_1.5.11         pkgconfig_2.0.3         gtable_0.3.6           \n [70] blob_1.2.4              XVector_0.45.0          htmltools_0.5.8.1      \n [73] carData_3.0-5           fgsea_1.31.6            scales_1.3.0           \n [76] png_0.1-8               ggfun_0.1.7             rstudioapi_0.17.1      \n [79] tzdb_0.4.0              reshape2_1.4.4          nlme_3.1-166           \n [82] cachem_1.1.0            parallel_4.4.1          AnnotationDbi_1.67.0   \n [85] desc_1.4.3              pillar_1.9.0            grid_4.4.1             \n [88] vctrs_0.6.5             car_3.1-3               evaluate_1.0.1         \n [91] cli_3.6.3               locfit_1.5-9.10         compiler_4.4.1         \n [94] rlang_1.1.4             crayon_1.5.3            ggsignif_0.6.4         \n [97] labeling_0.4.3          plyr_1.8.9              fs_1.6.5               \n[100] stringi_1.8.4           BiocParallel_1.39.0     munsell_0.5.1          \n[103] Biostrings_2.73.2       lazyeval_0.2.2          GOSemSim_2.31.2        \n[106] quantreg_5.99           Matrix_1.7-1            hms_1.1.3              \n[109] patchwork_1.3.0         bit64_4.5.2             KEGGREST_1.45.1        \n[112] clipr_0.8.0             igraph_2.1.1            broom_1.0.7            \n[115] memoise_2.0.1           bslib_0.8.0             ggtree_3.13.2          \n[118] fastmatch_1.1-4         bit_4.5.0               ape_5.8                \n[121] gson_0.1.0              polynom_1.4-1"
  },
  {
    "objectID": "panthermus_dd.html",
    "href": "panthermus_dd.html",
    "title": "Thermus Pangenome",
    "section": "",
    "text": "We downloaded (May 27th, 2024) all the Phylum Deinococcota assemblies from Refseq database using the NCBI tool datasets (v.16.5.0) installed in Conda.\n\n\nShow the code\nconda activate ncbi_datasets\nconda update -c conda-forge ncbi-datasets-cli\ncd thermaceae/thermus_refseq\ndatasets download genome taxon Thermaceae --filename thermaceae_dataset.zip --exclude-atypical --assembly-source 'refseq'\n\n\nTo obtain an index of the genome files, we converted the dataset_catalog.json to CSV (https://www.convertcsv.com/json-to-csv.htm) to obtain the file fasta.csv.\nTo work with homogeneous and updated genome annotations, we subsequently re-annotated all genome assemblies with Bakta (from Conda, v. 1.9.2) using the full database (DDBB v. 5.1) and the options --skip-crispr --force.\n\n\nShow the code\ncd pangenomes/deinococcota/ncbi_dataset/data\nconda activate bakta\nconda update bakta\nbakta_db download --output /Volumes/Trastero4/ddbb --type full \n#database is in external HD\nwhile IFS=, read -r col1 col2 col3\n    do\n        bakta --db /Volumes/Trastero4/ddbb/bakta-db --verbose --output ../../../bakta_results/$col3 --prefix $col3 --locus-tag $col3 --threads 16 $col1\n    done &lt; &lt;(tail -n +2 fasta.csv)\n\n\nThe pangenomes were constructed with PPanGGOLIN (v. 2.0.5) installed in Conda. You can see the whole documentation about PPanGGOLIN and the output files here. In order to construct different pangenomes at species, genus, family and order levels, we parse the taxonomy from NCBI datasets using dataformat tool and then use a short R script (parse_taxonomy.R) to generate the annotated genomes table lists.\nAfter testing different alternative datasets and clustering combinations, we empirically set the MMSeqs clustering sequence identity and coverage parameters to 0.4 and 0.5, respectively.\n\n\nShow the code\n#STEP 2\n#Run ppanggolin and write extra output files\nconda activate bioconda\ncd pangenomes\nppanggolin workflow --anno deinococcota.gbff.list --basename deinococcota --identity 0.4 --coverage 0.5 -o deinococcota_i4c5 -c 16 -f\nppanggolin workflow --anno thermaceae.gbff.list --basename thermaceae --identity 0.4 --coverage 0.5 -o thermaceae_i4c5 -c 16 -f\nppanggolin workflow --anno thermus.gbff.list --basename thermus --identity 0.4 --coverage 0.5 -o thermus_i4c5 -c 16 -f\nppanggolin workflow --anno tt.gbff.list --basename tthermophilus --identity 0.4 --coverage 0.5 -o tt_i4c5 -c 16 -f\n\n\nAdditionally, before moving forward with the pangenome, as reference, we are going to incorporate the gene names from the Thermus thermophilus strain HB27, as annotated in the NCBI Refseq assembly (GCF_000008125.1)."
  },
  {
    "objectID": "panthermus_dd.html#correlation-between-tnseq-and-pangenome",
    "href": "panthermus_dd.html#correlation-between-tnseq-and-pangenome",
    "title": "Thermus Pangenome",
    "section": "Correlation between TnSeq and Pangenome",
    "text": "Correlation between TnSeq and Pangenome\nThere’s no overall correlation between the TnSeq group classification of the HB27 genes, with the number of conserved genes in each pangenome and the pangenome cluster.\n\n\nShow the code\n#recuento\n\nhigh &lt;- c()\nintermediate &lt;- c()\nless &lt;- c()\nfor (i in 1:4){\n  high[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\"  & panTnseq$cluster==\"Highly Permissive\" ))\n   intermediate[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\" & panTnseq$cluster==\"Intermediate\" ))\n   less[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\" & panTnseq$cluster==\"Less Permissive\" ))\n}\nstats &lt;- data.frame(high,intermediate,less)\nrow.names(stats) &lt;- names(pangenomes)\nstats &lt;- cbind(row.names(stats),stack(stats))\nnames(stats) &lt;- c(\"level\",\"ratio\",\"cluster\")\n#plot\nggplot(stats,aes(x=level, y=ratio,group=cluster)) + \n    geom_bar(aes(fill=cluster),stat = \"identity\",position=\"fill\",color=\"grey40\", alpha=0.8) + ylab(\"Pangenome Persistent Genes  (%)\")+ geom_text(aes(label=ratio),size=5, position = position_fill(vjust=0.5) , col = \"black\")+xlab(\"Pangenome level\") +scale_y_continuous(labels = scales::percent) +theme_bw()+ theme(axis.text.x = element_text(angle = 45,vjust=1,hjust=1),text=element_text(face=\"bold\"))+labs(fill=\"TnSeq gene group\")+scale_fill_manual(labels=c(\"Highly permissive\",\"Intermediate\",\"Less Permissive\"),values=c(\"#FF9966\", \"#619CFF\" ,\"#3366CC\")) \n\n\n\n\n\nFigure 24. Persistent (core) genes in each pangenome.\n\n\n\n\nShow the code\nggsave(\"figS5b.pdf\",width=5,height=5)\n\n\nNow, let’s see genes distribution in the different groups using Venn diagrams.\n\n\nShow the code\nx &lt;- list(\n  Intermediate = panTnseq_Full$Genes[panTnseq_Full$cluster==\"Intermediate\"], \n  Highly_permissive = panTnseq_Full$Genes[panTnseq_Full$cluster==\"Highly Permissive\"], \n  Less_permissive = panTnseq_Full$Genes[panTnseq_Full$cluster==\"Less Permissive\"], \n  Persistent = panTnseq_Full$Genes[panTnseq_Full$tt_i4c5==\"persistent\"]\n  )\n\nlibrary(ggvenn)\n\n\nLoading required package: grid\n\n\nShow the code\ntt &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Thermus thermophilus\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nx[[4]] &lt;- panTnseq_Full$Genes[panTnseq_Full$thermus_i4c5==\"persistent\"]\n\nthermus &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Thermus\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nx[[4]] &lt;- panTnseq_Full$Genes[panTnseq_Full$thermaceae_i4c5==\"persistent\"]\n\nthermaceae &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Thermaceae\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nx[[4]] &lt;- panTnseq_Full$Genes[panTnseq_Full$deinococcota_i4c5==\"persistent\"]\n\ndeinococcota &lt;- ggvenn(\n  x, \n  fill_color = c(\"#EFC000FF\",\"#0073C2FF\",\"cornflowerblue\", \"#CD534CFF\"),\n  stroke_size = 0.5, set_name_size = 4\n  ) + ggtitle(\"Deinococcota\") + theme(plot.title = element_text(hjust = 0.5))+\n   scale_x_continuous(expand = expansion(mult = c(0.15, 0.15)))\n\nggarrange(tt, thermus, thermaceae, deinococcota, \n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 25. Venn diagram of TnSeq genes categories and Persistant genes in each pangenome).\n\n\n\n\nVenn Diagrams\n\n\nShow the code\ncolorscale &lt;- c(\"white\",\"aquamarine\",\"aquamarine1\",\"aquamarine2\",\"aquamarine3\",\"aquamarine4\")\ncolorines &lt;- c(\"cloud\"=\"#bbe59f\",\"shell\"=\"#abc837\",\"persistent\"=\"#339933\",\"Highly permissive\"=\"#FF9966\",\"Intermediate\"=\"#619CFF\" ,\"Less permissive\"= \"#3366CC\")\npanTnseq_Full[18:21] &lt;- lapply(panTnseq_Full[18:21],factor, levels=c(\"cloud\",\"shell\",\"persistent\"))\nlibrary(ggVennDiagram)\n\n\n\nAttaching package: 'ggVennDiagram'\n\n\nThe following object is masked from 'package:tidyr':\n\n    unite\n\n\nShow the code\n#t thermophilus\nTnlist &lt;- append(unstack(panTnseq_Full[,c(1,18)]),unstack(panTnseq_Full[,c(1,11)]))\nv1 &lt;- ggVennDiagram(Tnlist,set_color=colorines,label=\"count\",label_alpha=0,show_intersect = FALSE) +\n    scale_fill_gradientn(colours=colorscale)\nu1 &lt;- ggVennDiagram(Tnlist,force_upset = TRUE,order.set.by = \"none\", order.intersect.by = \"none\")\n#thermus\nTnlist &lt;- append(unstack(panTnseq_Full[,c(1,19)]),unstack(panTnseq_Full[,c(1,11)]))\nv2 &lt;- ggVennDiagram(Tnlist,set_color=colorines,label=\"count\",label_alpha=0,show_intersect = FALSE)+\n         scale_fill_gradientn(colours=colorscale)\nu2 &lt;- ggVennDiagram(Tnlist,force_upset = TRUE,order.set.by = \"none\", order.intersect.by = \"none\")\n#thermaceae\nTnlist &lt;- append(unstack(panTnseq_Full[,c(1,20)]),unstack(panTnseq_Full[,c(1,11)]))\nv3 &lt;- ggVennDiagram(Tnlist,set_color=colorines,label=\"count\",label_alpha=0,show_intersect = FALSE)+\n         scale_fill_gradientn(colours=colorscale)\nu3 &lt;- ggVennDiagram(Tnlist,force_upset = TRUE,order.set.by = \"none\", order.intersect.by = \"none\")\n#deino\nTnlist &lt;- append(unstack(panTnseq_Full[,c(1,21)]),unstack(panTnseq_Full[,c(1,11)]))\nv4 &lt;- ggVennDiagram(Tnlist,set_color=colorines,label=\"count\",label_alpha=0,show_intersect = FALSE)+\n         scale_fill_gradientn(colours=colorscale)\nu4 &lt;- ggVennDiagram(Tnlist,force_upset = TRUE,order.set.by = \"none\", order.intersect.by = \"none\")\n\n#ggarrange(u1+labs(title=expression(italic(\"T. thermophilus\"))), v2+labs(title=expression(italic(\"Thermus\"))), v3+labs(title=expression(italic(\"Thermaceae\"))), v4+labs(title=expression(italic(\"Deinococcaceae\"))), ncol=2,nrow=2,common.legend=TRUE,legend = \"bottom\")\npaste(\"T. thermophilus\")\n\n\n[1] \"T. thermophilus\"\n\n\nShow the code\nu1\n\n\n\n\n\n\n\n\n\nShow the code\npaste(\"Thermus\")\n\n\n[1] \"Thermus\"\n\n\nShow the code\nu2\n\n\n\n\n\n\n\n\n\nShow the code\npaste(\"Thermaceae\")\n\n\n[1] \"Thermaceae\"\n\n\nShow the code\nu3\n\n\n\n\n\n\n\n\n\nShow the code\npaste(\"Deinococcota\")\n\n\n[1] \"Deinococcota\"\n\n\nShow the code\nu4\n\n\n\n\n\n\n\n\n\nNow, let’s try Euler diagrams.\n\n\nShow the code\n#svg(\"figure4c.svg\")\npar(mfrow = c(2, 2),mar=c(1,1,1,1))\n\n#thermus termophilus\nTnmat &lt;- rbind(as.data.frame(as.list(panTnseq_Full[,c(1,11)]),col.names=c(\"Genes\",\"group\")),\n               as.data.frame(as.list(panTnseq_Full[,c(1,18)]),col.names=c(\"Genes\",\"group\")))\nplot(venneuler(na.omit(Tnmat)),col=c(\"#FF9966\",\"#619CFF\" , \"#3366CC\",\"#bbe59f\",\"#abc837\",\"#339933\"),alpha=0.7,main=expression(italic(\"T. thermophilus\")))\n\n#thermus\nTnmat &lt;- rbind(as.data.frame(as.list(panTnseq_Full[,c(1,11)]),col.names=c(\"Genes\",\"group\")),\n               as.data.frame(as.list(panTnseq_Full[,c(1,19)]),col.names=c(\"Genes\",\"group\")))\nplot(venneuler(na.omit(Tnmat)),col=c(\"#FF9966\",\"#619CFF\" , \"#3366CC\",\"#bbe59f\",\"#abc837\",\"#339933\"),alpha=0.7,main=expression(italic(\"Thermus\")))\n\n#termaceae\nTnmat &lt;- rbind(as.data.frame(as.list(panTnseq_Full[,c(1,11)]),col.names=c(\"Genes\",\"group\")),\n               as.data.frame(as.list(panTnseq_Full[,c(1,20)]),col.names=c(\"Genes\",\"group\")))\nplot(venneuler(na.omit(Tnmat)),col=c(\"#FF9966\",\"#619CFF\" , \"#3366CC\",\"#bbe59f\",\"#abc837\",\"#339933\"),alpha=0.7,main=expression(italic(\"Thermaceae\")))\n\n#deinococcota\nTnmat &lt;- rbind(as.data.frame(as.list(panTnseq_Full[,c(1,11)]),col.names=c(\"Genes\",\"group\")),\n               as.data.frame(as.list(panTnseq_Full[,c(1,20)]),col.names=c(\"Genes\",\"group\")))\nplot(venneuler(na.omit(Tnmat)),col=c(\"#FF9966\",\"#619CFF\" , \"#3366CC\",\"#bbe59f\",\"#abc837\",\"#339933\"),alpha=0.7,main=expression(italic(\"Deinococcota\")))\n\n\n\n\n\nFigure 26. Venn diagram of TnSeq genes categories and Persistant genes in each pangenome).\n\n\n\n\nShow the code\ndev.off()\n\n\nnull device \n          1"
  },
  {
    "objectID": "panthermus_dd.html#enrichment-analysis",
    "href": "panthermus_dd.html#enrichment-analysis",
    "title": "Thermus Pangenome",
    "section": "Enrichment analysis",
    "text": "Enrichment analysis\n\n\nShow the code\nkk &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly Permissive\"  & panTnseq_Full$thermaceae_i4c5==\"persistent\",1]),\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/tth/pathway\"...\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/tth\"...\n\n\nShow the code\np1 &lt;- dotplot(kk, title=\"Thermaceae core genome\")\n\nkk_D &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly Permissive\"  & panTnseq_Full$deinococcota_i4c5==\"persistent\",1]),\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\np2 &lt;- dotplot(kk_D, title=\"Deinococcota core genome\")\n\nggarrange(p1, p2, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2, heights=c(1,1))\n\n\n\n\n\nFigure 27. Significantly enriched KEGG Ontology groups made up of Intermediate/Less permissive genes within the Core genome (persistant genes) of Thermaceae (A) or Deinococcota (B).\n\n\n\n\n\n\nShow the code\nuniprot &lt;- bitr_kegg(panTnseq_Full$Genes, fromType=\"kegg\", toType='uniprot', organism='tth')\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/conv/uniprot/tth\"...\n\n\nShow the code\npanTnseq_Full &lt;- panTnseq_Full %&gt;%\n  mutate(uni = replace(Genes, Genes %in% uniprot$kegg, uniprot$uniprot))\n\nkk &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly Permissive\"  & panTnseq_Full$thermus_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/conv/uniprot/tth\"...\n\n\nShow the code\nif (is.null(kk)){\n  p1 &lt;- NULL\n} else {\n  if (any(kk@result$p.adjust&lt;0.05)){\n  p1 &lt;- dotplot(kk, title=\"Thermus core genome\")\n  } else {\n    p1 &lt;- NULL\n  }\n}\n\nkk_t &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly Permissive\"  & panTnseq_Full$thermaceae_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\nif (is.null(kk_t)){\n  p2 &lt;- NULL\n} else {\n  if (any(kk@result$p.adjust&lt;0.05)){\n  p2 &lt;- dotplot(kk_t, title=\"Thermaceae core genome\")\n  } else {\n    p2 &lt;- NULL\n  }\n}\n\nkk_D &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly Permissive\"  & panTnseq_Full$deinococcota_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\nif (is.null(kk_D)){\n  p3 &lt;- NULL\n} else {\n  if (any(kk@result$p.adjust&lt;0.05)){\n  p3 &lt;- dotplot(kk_D, title=\"Deinococcota core genome\")\n  } else {\n    p3 &lt;- NULL\n  }\n}\n\nggarrange(p1, p2, p3,\n          labels = c(\"A\", \"B\", \"C\"), ncol=1,nrow = 3,heights=c(2,3,3))\n\n\n\n\n\nFigure 28. Significantly enriched KEGG Ontology groups made up of Intermediate/Less permissive genes within the Core genome (persistant genes) of Thermus (A), Thermaceae (B) or Deinococcota (C)."
  },
  {
    "objectID": "reads_dd_processing.html#footnotes",
    "href": "reads_dd_processing.html#footnotes",
    "title": "TnSeq Illumina Data Processing",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor Tn insertions purposes, we merged the TT_C0145 and TT_C0146 genes, based on (unpublished) evidence from Mencía lab.↩︎"
  },
  {
    "objectID": "panthermus_dd.html#data-from-zhang2018",
    "href": "panthermus_dd.html#data-from-zhang2018",
    "title": "Thermus Pangenome",
    "section": "Data from Zhang2018",
    "text": "Data from Zhang2018\nSince there is no clear correlation between gene conservation and the permittivity of Tn5 insertions, we decided to compare our results with previously published results. We used the data from Zhang et al. (2018) (SUPPLEMENTARY DATA 4), which includes the essential/non-essential genes of a wide range of prokaryotic organisms comprising extremophilic archaea (Sulfolobus islandicus and Methanococcus maripaludis) and various mesophilic bacteria (Bacillus subtilis, Bacteroides fragilis, Escherichia coli) as well as the minimal essential genome of Micoplasma JVCI Syn3.0.\nThe following table contains the essential genes in all prokaryotic genomes and their HB27 orthologs as annotated by eggNOG. As you can see, out of 52 genes annotated as essentia in all thouse prokaryotic organisms, 6 were Highly Permissive and 40 (80%) Intermediate in HB27 TnSeq, but they are again highly conserved as all of them are persistent genes in the T. thermophilus pangenome and near 95% are still members of the core genome of Deinococcota pangenome.\n\n\nShow the code\n#data from https://www.nature.com/articles/s41467-018-07379-4\nessentiality &lt;- read_xlsx(\"bacteria_essential_genes/41467_2018_7379_MOESM6_ESM.xlsx\",sheet=1)\ncolnames(essentiality)[2] &lt;- \"eggNOG_OGs\"\nworld_essential &lt;- merge(panTnseq_Full,essentiality,by=\"eggNOG_OGs\")\n#names(world_essential)\n prok &lt;- subset(world_essential,world_essential[,35]==\"essential\" & world_essential[,36]==\"essential\" & world_essential[,39]==\"essential\" & world_essential[,40]==\"essential\" & world_essential[,41]==\"essential\" & world_essential[,42]==\"essential\")\n \ndatatable(prok[,c(1,2,11,18:21)],rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\n\n\n\n\nShow the code\n#table to save\n#kbl(prok[,c(1,22,23,30:33)], align = \"c\", row.names = FALSE,col.names= c(\"eggNOG\",\"Description\",\"TnSeq\",\"T. thermophilus\",\"Thermus\",\"Thermaceae\",\"Deinococcota\"), caption = \"Table 2. Tth TnSeq and Pangenome analysis of selected prokaryotic essential genes from diverse previous works. See Methods for details.\") %&gt;%\n #   kable_styling(bootstrap_options = \"condensed\", full_width = F, position = \"center\") %&gt;%\n  #  column_spec(1, bold = T, italic=F) %&gt;% save_kable(\"table2.pdf\",self_contained=TRUE)"
  },
  {
    "objectID": "panthermus_dd.html#based-on-rancati-et-al.-pmid-29033457-supp.-table-s1",
    "href": "panthermus_dd.html#based-on-rancati-et-al.-pmid-29033457-supp.-table-s1",
    "title": "Thermus Pangenome",
    "section": "Based on Rancati et al. (PMID 29033457, Supp. Table S1)",
    "text": "Based on Rancati et al. (PMID 29033457, Supp. Table S1)\nWe also downloaded the data from the papers indicated below and parsed the essential genes. To unify nomenclature, we tried to obtain the EggNOG COG code for each gene and used it to merge genes with different names across the different species. All data was parsed with an external R script to generate a common table (all_essentials.csv).\n\n\n\nStrain\nRef. PMID\nAssembly\nFileName\n\n\n\n\nE. coli K12\n29463657\nGCF_000800765.1\nmbo001183726st1.xlsx\n\n\nM. tuberculosis H37Rv\n28096490\nGCF_000195955.2\nmbo002173137st3.xlsx\n\n\nM. genitalum G37\n16407165\nGCA_000027325.1\npnas_0510013103_10013Table2.xls\n\n\nP. aerugionsa PAO1\n25848053\nGCF_000006765.1\npnas.1422186112.sd01.xlsx\n\n\nS. aureus HG003\n25888466\nGCF_000013425.1\n12864_2015_1361_MOESM2_ESM.xlsx\n\n\nS. pyogenes (5448 & NZ131)\n25996237\nGCA_000011765.2\nsrep09838-s1.pdf (Table S3!)\n\n\nSynechococcus elongatus PCC 7942\n26508635\nGCF_000012525.1\npnas.1519220112.sd03.xlsx\n\n\n\nFirst, we evaluate the correlation between the essential/indispensable genes with our HB27 TnSeq and pangenome data. As shown below, despite the fact that the bacterial data come from different sources, we see some negative correlation between the number of genomes with essential and dispensable genes. In addition, there is also a moderate positive correlation between gene essentiality and conservation in our pangenome. However, consistent with previous results, the TnSeq results do not correlate with other analyses, suggesting that T. thermophilus is reluctant to reveal its essential genes.\n\n\nShow the code\n#data from https://www.nature.com/articles/s41467-018-07379-4\n\nessential_mix &lt;- read.csv2(\"bacteria_essential_genes/all_essentials.csv\")\nworld_essential &lt;- merge(world_essential,essential_mix,by=\"eggNOG_OGs\")\nfwrite(world_essential,\"bacteria_essential_genes/all_essentials_panTnseq_18nov.csv\", sep=\";\")\n\n\n#correlations\nworld_essential$TnSeq &lt;- as.numeric(factor(world_essential$cluster, levels=c(\"Less Permissive\",\"Intermediate\",\"Highly Permissive\")))\nworld_essential[,c(35:53)] &lt;- lapply(world_essential[,c(35:53)], as.factor)\nworld_essential[,c(12,13,14,15,18,19,20,21,35:53)] &lt;- lapply(world_essential[,c(12,13,14,15,18,19,20,21,35:53)], as.numeric)\nM &lt;-cor(world_essential[,c(12,13,14,15,18,19,20,21,53,54)], method = \"spearman\", use = \"pairwise.complete.obs\")\ntestRes &lt;-  cor.mtest(world_essential[,c(12,13,14,15,18,19,20,21,53,54)], conf.level = 0.99,method = \"spearman\", na.action=\"omit\")\ncorrplot(M, type=\"lower\", p.mat=testRes$p, method = 'circle', insig='blank',\n         tl.col=\"black\",tl.srt = 45, addCoef.col ='black', number.cex = 0.6,tl.cex=0.5, col=brewer.pal(n=8, name=\"Spectral\"))\n\n\n\n\n\nFigure 29. Correlation between esentiality results in diverse bacteria, the HB27 TnSeq and Pangenome variables. Significant (p&lt;0.05) spearman r² are shown.\n\n\n\n\nShow the code\n#table\n#datatable(world_essential[,c(16,28,11,12,21,29:32)],rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\nThe detailed table of bacteria essential genes and HB27 TnSeq+Pangenome data can be found in file all_essentials_panTnseq.csv.\nThis can be also easily shown if we plot the number of genomes with essential genes by the TnSeq group of those genes.\n\n\nShow the code\nggplot(as.data.frame(table(world_essential$essential,world_essential$cluster)),aes(x=Var1, y=Freq,group=Var2)) + \n         geom_bar(aes(fill=Var2),stat = \"identity\",position=\"fill\",color=\"grey40\", alpha=0.8) +  geom_text(aes(label=Freq),size=4, position = position_fill(vjust=0.5) , col = \"black\")+ xlab(\"Number genomes with each essential gene\") + ylab(\"TnSeq group (%)\") +scale_y_continuous(labels = scales::percent) + theme_bw()+ labs(fill = \"TnSeq group\")\n\n\n\n\n\nFigure 30. Ratio (%) of genes in each TnSeq group by the number of genomes with essential genes. The number of genes in each group is indicated\n\n\n\n\n\nClick for Session Information\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggVennDiagram_1.5.2    ggvenn_0.1.10          venneuler_1.1-4       \n [4] rJava_1.0-11           readxl_1.4.3           ggpubr_0.6.0          \n [7] clusterProfiler_4.13.4 RColorBrewer_1.1-3     corrplot_0.95         \n[10] ggstats_0.7.0          patchwork_1.3.0        lubridate_1.9.3       \n[13] forcats_1.0.0          stringr_1.5.1          purrr_1.0.2           \n[16] readr_2.1.5            tidyr_1.3.1            tibble_3.2.1          \n[19] tidyverse_2.0.0        dplyr_1.1.4            DT_0.33               \n[22] data.table_1.16.2      ggplot2_3.5.1          formatR_1.14          \n[25] knitr_1.48            \n\nloaded via a namespace (and not attached):\n  [1] rstudioapi_0.17.1       jsonlite_1.8.9          magrittr_2.0.3         \n  [4] ggtangle_0.0.3          farver_2.1.2            rmarkdown_2.28         \n  [7] ragg_1.3.3              fs_1.6.5                zlibbioc_1.51.2        \n [10] vctrs_0.6.5             memoise_2.0.1           ggtree_3.13.2          \n [13] rstatix_0.7.2           htmltools_0.5.8.1       broom_1.0.7            \n [16] cellranger_1.1.0        Formula_1.2-5           gridGraphics_0.5-1     \n [19] sass_0.4.9              bslib_0.8.0             htmlwidgets_1.6.4      \n [22] plyr_1.8.9              cachem_1.1.0            igraph_2.1.1           \n [25] lifecycle_1.0.4         pkgconfig_2.0.3         fuzzyjoin_0.1.6        \n [28] Matrix_1.7-1            R6_2.5.1                fastmap_1.2.0          \n [31] gson_0.1.0              GenomeInfoDbData_1.2.13 digest_0.6.37          \n [34] aplot_0.2.3             enrichplot_1.25.5       colorspace_2.1-1       \n [37] AnnotationDbi_1.67.0    S4Vectors_0.43.2        crosstalk_1.2.1        \n [40] textshaping_0.4.0       RSQLite_2.3.7           labeling_0.4.3         \n [43] fansi_1.0.6             timechange_0.3.0        httr_1.4.7             \n [46] abind_1.4-8             compiler_4.4.1          bit64_4.5.2            \n [49] withr_3.0.2             backports_1.5.0         BiocParallel_1.39.0    \n [52] carData_3.0-5           DBI_1.2.3               R.utils_2.12.3         \n [55] ggsignif_0.6.4          tools_4.4.1             ape_5.8                \n [58] R.oo_1.26.0             glue_1.8.0              nlme_3.1-166           \n [61] GOSemSim_2.31.2         reshape2_1.4.4          fgsea_1.31.6           \n [64] generics_0.1.3          gtable_0.3.6            tzdb_0.4.0             \n [67] R.methodsS3_1.8.2       hms_1.1.3               car_3.1-3              \n [70] utf8_1.2.4              XVector_0.45.0          BiocGenerics_0.51.3    \n [73] ggrepel_0.9.6           pillar_1.9.0            yulab.utils_0.1.7      \n [76] vroom_1.6.5             splines_4.4.1           treeio_1.29.2          \n [79] lattice_0.22-6          bit_4.5.0               tidyselect_1.2.1       \n [82] GO.db_3.20.0            Biostrings_2.73.2       IRanges_2.39.2         \n [85] stats4_4.4.1            xfun_0.48               Biobase_2.65.1         \n [88] stringi_1.8.4           UCSC.utils_1.1.0        lazyeval_0.2.2         \n [91] ggfun_0.1.7             yaml_2.3.10             evaluate_1.0.1         \n [94] codetools_0.2-20        qvalue_2.37.0           ggplotify_0.1.2        \n [97] cli_3.6.3               systemfonts_1.1.0       jquerylib_0.1.4        \n[100] munsell_0.5.1           Rcpp_1.0.13             GenomeInfoDb_1.41.2    \n[103] png_0.1-8               parallel_4.4.1          blob_1.2.4             \n[106] DOSE_3.99.1             tidytree_0.4.6          scales_1.3.0           \n[109] writexl_1.5.1           crayon_1.5.3            rlang_1.1.4            \n[112] cowplot_1.1.3           fastmatch_1.1-4         KEGGREST_1.45.1"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thermus thermophilus TnSeq",
    "section": "",
    "text": "This site contains the data, scripts and results of a TnSeq experiment performed in Thermus thermophilus HB27 in the laboratory of Mario Mencía & José Berenguer (CBMSO, UAM-CSIC). This analysis was performed by Modesto Redrejo Rodríguez (Biochemistry Department, UAM).\nIn this study we develop a procedure for thermostable selection of random insertion mutants based on a gene cassette encoding a thermostable resistance to kanamycin flanked by the recognition sites (ME sites) for Tn5 transposase Kia et al. (2017). The transposition library generated in vitro was initialy transformed in a PrimPol mutant Hb27 dericative (ppol), which shows 2-3 log fold transformation efficiency García-Quintans et al. (2020). This allowed the generation of the generation of a large library of insertion mutants (“Mother”), which was later transferred to a wild type HB27 strain (“Daughter”). Both libraries were sequenced straightforward and after several culture passages."
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "Thermus thermophilus TnSeq",
    "section": "",
    "text": "This site contains the data, scripts and results of a TnSeq experiment performed in Thermus thermophilus HB27 in the laboratory of Mario Mencía & José Berenguer (CBMSO, UAM-CSIC). This analysis was performed by Modesto Redrejo Rodríguez (Biochemistry Department, UAM).\nIn this study we develop a procedure for thermostable selection of random insertion mutants based on a gene cassette encoding a thermostable resistance to kanamycin flanked by the recognition sites (ME sites) for Tn5 transposase Kia et al. (2017). The transposition library generated in vitro was initialy transformed in a PrimPol mutant Hb27 dericative (ppol), which shows 2-3 log fold transformation efficiency García-Quintans et al. (2020). This allowed the generation of the generation of a large library of insertion mutants (“Mother”), which was later transferred to a wild type HB27 strain (“Daughter”). Both libraries were sequenced straightforward and after several culture passages."
  },
  {
    "objectID": "index.html#funding",
    "href": "index.html#funding",
    "title": "Thermus thermophilus TnSeq",
    "section": "Funding",
    "text": "Funding\nThis work was supported by grant number PID2019-109073RB-I00 from the Spanish Research Agency (AEI, Spanish Ministry of Science and Innovation).\nMRR lab is funded by grant PID2021-123403NB-I00 from the Spanish Research Agency (AEI, Spanish Ministry of Science and Innovation (MCIN/AEI/10.13039/501100011033/FEDER, A way to make Europe)."
  },
  {
    "objectID": "reads_dd_processing.html#gene-insertions",
    "href": "reads_dd_processing.html#gene-insertions",
    "title": "TnSeq Illumina Data Processing",
    "section": "Gene insertions",
    "text": "Gene insertions\n\nIntegration events counts per gene and Z-score\nNow we are going to transform the mapped reads into hits per gene, to obtain a normalized insertion score, by the following steps:\n\nWe only consider insertions within the 10-90% interval of each gene, because insertions landing in the flanking sections of genes might give rise to truncated of chimeric proteins partially functional. The counts of Tn insertions will be obtained from the read mapping coordinates, considering the alignment start and the strand, after conversion of the BAM file to a tabulated format (BED).\nWe will normalize by the total number of mapped reads within the coding regions (80% central).\nWe will obtain a ratio of observed to expected Tn insertions.\nWe will make a log2-transformation in pseudocounts ($log_2(x+1)$) to avoid negative scores.\nFinally, we will scale the data to favor sample comparison, using the R function scale() to obtain a final Z-score.\n\nThus, our score will be obtained with the following formula:\n\\[\nScore = log_2 \\left( \\frac{count}{\\text{sample mapped reads} * \\frac{\\text{gen length} }{\\text{genome length}}} +1 \\right)\n\\]\nAnd the final Z-score will be:\n\\[\n\\textbf{Z}{-}\\textbf{Score} =  \\frac{Score - mean(Score)}{SD(Score)}\n\\]\nIn the following plots you can see the distribution of Z-scores between samples.\n\n\nShow the code\ncd ~/data/TnSeq_thermus\nbedtools bamtobed -i 01_bowtie2/mapping_TNB03_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB03_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB01_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB01_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB07_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB07_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB09_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB09_dd_sorted.bed\n\n\n\n\nShow the code\n#gene table formatted with 80% central gene\nHB27_genome &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\nHB27_genome$Chr &lt;- \"AE017221.1\"\nHB27_genome$Chr[8088:nrow(coding)] &lt;- \"AE017222.1\"\nHB27_genome$V9 &lt;-  substr(HB27_genome$V9,9,16)\n\n#correct TT_C0145 coordinates and remove TT_C0146\nHB27_genome$stop[HB27_genome$Genes==\"TT_C0145\" & HB27_genome$V3==\"gene\"] &lt;- HB27_genome$stop[HB27_genome$Genes==\"TT_C0146\" & HB27_genome$V3==\"gene\"]\nHB27_genome[-as.numeric(rownames(HB27_genome[HB27_genome$Genes==\"TT_C0146\",])),]\n\n\n [1] V1  V2  V3  V4  V5  V6  V7  V8  V9  Chr\n&lt;0 rows&gt; (or 0-length row.names)\n\n\nShow the code\n#select \"gene\" feature for mapping\nHB27_genome80 &lt;- HB27_genome[HB27_genome$V3==\"gene\",]\n\n#subset the 10-90% gene interval and reshape table\nHB27_genome80 &lt;- data.frame(HB27_genome80[,c(9,1,4,5,7)])\ncolnames(HB27_genome80) &lt;- c(\"GeneID\",\"Chr\",\"Start\",\"End\",\"Strand\")\nHB27_genome80$Start &lt;- HB27_genome80$Start + (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80$End &lt;- HB27_genome80$End - (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80 &lt;- HB27_genome80[,c(1,2,5,3,4)]\n\n#load BED files\nsamples &lt;- c(\"HB27\"=\"TNB03\", \"HB27_rep\"=\"TNB07\",\"ppol\"=\"TNB01\", \"ppol_rep\"=\"TNB09\")\n\ndata &lt;- list()\ninsertion_table &lt;- list()\nscores_table &lt;- list()\n#prepare HB27_genome80 for foverlaps()\nnames(HB27_genome80) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"start\",\"end\") \nHB27_genome80 &lt;- as.data.table(HB27_genome80)\nsetkey(HB27_genome80, start, end) #keyed\n\n#match read mapping start with genes coordinates to obtain insertion sites per gene\nfor (i in 1:4){\n  data[[i]] &lt;- fread(input = paste0(\"01_bowtie2/mapping_\",samples[i],\"_dd_sorted.bed\"))\n  #filter by alignment quality\n  data[[i]] &lt;- data[[i]][data[[i]]$V5 &gt; 5]\n    data[[i]] &lt;- data[[i]][,c(1,6,2,3)]\n    names(data[[i]]) &lt;- c(\"Mapped_Chr\",\"Strand\",\"start\",\"end\")\n    insertion_table[[i]] &lt;- foverlaps(as.data.table(data[[i]]),HB27_genome80,type=\"within\",nomatch = NULL,mult=\"all\")\n    insertion_table[[i]] &lt;- subset(insertion_table[[i]], Chr==Mapped_Chr)\n    insertion_table[[i]] &lt;- insertion_table[[i]][,-9]\n    scores_table[[i]] &lt;- as.data.frame(table(insertion_table[[i]]$Gene))\n    names(scores_table[[i]]) &lt;- c(\"Gene\",\"Counts\")\n    scores_table[[i]] &lt;- merge(as.data.frame(HB27_genome80),scores_table[[i]])\n    scores_table[[i]]$score &lt;- log2((scores_table[[i]]$Counts / (nrow(insertion_table[[i]])* (scores_table[[i]]$end-scores_table[[i]]$start)/2127482)) +1 )\n  }\n\ntnseq &lt;- merge(scores_table[[1]],scores_table[[2]][,c(1,6,7)], by=\"Gene\")\nnames(tnseq) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"Start80\",\"End80\",\"Counts_HB27\",\"Score_HB27\",\"Counts_HB27_rep\",\"Score_HB27_rep\")\ntnseq &lt;- merge(tnseq,scores_table[[3]][,c(1,6,7)], by=\"Gene\")\n\ntnseq &lt;- merge(tnseq,scores_table[[4]][,c(1,6,7)], by=\"Gene\")\nnames(tnseq) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"Start80\",\"End80\",\"Counts_HB27\",\"Z-score_HB27\",\"Counts_HB27_rep\",\"Z-score_HB27_rep\",\"Counts_ppol\",\"Z-score_ppol\",\"Counts_ppol_rep\",\"Z-score_ppol_rep\")\n#write.table(tnseq,\"tnseq_dd_counts_scores.csv\",quote=FALSE,sep=\";\",row.names = FALSE)\nscores &lt;- as.data.frame(scale(tnseq[,c(7,9,11,13)]))\nrow.names(scores) &lt;- tnseq$Gene\n#write.table(scores,\"scores80_dd.csv\",row.names = TRUE,sep=\";\")\n\n\n#calculate 10-90% quantile\nq &lt;- data.frame(\n  ind = c(\"Score_HB27\",\"Score_HB27_rep\",\"Score_ppol\",\"Score_ppol_rep\"),\n  values= c(quantile(scores[,1],0.1, na.rm=TRUE),\n            quantile(scores[,2], 0.1, na.rm=TRUE), \n            quantile(scores[,3],0.1, na.rm=TRUE),\n            quantile(scores[,4], 0.1, na.rm=TRUE),\n            quantile(scores[,1],0.9, na.rm=TRUE),\n            quantile(scores[,2], 0.9, na.rm=TRUE), \n            quantile(scores[,3],0.9, na.rm=TRUE),\n            quantile(scores[,4], 0.9, na.rm=TRUE)\n            ))\n#plot distribution\nbox &lt;- ggplot(stack(scores), aes(x=ind, y=values)) + xlab(\"\") + \n  ylab(\"Score\")+\n  geom_boxplot(outlier.shape=8,outlier.size=3,aes(color=ind,fill=ind,alpha=0.8),\n               linewidth = 1)+theme_linedraw()+geom_jitter(alpha=0.1,aes(color=ind)) +\n # geom_point(data=q,aes(x=ind,y=values,fill=ind),shape=23,size=4) +\n  theme(axis.text.x = element_text(face=\"bold\", vjust=1))+\n  theme(legend.position = \"none\") + scale_color_brewer(palette=\"Paired\")+\n  scale_fill_brewer(palette=\"Paired\")\n\n#correlation\nwt &lt;- ggplot(data = scores, aes(x=`Z-score_HB27`,y=`Z-score_HB27_rep`))+geom_point(size=3,alpha=0.6, color=\"#1F78B4\") +  theme_linedraw() + ylim(-2,7) +\n  xlab(\"HB27\") + ylab(\"HB27_rep\") + stat_poly_line(color=\"#1F78B4\",fill=\"#1F78B4\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nppol &lt;- ggplot(data = scores, aes(x=`Z-score_ppol`,y=`Z-score_ppol_rep`))+geom_point(size=3,alpha=0.6, color=\"#33A02C\")  + theme_linedraw() + ylim(-2,7) +\n  xlab(\"ppol\") + ylab(\"ppol_rep\") +  stat_poly_line(color=\"#33A02C\",fill=\"#33A02C\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\nggarrange(box, wt, ppol,\n          labels = c(\"A\", \"B\",\"C\"), ncol=1\n         )\n\n\n\n\n\nFigure 6. Tn insertion Z-scores per gene. (A) Boxplot of gene Z-scores per sample. (B) Correlation of scores per gene and sample.\n\n\n\n\nAs we can see, the correlation between both PPOL samples is only moderate, in agreement with a clear difference in the original sample. This can be also seen in the PCA plot below, in which the Ppol_rep (TNB09) sample contains around 20% variability.\n\n\nShow the code\ntnseq.pca &lt;- prcomp(tnseq[,c(11,13,7,9)], \n                   center = TRUE, \n                   scale = TRUE) \nfviz_pca_biplot(tnseq.pca,col.var=rownames(tnseq.pca[[2]]),col.ind=\"grey90\", label=\"var\",labelsize=5,labelface=\"bold\")+ylim(-4,4)+xlim(-2.5,9)+scale_color_brewer(palette=\"Paired\")+theme_pubclean()+theme(legend.position=\"none\")\n\n\n\n\n\nFigure 7. Samples PCA plot.\n\n\n\n\n\n\n\n\n\n\nShould we rule out the ppol mother sample?\n\n\n\nThis sample contains 20% of the total data variance. Therefore, it will hinder the analysis of gene essentially and probably lead to false negative results. However, we decided to keep it as its inherent divergence will also strengthen our results.\n\n\nIn order to analyze in detail the difference between samples, we construct also an interactive plot. Put your mouse pointer over any point and you will see the Z-score and the Gene.\n\n\nShow the code\nscores$mean &lt;- apply(scores, 1, mean)\nkk &lt;- cbind(tnseq$Gene,scores$mean,stack(scores))\ndis &lt;- ggplot(data=kk) +\n  geom_point(aes(x=reorder(`tnseq$Gene`,`scores$mean`,decreasing=TRUE),y=values,color=ind), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\nggplotly(dis)\n\n\n\n\nFigure 8. Comparison of Tn insertion Z-scores per gene. Values were sorted by the average of all samples.\n\n\n\n\nSummary stats\nIn the following table you can find a summary of the main insertion stats.\n\n\nShow the code\nkk &lt;- cbind(insertion_table[[1]], \"HB27\")\nkk &lt;- rbind(kk,cbind(insertion_table[[2]], \"HB27_rep\"))\nkk &lt;- rbind(kk,cbind(insertion_table[[3]], \"ppol\"))\nkk &lt;- rbind(kk,cbind(insertion_table[[4]], \"ppol_rep\"))\n#unique insertions per sample and per strand\nunique_insertions &lt;- aggregate(data=kk, i.start ~ Strand+V2, function(x) length(unique(x)))\n#unique insertions total per sample\nunique_insertions &lt;- aggregate(unique_insertions,unique_insertions$i.start~unique_insertions$V2,sum)\n#all\nresumen &lt;- cbind(fastp[,c(1,4)],as.vector(table(kk$V2)),unique_insertions[,2])\n#normalized & ratio\nresumen$normalized &lt;- resumen[,4]/resumen[,2]\nresumen[,2] &lt;- resumen[,2] * 1000000\nresumen$ratio &lt;- paste(as.character(round(resumen[,4]*100/resumen[,3],1)),\"%\")\nresumen[5,] &lt;- c(\"Mean\",apply(resumen[,2:5],2,mean),paste(as.character(round(mean(resumen[,4]*100/resumen[,3]),1)),\"%\"))\nresumen[,2] &lt;- as.numeric(resumen[,2])\nresumen[,3] &lt;- as.numeric(resumen[,3])\nresumen[,4] &lt;- as.numeric(resumen[,4])\nresumen[,5] &lt;- as.numeric(resumen[,5])\n\nas.data.frame(format(resumen[c(1,3,2,4,5),c(1:4,6,5)], scientific = TRUE, digits = 3)) %&gt;% \nkbl(align = \"c\", row.names = FALSE,col.names= c(\"Sample\",\"Filtered Reads\",\"Insertions 80% ORF\",\"Unique insertions 80% ORF\",\"Ratio unique\",\"Normalized Unique insertions per M Reads\"), caption = \"Table 3. Summary of TnSeq statistics\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T, color=c(my.cols,\"grey30\"))\n\n\n\nTable 3. Summary of TnSeq statistics\n\n\nSample\nFiltered Reads\nInsertions 80% ORF\nUnique insertions 80% ORF\nRatio unique\nNormalized Unique insertions per M Reads\n\n\n\n\nppol_Mother\n9.00e+05\n2.88e+05\n7.14e+04\n24.8 %\n7.93e+04\n\n\nppol_Mother_replicate\n1.30e+06\n1.05e+05\n3.69e+04\n35.2 %\n2.84e+04\n\n\nwt_Daughter\n2.70e+06\n1.64e+05\n4.39e+04\n26.7 %\n1.62e+04\n\n\nwt_Daughter_replicate\n1.70e+06\n1.56e+05\n3.77e+04\n24.1 %\n2.22e+04\n\n\nMean\n1.65e+06\n1.78e+05\n4.75e+04\n27.7 %\n3.65e+04\n\n\n\n\n\n\n\n\n\nInsertions in key genes\n\n\nShow the code\n#read Table\nLH &lt;- read_xlsx(\"DNAprocessestoGraph.xlsx\",sheet=1)\nLH &lt;- LH[grep(\"TT_C\",LH$Genes),]\ncoding$Genes &lt;- substr(coding$V9,9,16)\ntmp &lt;- coding[coding$V3==\"CDS\",c(1,10,4,5)]\n\n#ribosoma &lt;- c(\"TT_C3035\",\"TT_C3056\",\"TT_C3036\",\"TT_C3055\",\"TT_C3024\",\"TT_C3048\")\ntmp &lt;- tmp[tmp$Genes %in% LH$Genes,]\n#tmp &lt;- tmp[tmp$Genes %in% ribosoma,]\n\n\nkk$Strand &lt;- as.logical(kk$Strand==\"+\")\nkeygenes &lt;- list()\n\nkeygenes &lt;- lapply(1:nrow(tmp), FUN = function(i) {\n  tmp2 &lt;- tmp[c(i,i,i,i),]\n  tmp2$V1 &lt;- names(samples)\n  keygenes[[i]] &lt;- ggplot(tmp2, aes(xmin = V4, xmax = V5, y = forcats::fct_rev(V1),  label=Genes)) +\n    geom_gene_arrow(fill=\"grey90\",arrowhead_width = grid::unit(9, \"pt\"), arrowhead_height = grid::unit(16, \"pt\"), arrow_body_height = grid::unit(11, \"pt\")) +\n    geom_gene_label(fontface=\"bold\",align=\"left\",grow=TRUE,height = grid::unit(11, \"pt\"))+\n    geom_feature(data = kk[kk$Gene %in% tmp2[,2],], aes(x = i.start, y = V2, forward = Strand,color=Strand)  ) + scale_color_discrete(name = \"Strand\", labels = c(\"Reverse\", \"Forward\")) + \n    theme_bw() + theme(legend.position=\"none\") +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),text=element_text(face=\"bold\"))+\n    ylab(\"\") + xlab(\"\")\n})\ndo.call(\"grid.arrange\", c(keygenes, ncol = 3))\n\n\n\n\n\nFigure 9. Tn insertions in key HB27 genes in forward (blue) and reverse (pink) strands. Only insertions between 10-90% central gene interval considered for Z-score calculation are displayed.\n\n\n\n\n\nClick for Session Information\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] RColorBrewer_1.1-3  factoextra_1.0.7    circlize_0.4.16    \n [4] gridExtra_2.3       readxl_1.4.3        ggpmisc_0.6.0      \n [7] ggpp_0.5.8-1        plotly_4.10.4       details_0.3.0      \n[10] ggpubr_0.6.0        lubridate_1.9.3     forcats_1.0.0      \n[13] stringr_1.5.1       purrr_1.0.2         readr_2.1.5        \n[16] tidyr_1.3.1         tibble_3.2.1        tidyverse_2.0.0    \n[19] dplyr_1.1.4         Rsubread_2.19.0     gggenes_0.5.1      \n[22] kableExtra_1.4.0    data.table_1.15.4   ggplot2_3.5.1      \n[25] formatR_1.14        knitr_1.48          BiocManager_1.30.23\n\nloaded via a namespace (and not attached):\n [1] polynom_1.4-1       rlang_1.1.4         magrittr_2.0.3     \n [4] compiler_4.4.0      png_0.1-8           systemfonts_1.1.0  \n [7] vctrs_0.6.5         quantreg_5.98       pkgconfig_2.0.3    \n[10] shape_1.4.6.1       fastmap_1.2.0       backports_1.5.0    \n[13] labeling_0.4.3      utf8_1.2.4          rmarkdown_2.28     \n[16] ggfittext_0.10.2    tzdb_0.4.0          MatrixModels_0.5-3 \n[19] xfun_0.47           jsonlite_1.8.8      highr_0.11         \n[22] broom_1.0.6         R6_2.5.1            stringi_1.8.4      \n[25] car_3.1-2           cellranger_1.1.0    Rcpp_1.0.13        \n[28] R.utils_2.12.3      Matrix_1.7-0        splines_4.4.0      \n[31] timechange_0.3.0    tidyselect_1.2.1    rstudioapi_0.16.0  \n[34] abind_1.4-5         yaml_2.3.10         lattice_0.22-6     \n[37] withr_3.0.1         evaluate_0.24.0     desc_1.4.3         \n[40] survival_3.7-0      xml2_1.3.6          pillar_1.9.0       \n[43] confintr_1.0.2      carData_3.0-5       generics_0.1.3     \n[46] hms_1.1.3           munsell_0.5.1       scales_1.3.0       \n[49] glue_1.7.0          clipr_0.8.0         lazyeval_0.2.2     \n[52] tools_4.4.0         SparseM_1.84-2      ggsignif_0.6.4     \n[55] cowplot_1.1.3       grid_4.4.0          crosstalk_1.2.1    \n[58] colorspace_2.1-1    cli_3.6.3           fansi_1.0.6        \n[61] viridisLite_0.4.2   svglite_2.1.3       gtable_0.3.5       \n[64] R.methodsS3_1.8.2   rstatix_0.7.2       digest_0.6.36      \n[67] ggrepel_0.9.5       htmlwidgets_1.6.4   farver_2.1.2       \n[70] htmltools_0.5.8.1   R.oo_1.26.0         lifecycle_1.0.4    \n[73] httr_1.4.7          GlobalOptions_0.1.2 MASS_7.3-61"
  },
  {
    "objectID": "reads_dd_processing.html#tn5-transposon-insertions-per-gene-and-z-score",
    "href": "reads_dd_processing.html#tn5-transposon-insertions-per-gene-and-z-score",
    "title": "TnSeq Illumina Data Processing",
    "section": "Tn5 transposon insertions per gene and Z-score",
    "text": "Tn5 transposon insertions per gene and Z-score\n\nCount integration events counts per gene and Z-score calculation\nNow we are going to transform the mapped reads into hits per gene, to obtain a normalized insertion score, by the following steps:\n\nWe only consider insertions within the 10-90% interval of each gene, because insertions landing in the flanking sections of genes might give rise to truncated of chimeric proteins partially functional. The counts of Tn insertions will be obtained from the read mapping coordinates, considering the alignment start and the strand, after conversion of the BAM file to a tabulated format (BED).\nWe will normalize by the total number of mapped reads within the coding regions (80% central).\nWe will obtain a ratio of observed to expected Tn insertions.\nWe will make a log2-transformation in pseudocounts \\(log_2(x+1)\\) to avoid negative scores.\nFinally, we will scale the data to favor sample comparison, using the R function scale() to obtain a final Z-score.\n\nThus, our score will be obtained with the following formula:\n\\[\nScore = log_2 \\left( \\frac{count}{\\text{sample mapped reads} * \\frac{\\text{gen length} }{\\text{genome length}}} +1 \\right)\n\\]\nAnd the final Z-score will be:\n\\[\n\\textbf{Z}{-}\\textbf{Score} =  \\frac{Score - mean(Score)}{SD(Score)}\n\\]\nIn the following plots you can see the distribution of Z-scores between samples.\n\n\nShow the code\ncd ~/data/TnSeq_thermus\nbedtools bamtobed -i 01_bowtie2/mapping_TNB03_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB03_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB01_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB01_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB07_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB07_dd_sorted.bed\n\nbedtools bamtobed -i 01_bowtie2/mapping_TNB09_dd_sorted.bam &gt; 01_bowtie2/mapping_TNB09_dd_sorted.bed\n\n\n\n\nShow the code\n#gene table formatted with 80% central gene\nHB27_genome &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\nHB27_genome$Chr &lt;- \"AE017221.1\"\nHB27_genome$Chr[8088:nrow(coding)] &lt;- \"AE017222.1\"\nHB27_genome$V9 &lt;-  substr(HB27_genome$V9,9,16)\n\n#correct TT_C0145 coordinates and remove TT_C0146\nHB27_genome$stop[HB27_genome$Genes==\"TT_C0145\" & HB27_genome$V3==\"gene\"] &lt;- HB27_genome$stop[HB27_genome$Genes==\"TT_C0146\" & HB27_genome$V3==\"gene\"]\nHB27_genome[-as.numeric(rownames(HB27_genome[HB27_genome$Genes==\"TT_C0146\",])),]\n\n\n [1] V1  V2  V3  V4  V5  V6  V7  V8  V9  Chr\n&lt;0 rows&gt; (or 0-length row.names)\n\n\nShow the code\n#select \"gene\" feature for mapping\nHB27_genome80 &lt;- HB27_genome[HB27_genome$V3==\"gene\",]\n\n#subset the 10-90% gene interval and reshape table\nHB27_genome80 &lt;- data.frame(HB27_genome80[,c(9,1,4,5,7)])\ncolnames(HB27_genome80) &lt;- c(\"GeneID\",\"Chr\",\"Start\",\"End\",\"Strand\")\nHB27_genome80$Start &lt;- HB27_genome80$Start + (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80$End &lt;- HB27_genome80$End - (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80 &lt;- HB27_genome80[,c(1,2,5,3,4)]\n\n#load BED files\nsamples &lt;- c(\"Ppol_1\"=\"TNB01\", \"Ppol_2\"=\"TNB09\",\"HB27_1\"=\"TNB03\", \"HB27_2\"=\"TNB07\")\n\ndata &lt;- list()\ninsertion_table &lt;- list()\nscores_table &lt;- list()\n#prepare HB27_genome80 for foverlaps()\nnames(HB27_genome80) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"start\",\"end\") \nHB27_genome80 &lt;- as.data.table(HB27_genome80)\nsetkey(HB27_genome80, start, end) #keyed\n\n#match read mapping start with genes coordinates to obtain insertion sites per gene\nfor (i in 1:4){\n  data[[i]] &lt;- fread(input = paste0(\"01_bowtie2/mapping_\",samples[i],\"_dd_sorted.bed\"))\n  #filter by alignment quality\n  data[[i]] &lt;- data[[i]][data[[i]]$V5 &gt; 5]\n    data[[i]] &lt;- data[[i]][,c(1,6,2,3)]\n    names(data[[i]]) &lt;- c(\"Mapped_Chr\",\"Strand\",\"start\",\"end\")\n    insertion_table[[i]] &lt;- foverlaps(as.data.table(data[[i]]),HB27_genome80,type=\"within\",nomatch = 0,mult=\"all\")\n    insertion_table[[i]] &lt;- subset(insertion_table[[i]], Chr==Mapped_Chr)\n    insertion_table[[i]] &lt;- insertion_table[[i]][,-9]\n    scores_table[[i]] &lt;- as.data.frame(table(insertion_table[[i]]$Gene))\n    names(scores_table[[i]]) &lt;- c(\"Gene\",\"Counts\")\n    scores_table[[i]] &lt;- merge(as.data.frame(HB27_genome80),scores_table[[i]], all.x=TRUE)\n    scores_table[[i]]$Counts &lt;- ifelse(is.na(scores_table[[i]]$Counts),0,scores_table[[i]]$Counts)\n    scores_table[[i]]$score &lt;- log2((scores_table[[i]]$Counts / (nrow(insertion_table[[i]])* (scores_table[[i]]$end-scores_table[[i]]$start)/2127482)) +1 )\n  }\n\ntnseq &lt;- merge(scores_table[[1]],scores_table[[2]], by=c(\"Gene\",\"Chr\",\"Str\",\"start\",\"end\"),all=TRUE)\ntnseq &lt;- merge(tnseq,scores_table[[3]], by=c(\"Gene\",\"Chr\",\"Str\",\"start\",\"end\"),all=TRUE)\ntnseq &lt;- merge(tnseq,scores_table[[4]],by=c(\"Gene\",\"Chr\",\"Str\",\"start\",\"end\"),all=TRUE)\nnames(tnseq) &lt;- c(\"Gene\",\"Chr\",\"Str\",\"Start80\",\"End80\",\"Counts_Ppol_1\",\"Zscore_Counts_Ppol_1\",\"Counts_Ppol_2\",\"Zscore_Ppol_2\",\"Counts_HB27_1\",\"Zscore_HB27_1\",\"Counts_HB27_2\",\"Zscore_HB27_2\")\n#write.table(tnseq,\"tnseq_dd_counts_scores_all.csv\",quote=FALSE,sep=\";\",row.names = FALSE)\n \n\nscores &lt;- as.data.frame(scale(tnseq[,c(7,9,11,13)]))\nnames(scores) &lt;- c(\"Ppol_1\",\"Ppol_2\",\"HB27_1\",\"HB27_2\")\nrow.names(scores) &lt;- tnseq$Gene\n#write.table(scores,\"scores80_11nov2024.csv\",row.names = TRUE,sep=\";\")\n\n\n\n#plot distribution\nbox &lt;- ggplot(stack(scores), aes(x=ind, y=values)) + xlab(\"\") + \n  ylab(\"Score\")+\n  geom_boxplot(outlier.shape=8,outlier.size=3,aes(color=ind,fill=ind,alpha=0.8),\n               linewidth = 1)+theme_linedraw()+geom_jitter(alpha=0.1,aes(color=ind)) +\n # geom_point(data=q,aes(x=ind,y=values,fill=ind),shape=23,size=4) +\n  theme(axis.text.x = element_text(face=\"bold\", vjust=1))+\n  theme(legend.position = \"none\") + scale_color_brewer(palette=\"Paired\")+\n  scale_fill_brewer(palette=\"Paired\")\n\n#correlation\nwt &lt;- ggplot(data = scores, aes(x=HB27_1,y=HB27_2))+geom_point(size=3,alpha=0.6, color=my.cols[4]) +  theme_linedraw() + ylim(-2,7) +\n  xlab(\"HB27_1\") + ylab(\"HB27_2\") + stat_poly_line(color=my.cols[4],fill=my.cols[4]) +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nppol &lt;- ggplot(data = scores, aes(x=Ppol_1,y=Ppol_2))+geom_point(size=3,alpha=0.6, color=my.cols[2])  + theme_linedraw() + ylim(-2,7) +\n  xlab(\"Ppol_1\") + ylab(\"Ppol_2\") +  stat_poly_line(color=my.cols[2],fill=my.cols[2]) +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\nggarrange(box, ppol, wt,\n          labels = c(\"A\", \"B\",\"C\"), ncol=1\n         )\n\n\n\n\n\nFigure 6. Tn insertion Z-scores per gene. (A) Boxplot of gene Z-scores per sample. (B & C) Correlation of Z-scores per gene between sample replicates.\n\n\n\n\nAs we can see, the correlation between the two PPOL samples is only moderate, in line with the QC and mapping results. To analize this in more detail and compare the four samples, we used a PCA plot. As shown in Figure 7 below, the first variable is responsible for &gt;80% of the data variability, with all samples being very similar in this direction. A second variable is responsible for ~10% of the data diversity, with half of this divergence attributable to sample Ppol_2 (TNB09). Interestingly, samples TNB01, TNB03 and TNB07 are quite similar, although sample TNB01 contains significantly fewer reads, suggesting that the sequencing library does not strongly influence our results.\n\n\nShow the code\ntnseq.pca &lt;- prcomp(na.omit(scores)[,1:4], \n                   center = TRUE, \n                   scale = TRUE) \nfviz_pca_biplot(tnseq.pca,col.var=rownames(tnseq.pca[[2]]),col.ind=\"grey90\", label=\"var\",labelsize=5,labelface=\"bold\")+ylim(-4,4)+xlim(-2.5,9)+scale_color_brewer(palette=\"Paired\")+theme_pubclean()+theme(legend.position=\"none\")\n\n\n\n\n\nFigure 7. Samples PCA plot. Note that only complete cases (genes with at least one Tn5 insertion in all samples) can be used.\n\n\n\n\nIn order to analyze in detail the difference between samples, we construct also a plot in which we plot the Z-scores for all genes in all samples.\n\n\nShow the code\nscores$mean &lt;- apply(scores, 1, mean,na.rm=TRUE)\nkk &lt;- cbind(tnseq$Gene,scores$mean,stack(scores))\ndis &lt;- ggplot(data=kk) +\n  geom_point(aes(x=reorder(`tnseq$Gene`,`scores$mean`,decreasing=TRUE),y=values,color=ind), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score\") + xlab(\"Gene\") +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n#ggsave(\"fig2a.pdf\",dis,width=6,height=3)\nggplotly(dis)\n\n\n\n\nFigure 8. Comparison of Tn insertion Z-scores per gene. Values were sorted by the average of all samples. This is an interactive plot: Put your mouse pointer over any point and you will see a pop-up label with the Z-score and the Gene info.\n\n\nIt is striking that we do not see a step that marks the boundary between the group of non-essential genes, which are expected to have a higher score, and the essential genes with very low or no Tn5 insertions and thus a low score.\n\n\nSummary stats\nIn the following table you can find a summary of the main raw insertion stats. The average number of insertions within the 80% central portion of the gene was around 1.8x10^5, with roughly 4.7 x10^4 unique insertion sites, that is an average of 1 unique insertion site per 44.8 bp.\n\n\nShow the code\nkk &lt;- cbind(insertion_table[[1]], \"HB27_1\")\nkk &lt;- rbind(kk,cbind(insertion_table[[2]], \"HB27_2\"))\nkk &lt;- rbind(kk,cbind(insertion_table[[3]], \"Ppol_1\"))\nkk &lt;- rbind(kk,cbind(insertion_table[[4]], \"Ppol_2\"))\n#unique insertions per sample and per strand\nunique_insertions &lt;- aggregate(data=kk, i.start ~ Strand+V2, function(x) length(unique(x)))\n#unique insertions total per sample\nunique_insertions &lt;- aggregate(unique_insertions,unique_insertions$i.start~unique_insertions$V2,sum)\n#all\nresumen &lt;- cbind(fastp[,c(1,4)],as.vector(table(kk$V2)),unique_insertions[,2])\n#normalized & ratio\nresumen$normalized &lt;- resumen[,4]/resumen[,2]\nresumen[,2] &lt;- resumen[,2] * 1000000\nresumen$ratio &lt;- paste(as.character(round(resumen[,4]*100/resumen[,3],1)),\"%\")\nresumen[5,] &lt;- c(\"Mean\",apply(resumen[,2:5],2,mean),paste(as.character(round(mean(resumen[,4]*100/resumen[,3]),1)),\"%\"))\nresumen[,2] &lt;- as.numeric(resumen[,2])\nresumen[,3] &lt;- as.numeric(resumen[,3])\nresumen[,4] &lt;- as.numeric(resumen[,4])\nresumen[,5] &lt;- as.numeric(resumen[,5])\n\nas.data.frame(format(resumen[c(1,4,3,2,5),c(1:4,6,5)], scientific = TRUE, digits = 3)) %&gt;% \nkbl(align = \"c\", row.names = FALSE,col.names= c(\"Sample\",\"Filtered Reads\",\"Insertions 80% ORF\",\"Unique insertions 80% ORF\",\"Ratio unique\",\"Normalized Unique insertions per M Reads\"), caption = \"Table 3. Summary of TnSeq statistics\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T, color=c(my.cols,\"grey30\"))\n\n\n\nTable 3. Summary of TnSeq statistics\n\n\nSample\nFiltered Reads\nInsertions 80% ORF\nUnique insertions 80% ORF\nRatio unique\nNormalized Unique insertions per M Reads\n\n\n\n\nPpol_1\n9.00e+05\n1.05e+05\n3.69e+04\n35.2 %\n4.10e+04\n\n\nPpol_2\n1.70e+06\n1.64e+05\n4.39e+04\n26.7 %\n2.58e+04\n\n\nHB27_2\n1.30e+06\n2.88e+05\n7.14e+04\n24.8 %\n5.49e+04\n\n\nHB27_1\n2.70e+06\n1.56e+05\n3.77e+04\n24.1 %\n1.40e+04\n\n\nMean\n1.65e+06\n1.78e+05\n4.75e+04\n27.7 %\n3.39e+04\n\n\n\n\n\n\n\n\n\nInsertions in key genes\nWe now decided to check some genes, expected to be essential, and see their score and the number and location of the insertions in each sample.\n\n\nShow the code\n#read Table\nLH &lt;- read_xlsx(\"DNAprocessestoGraph.xlsx\",sheet=1)\nLH &lt;- LH[grep(\"TT_C\",LH$Genes),]\ncoding$Genes &lt;- substr(coding$V9,9,16)\ntmp &lt;- coding[coding$V3==\"CDS\"|coding$V3==\"transcript\",c(1,10,4,5)]\ntmp &lt;- tmp[tmp$Genes %in% LH$Genes,]\n\n\nkk$Strand &lt;- as.logical(kk$Strand==\"+\")\nkeygenes &lt;- list()\n\nkeygenes &lt;- lapply(1:nrow(tmp), FUN = function(i) {\n  tmp2 &lt;- tmp[c(i,i,i,i),]\n  tmp2$V1 &lt;- names(samples)\n  keygenes[[i]] &lt;- ggplot(tmp2, aes(xmin = V4, xmax = V5, y = forcats::fct_rev(V1),  label=Genes)) +\n    geom_gene_arrow(fill=\"grey90\",arrowhead_width = grid::unit(9, \"pt\"), arrowhead_height = grid::unit(16, \"pt\"), arrow_body_height = grid::unit(11, \"pt\")) +\n    geom_gene_label(fontface=\"bold\",align=\"left\",grow=TRUE,height = grid::unit(11, \"pt\"))+\n    geom_feature(data = kk[kk$Gene %in% tmp2[,2],], aes(x = i.start, y = V2, forward = Strand,color=Strand)  ) + scale_color_discrete(name = \"Strand\", labels = c(\"Reverse\", \"Forward\")) + \n    theme_bw() + theme(legend.position=\"none\") +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),text=element_text(face=\"bold\"))+\n    ylab(\"\") + xlab(\"\")+ labs(subtitle=paste(\"Mean Z-score:\",round(scores$mean[row.names(scores)==tmp$Genes[i]],2)))\n})\ndo.call(\"grid.arrange\", c(keygenes, ncol = 3))\n\n\n\n\n\nFigure 9. Tn insertions in key HB27 genes in forward (blue) and reverse (pink) strands. Only insertions between 10-90% central gene interval considered for Z-score calculation are displayed.\n\n\n\n\n\nClick for Session Information\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] RColorBrewer_1.1-3  factoextra_1.0.7    circlize_0.4.16    \n [4] gridExtra_2.3       readxl_1.4.3        ggpmisc_0.6.0      \n [7] ggpp_0.5.8-1        plotly_4.10.4       details_0.3.0      \n[10] ggpubr_0.6.0        lubridate_1.9.3     forcats_1.0.0      \n[13] stringr_1.5.1       purrr_1.0.2         readr_2.1.5        \n[16] tidyr_1.3.1         tibble_3.2.1        tidyverse_2.0.0    \n[19] dplyr_1.1.4         Rsubread_2.19.6     gggenes_0.5.1      \n[22] kableExtra_1.4.0    data.table_1.16.2   ggplot2_3.5.1      \n[25] formatR_1.14        knitr_1.48          BiocManager_1.30.25\n\nloaded via a namespace (and not attached):\n [1] polynom_1.4-1       rlang_1.1.4         magrittr_2.0.3     \n [4] compiler_4.4.1      png_0.1-8           systemfonts_1.1.0  \n [7] vctrs_0.6.5         quantreg_5.99       pkgconfig_2.0.3    \n[10] shape_1.4.6.1       fastmap_1.2.0       backports_1.5.0    \n[13] labeling_0.4.3      utf8_1.2.4          rmarkdown_2.28     \n[16] ggfittext_0.10.2    tzdb_0.4.0          MatrixModels_0.5-3 \n[19] xfun_0.48           jsonlite_1.8.9      highr_0.11         \n[22] broom_1.0.7         R6_2.5.1            stringi_1.8.4      \n[25] car_3.1-3           cellranger_1.1.0    Rcpp_1.0.13        \n[28] R.utils_2.12.3      Matrix_1.7-1        splines_4.4.1      \n[31] timechange_0.3.0    tidyselect_1.2.1    rstudioapi_0.17.1  \n[34] abind_1.4-8         yaml_2.3.10         lattice_0.22-6     \n[37] withr_3.0.2         evaluate_1.0.1      desc_1.4.3         \n[40] survival_3.7-0      xml2_1.3.6          confintr_1.0.2     \n[43] pillar_1.9.0        carData_3.0-5       generics_0.1.3     \n[46] hms_1.1.3           munsell_0.5.1       scales_1.3.0       \n[49] glue_1.8.0          clipr_0.8.0         lazyeval_0.2.2     \n[52] tools_4.4.1         SparseM_1.84-2      ggsignif_0.6.4     \n[55] cowplot_1.1.3       grid_4.4.1          crosstalk_1.2.1    \n[58] colorspace_2.1-1    Formula_1.2-5       cli_3.6.3          \n[61] fansi_1.0.6         viridisLite_0.4.2   svglite_2.1.3      \n[64] gtable_0.3.6        R.methodsS3_1.8.2   rstatix_0.7.2      \n[67] digest_0.6.37       ggrepel_0.9.6       htmlwidgets_1.6.4  \n[70] farver_2.1.2        R.oo_1.26.0         htmltools_0.5.8.1  \n[73] lifecycle_1.0.4     httr_1.4.7          GlobalOptions_0.1.2\n[76] MASS_7.3-61"
  }
]