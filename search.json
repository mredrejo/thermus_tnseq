[
  {
    "objectID": "panthermus.html",
    "href": "panthermus.html",
    "title": "Thermus Pangenome",
    "section": "",
    "text": "We downloaded (May 27th, 2024) all the Deinococcota assemblies from Refseq database using the NCBI tool datasets (v.16.5.0) installed in Conda.\n\n\nShow the code\nconda activate ncbi_datasets\nconda update -c conda-forge ncbi-datasets-cli\ncd thermaceae/thermus_refseq\ndatasets download genome taxon Thermaceae --filename thermaceae_dataset.zip --exclude-atypical --assembly-source 'refseq'\n\n\nTo obtain an index of the genome files, we converted the dataset_catalog.json to CSV (https://www.convertcsv.com/json-to-csv.htm) to obtain the file fasta.csv.\nTo work with homogeneous and updated genome annotations, we subsequently re-annotated all genome assemblies with Bakta (from Conda, v. 1.9.2) using the full database (DDBB v. 5.1) and the options --skip-crispr --force.\n\n\nShow the code\ncd pangenomes/deinococcota/ncbi_dataset/data\nconda activate bakta\nconda update bakta\nbakta_db download --output /Volumes/Trastero4/ddbb --type full \n#database is in external HD\nwhile IFS=, read -r col1 col2 col3\n    do\n        bakta --db /Volumes/Trastero4/ddbb/bakta-db --verbose --output ../../../bakta_results/$col3 --prefix $col3 --locus-tag $col3 --threads 16 $col1\n    done &lt; &lt;(tail -n +2 fasta.csv)\n\n\nThe pangenomes were constructed with PPanGGOLIN (v. 2.0.5) installed in Conda. You can see the whole documentation about PPanGGOLIN and the output files here. In order to construct different pangenomes at species, genus, family and order levels, we parse the taxonomy from NCBI datasets using dataformat tool and then use a short R script (parse_taxonomy.R) to generate the annotated genomes table lists.\nAfter testing different alternative datasets and clustering combinations, we empirically set the MMSeqs clustering sequence identity and coverage parameters to 0.4 and 0.5, respectively.\n\n\nShow the code\n#STEP 2\n#Run ppanggolin and write extra output files\nconda activate bioconda\ncd pangenomes\nppanggolin workflow --anno deinococcota.gbff.list --basename deinococcota --identity 0.4 --coverage 0.5 -o deinococcota_i4c5 -c 16 -f\nppanggolin workflow --anno thermaceae.gbff.list --basename thermaceae --identity 0.4 --coverage 0.5 -o thermaceae_i4c5 -c 16 -f\nppanggolin workflow --anno thermus.gbff.list --basename thermus --identity 0.4 --coverage 0.5 -o thermus_i4c5 -c 16 -f\nppanggolin workflow --anno tt.gbff.list --basename tthermophilus --identity 0.4 --coverage 0.5 -o tt_i4c5 -c 16 -f\n\n\nAdditionally, before moving forward with the pangenome, as reference, we are going to incorporate the gene names from the Thermus thermophilus strain HB27, as annotated in the NCBI Refseq assembly (GCF_000008125.1)."
  },
  {
    "objectID": "panthermus.html#integration-of-tnseq-and-pangenomes",
    "href": "panthermus.html#integration-of-tnseq-and-pangenomes",
    "title": "Thermus Pangenome",
    "section": "Integration of TnSeq and pangenomes",
    "text": "Integration of TnSeq and pangenomes\nAs mentioned above, in order to compute the pangenomes, we carried out a new annotation of the genes in all the assemblies. This is required to have homogeneous gene definitions, but that also gives rise to some differences between the classical NCBI Genbank annotation that we used for the pangenome and the new annotations. Thus, in order to integrate the HB27 genes from TnSeq (TT_CXXXX) and pangenome genes (GCF_000008125.1_XXXXX) in the same table, we used the package fuzzyjoin that allows a flexible merge of the data, considering the gene start and stop as an interval rather than fixed coordinates. However, this flexibility also has a price, as we have some pangenome genes that matched with more than one gene in the classical annotation. We tested different levels of flexibility in the coordinates to maximize the number of genes in the table and at the same time minimize the number of duplicates.\n\n\nShow the code\n#cross GCA_000008125.1 in all pangenomes\nmatrix &lt;- list()\nHB27 &lt;- data.frame()\nfor (i in 1:length(pangenomes)){\n  matrix[[i]]&lt;- read.table(paste0(\"pangenomes/\",pangenomes[i],\"/table/GCF_000008125.1.tsv\"),header=TRUE,sep=\"\\t\")\n}\nHB27 &lt;- merge(matrix[[1]][,c(1:4,8)],matrix[[2]][,c(1:4,8)],by=c(\"gene\",\"contig\",\"start\",\"stop\"),all=TRUE)\ncolnames(HB27)[5:6] &lt;- pangenomes[1:2]\nHB27 &lt;- merge(HB27,matrix[[3]][,c(1:4,8)],by=c(\"gene\",\"contig\",\"start\",\"stop\"),all=TRUE)\nHB27 &lt;- merge(HB27,matrix[[4]][,c(1:4,8)],by=c(\"gene\",\"contig\",\"start\",\"stop\"),all=TRUE)\ncolnames(HB27)[7:8] &lt;- pangenomes[3:4]\n\n#cross gene names \ntnseq &lt;- read.csv2(\"tnSeq_full.csv\")\nHB27_genome &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\nHB27_genome$Chr &lt;- \"AE017221.1\"\nHB27_genome$Chr[8088:nrow(HB27_genome)] &lt;- \"AE017222.1\"\nHB27_genome$V9 &lt;-  substr(HB27_genome$V9,9,16)\ncolnames(HB27_genome)[c(4:5,9)] &lt;- c(\"start\",\"stop\",\"Genes\")\n#to reduce differnces in gene annotation, we use fuzzyjoin\n#we use the highest max_dist value that don't give rise to duplicate gene names \ntmp &lt;- fuzzyjoin::difference_inner_join(HB27[HB27$contig==\"contig_1\",],HB27_genome[HB27_genome$V3==\"CDS\" & HB27_genome$V1==\"AE017221.1\" ,c(4:5,9)], by =c(\"start\", \"stop\"), max_dist = 210 )\ntmp2 &lt;- fuzzyjoin::difference_inner_join(HB27[HB27$contig==\"contig_2\",],HB27_genome[HB27_genome$V3==\"CDS\" & HB27_genome$V1==\"AE017222.1\" ,c(4:5,9)], by =c(\"start\", \"stop\"), max_dist = 210 )\nHB27_annotated &lt;- rbind(tmp,tmp2)\n\n#now we fetch the number of genomes with members in each family and paralogs\n#load pangenome matrix\nmatrix &lt;- list()\nfor (i in 1:length(pangenomes)){\n  matrix[[i]]&lt;- read.table(paste0(\"pangenomes/\",pangenomes[i],\"/matrix.csv\"),sep=\",\",header=TRUE)\n  matrix[[i]] &lt;- matrix[[i]][,c(4,6,match(\"GCF_000008125.1\",names(matrix[[i]])))]\n  colnames(matrix[[i]])[3] &lt;- \"gene\"\n  #HB27_annotated &lt;- merge(HB27_annotated,matrix[[i]], by=\"gene\",all.x=TRUE)\n  \n  for (j in 1:nrow(HB27_annotated)){\n    k &lt;- grep(HB27_annotated$gene[j],matrix[[i]]$gene)\n    HB27_annotated$isolates[j] &lt;- matrix[[i]]$No..isolates[k] \n    HB27_annotated$seqs[j] &lt;- matrix[[i]]$Avg.sequences.per.isolate[k] \n  }\n  colnames(HB27_annotated)[c(length(HB27_annotated)-1,length(HB27_annotated))] &lt;- c(paste0(pangenomes[i],\"_isolates\"),paste0(pangenomes[i],\"_seqs.per.isolate\"))\n}\n\n\npanTnseq &lt;- merge(tnseq,HB27_annotated[,c(11,5:8,12:19)])\npanTnseq_Full &lt;-  merge(tnseq,HB27_annotated[,c(11,5:8,12:19)],all.x=TRUE)\nfwrite(panTnseq_Full,\"tnseq_pangenome2275.csv\",sep=\";\", row.names = FALSE)\n\n\nWe have been able to match in the pangenome 2190 genes out of 2275, with only 3 genes of the newly annotated HB27 (GCF_000008125.1_07995, GCF_000008125.1_08920, and GCF_000008125.1_08925) that matched with two genes in the classical annotation (TT_CXXXX).\nThe final table is saved as tnseq_pangenome2275.csv and tnseq_pangenome2275.xlsx."
  },
  {
    "objectID": "panthermus.html#correlation-between-tnseq-and-pangenome",
    "href": "panthermus.html#correlation-between-tnseq-and-pangenome",
    "title": "Thermus Pangenome",
    "section": "Correlation between TnSeq and Pangenome",
    "text": "Correlation between TnSeq and Pangenome\nNow we are going to test the correlation between the TnSeq score and group classification of the HB27 genes, with the number of conserved genes in each pangenome and the pangenome cluster.\n\n\nShow the code\n#corr\npanTnseq_Full[,c(2:7,22:29)] &lt;- lapply(panTnseq_Full[,c(2:7,22:29)], as.numeric)\nM &lt;-cor(panTnseq_Full[,c(2:7,22:29)], method = \"spearman\", use = \"pairwise.complete.obs\")\ntestRes &lt;-  cor.mtest(panTnseq_Full[,c(2:7,22:29)], conf.level = 0.95)\ncorrplot(M, type=\"lower\", p.mat = testRes$p, method = 'circle', insig='blank',\n         tl.col=\"black\",tl.srt = 45, addCoef.col ='black', number.cex = 0.5, col=brewer.pal(n=8, name=\"Spectral\"))\n\n\n\n\n\nFigure 20. Correlation between TnSeq and Pangenome variables.\n\n\n\n\nThere’s no overall correlation.\n\n\nShow the code\n#recuento\n\nhigh &lt;- c()\nintermediate &lt;- c()\nless &lt;- c()\nfor (i in 1:length(pangenomes)){\n  high[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\"  & panTnseq$cluster==\"Highly permissive\" ))\n   intermediate[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\" & panTnseq$cluster==\"Intermediate\" ))\n   less[i] &lt;- nrow(subset(panTnseq,panTnseq[,17+i]==\"persistent\" & panTnseq$cluster==\"Less permissive\" ))\n}\nstats &lt;- data.frame(high,intermediate,less)\nrow.names(stats) &lt;- names(pangenomes)\nstats &lt;- cbind(row.names(stats),stack(stats))\nnames(stats) &lt;- c(\"level\",\"ratio\",\"cluster\")\n#plot\nggplot(stats,aes(x=level, y=ratio,group=cluster)) + \n         geom_bar(aes(fill=cluster),stat = \"identity\",position=\"fill\",color=\"grey40\", alpha=0.8) + ylab(\"Persistent Genes  (%)\")+ geom_text(aes(label=ratio),size=5, position = position_fill(vjust=0.5) , col = \"black\")+xlab(\"Pangenome level\") +scale_y_continuous(labels = scales::percent) + theme_bw()\n\n\n\n\n\nFigure 21. Persistant genes in each pangenome)."
  },
  {
    "objectID": "reads_processing.html",
    "href": "reads_processing.html",
    "title": "TnSeq Illumina Data Processing",
    "section": "",
    "text": "Quality check, reads filtering and trimming was carried out with FastP 0.23.4 Chen et al. (2018) and reports were merged with MultiQC 1.17. Reads processing parameters were optimized to maximal proportion of mapped reads against the reference HB27 assembly GCA_000008125.\n\n\nShow the code\nconda activate bioconda\nconda install -c bioconda fastp\n#fastp 0.23.4\n\ncd data/Tnseq_thermus\nmkdir 00_fastp\nfastp -i 00_raw/TNB-03_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-03_trimmed.fastq -f 30 -t 10 -g -h TNB_03.html -j TNB_03_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-07_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-07_trimmed.fastq -f 30 -t 10 -g -h TNB_07.html -j TNB_07_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-01_S1_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-01_trimmed.fastq -f 30 -t 10 -g -h TNB_01.html -j TNB_01_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-09_S5_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-09_trimmed.fastq -f 30 -t 10 -g -h TNB_09.html -j TNB_09_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\n\ncd 00_fastp\nmkdir reports\nmv *.json reports\nmv *.html reports\n\nconda activate base\nmultiqc -v reports\n\n\nThe statistics of the final reads are shown in the Table 1 below. The detailed FastP combined reports is available here.\n\n\nShow the code\nfastp &lt;- read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, sep = \";\")\n\n\nWarning in read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, :\nincomplete final line found by readTableHeader on\n'00_fastp/merged_fastp_reports.csv'\n\n\nShow the code\nkbl(fastp[,c(1:4,6,5)], align = \"c\", col.names= c(\"Sample\",\"File\",\"% Duplication\",\"Final reads (M)\",\"Final reads (%)\",\"GC %\"), caption = \"Table 1. Statistics of fastp processed reads of HB27 TnSeq libraries\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T)\n\n\n\n\nTable 1. Statistics of fastp processed reads of HB27 TnSeq libraries\n\n\nSample\nFile\n% Duplication\nFinal reads (M)\nFinal reads (%)\nGC %\n\n\n\n\nppol_Mother\nTNB-01_S1_L001_R1_001\n78.20%\n0.9\n41.40%\n59.40%\n\n\nwt_Daughter\nTNB-03_S3_L001_R1_001\n72.40%\n2.7\n83.90%\n65.40%\n\n\nppol_Mother_replicate\nTNB-07_S3_L001_R1_001\n74.20%\n1.3\n88.30%\n65.80%\n\n\nwt_Daughter_replicate\nTNB-09_S5_L001_R1_001\n78.60%\n1.7\n92.10%\n64.90%\n\n\n\n\n\n\n\n\nThe original sample looks different, with less reads and length, as well as slight lower GC content. Note that HB27 chromosome has 1.894.877 bp and 69.5% GC and pTT27 has 232.605 and 69% GC.\nGiven that several samples were sequenced in the same batch, downplaying a technical problem with sequencing library o running, we hypothesize that some transposon insertions were unstable.\nInterestingly, some studies show that plasmid and intergenic/non-coding sequences has lower GC content Hu et al. (2022). Thus, we will analyze the ratio chromosome/plasmid, gene/intergenic and CG bias in all the samples (see below)."
  },
  {
    "objectID": "reads_processing.html#raw-data-processing",
    "href": "reads_processing.html#raw-data-processing",
    "title": "TnSeq Illumina Data Processing",
    "section": "",
    "text": "Quality check, reads filtering and trimming was carried out with FastP 0.23.4 Chen et al. (2018) and reports were merged with MultiQC 1.17. Reads processing parameters were optimized to maximal proportion of mapped reads against the reference HB27 assembly GCA_000008125.\n\n\nShow the code\nconda activate bioconda\nconda install -c bioconda fastp\n#fastp 0.23.4\n\ncd data/Tnseq_thermus\nmkdir 00_fastp\nfastp -i 00_raw/TNB-03_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-03_trimmed.fastq -f 30 -t 10 -g -h TNB_03.html -j TNB_03_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-07_S3_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-07_trimmed.fastq -f 30 -t 10 -g -h TNB_07.html -j TNB_07_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-01_S1_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-01_trimmed.fastq -f 30 -t 10 -g -h TNB_01.html -j TNB_01_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\nfastp -i 00_raw/TNB-09_S5_L001_R1_001.fastq.gz -a TAAGAGACAGTCTAGA  -o 00_fastp/TNB-09_trimmed.fastq -f 30 -t 10 -g -h TNB_09.html -j TNB_09_fastp.json -q 20 -r --cut_right_window_size 10 --cut_right_mean_quality 30 -w 10\n\ncd 00_fastp\nmkdir reports\nmv *.json reports\nmv *.html reports\n\nconda activate base\nmultiqc -v reports\n\n\nThe statistics of the final reads are shown in the Table 1 below. The detailed FastP combined reports is available here.\n\n\nShow the code\nfastp &lt;- read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, sep = \";\")\n\n\nWarning in read.table(\"00_fastp/merged_fastp_reports.csv\", header = TRUE, :\nincomplete final line found by readTableHeader on\n'00_fastp/merged_fastp_reports.csv'\n\n\nShow the code\nkbl(fastp[,c(1:4,6,5)], align = \"c\", col.names= c(\"Sample\",\"File\",\"% Duplication\",\"Final reads (M)\",\"Final reads (%)\",\"GC %\"), caption = \"Table 1. Statistics of fastp processed reads of HB27 TnSeq libraries\") %&gt;%\n    kable_styling(bootstrap_options = \"striped\", full_width = F, position = \"center\") %&gt;%\n    column_spec(1, bold = T, italic=T)\n\n\n\n\nTable 1. Statistics of fastp processed reads of HB27 TnSeq libraries\n\n\nSample\nFile\n% Duplication\nFinal reads (M)\nFinal reads (%)\nGC %\n\n\n\n\nppol_Mother\nTNB-01_S1_L001_R1_001\n78.20%\n0.9\n41.40%\n59.40%\n\n\nwt_Daughter\nTNB-03_S3_L001_R1_001\n72.40%\n2.7\n83.90%\n65.40%\n\n\nppol_Mother_replicate\nTNB-07_S3_L001_R1_001\n74.20%\n1.3\n88.30%\n65.80%\n\n\nwt_Daughter_replicate\nTNB-09_S5_L001_R1_001\n78.60%\n1.7\n92.10%\n64.90%\n\n\n\n\n\n\n\n\nThe original sample looks different, with less reads and length, as well as slight lower GC content. Note that HB27 chromosome has 1.894.877 bp and 69.5% GC and pTT27 has 232.605 and 69% GC.\nGiven that several samples were sequenced in the same batch, downplaying a technical problem with sequencing library o running, we hypothesize that some transposon insertions were unstable.\nInterestingly, some studies show that plasmid and intergenic/non-coding sequences has lower GC content Hu et al. (2022). Thus, we will analyze the ratio chromosome/plasmid, gene/intergenic and CG bias in all the samples (see below)."
  },
  {
    "objectID": "reads_processing.html#reads-mapping-analysis",
    "href": "reads_processing.html#reads-mapping-analysis",
    "title": "TnSeq Illumina Data Processing",
    "section": "Reads Mapping Analysis",
    "text": "Reads Mapping Analysis\n\nMapping stats\nFiltered reads were mapped using Bowtie2 2.5.1.\n\n\nShow the code\ncd 00_raw/refs\nbowtie2-build GCA_000008125.fa HB27_gb\ncd ..\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-03_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB03_sorted.bam) 2&gt; TNB-03_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-07_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB07_sorted.bam) 2&gt; TNB-07_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-01_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB01_sorted.bam) 2&gt; TNB-01_mapping.log\n\n(bowtie2 -x 00_raw/refs/HB27_gb --no-unal --very-sensitive -U 00_fastp/TNB-09_trimmed.fastq -p 10 | samtools view -bS - | samtools sort -@ 12 -o 01_bowtie2/mapping_TNB09_sorted.bam) 2&gt; TNB-09_mapping.log\n\n\nLet’s have a look to the data from bowtie2 alignment reports and the average stats obtained with Weesam 1.6.\n\n\nShow the code\n#read bowtie stats\nbowtie2 &lt;- read.table(\"01_bowtie2/bowtie2_stats.csv\",sep=\";\",header=TRUE)\nbowtie2 &lt;- cbind(bowtie2[,c(1,4)],stack(bowtie2[,2:3]))\nbowtie2$sample &lt;- factor(bowtie2$sample, levels=c(\"TNB01\",\"TNB09\",\"TNB03\",\"TNB07\"))\n#read and combine  weesam data\nweesam &lt;- read.table(\"01_bowtie2/weeSAM_reports/TNB01.txt\", sep=\"\\t\", header=TRUE)\nweesam &lt;- rbind(weesam, read.table(\"01_bowtie2/weeSAM_reports/TNB03.txt\", sep=\"\\t\",header=TRUE), read.table(\"01_bowtie2/weeSAM_reports/TNB07.txt\", sep=\"\\t\",header=TRUE), read.table(\"01_bowtie2/weeSAM_reports/TNB09.txt\", sep=\"\\t\",header=TRUE))\nweesam$sample &lt;- c(\"TNB01\",\"TNB01\",\"TNB03\",\"TNB03\",\"TNB07\",\"TNB07\",\"TNB09\",\"TNB09\")\nweesam$aligned &lt;- c()\n#plots\ng1 &lt;- ggplot(bowtie2)+geom_bar(aes(x=sample,y=values, fill=sample,color=ind),position = \"stack\", stat=\"identity\",alpha = 0.7) + geom_point(aes(x=sample,y=rate * 25000,fill=sample),shape=21, size = 4 ) + scale_y_continuous(name = \"Mapped reads\", breaks = seq(0, 2.5e06, 5e05), sec.axis = sec_axis(~. /25000 , name = \"Overall alignment rate (%)\",  breaks = seq(0, 100,20))) + scale_color_manual(values=c('grey70','grey30'))+scale_fill_brewer(palette=\"Paired\") + theme_bw() + labs(fill= \"Sequencing library\",color=\"Mapping\")\nweesam$Ref_Name &lt;- factor(weesam$Ref_Name, labels=c(\"Chromosome\",\"pTT27\"))\ng2 &lt;- ggplot(weesam, aes(x = sample, color = sample, fill = sample)) +\n    geom_point(aes(y=X._Covered / 20, fill=sample), color=\"black\", shape=21, size=3) + geom_pointrange(aes( y = log10(Avg_Depth), ymin = log10(Avg_Depth / Std_Dev), ymax = log10(Avg_Depth * Std_Dev)), size = 1, alpha = 0.7, shape=18) + theme_bw() + facet_grid(~Ref_Name) + scale_y_continuous(name = \"Depth (log10)\", breaks = seq(-1, 5,1), sec.axis = sec_axis(~. *20 , name = \"Coverage (%)\",  breaks = seq(0,100,20))) + scale_fill_brewer(palette=\"Paired\") +\n    scale_color_brewer(palette=\"Paired\") + xlab(\"\") +  theme(axis.text.y.left = element_text(color = \"grey40\"),axis.title.y = element_text(colour = \"grey40\"),axis.text.y.right = element_text(color = \"black\"),axis.title.y.right = element_text(colour = \"black\"))\n\nggarrange(g1, g2, \n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 2, nrow = 1, widths=c(1,1.5),\n          common.legend = TRUE, legend = \"bottom\")\n\n\n\n\n\nFigure 1. TnSeq libraries mapping statistics. (A) Total number of mapped reads (bars, left axis) and overall alignment rate (points, right axis). (B) Reference sequence depth (diamonds, left axis) and coverage (round points, right axis). Samples corresponding to ppol and wt HB27 strains are colored in blues and greens, respectively.\n\n\n\n\n\n\nMapping profile in HB27 genome\nAgain, the sample TNB01 corresponding to ppol (Mother) is clearly different, with less reads and lower mapping rate. Let’s look in more detail the mapping per base pair, analyzed with Bedtools 2.30.0.\n\n\nShow the code\n#load data\ncoverage &lt;- fread(\"01_bowtie2/bedtools_output/TNB01_cov_fw.tsv.gz\",  header=FALSE, select=c(4,7,8))\ncoverage &lt;- cbind(coverage, fread(\"01_bowtie2/bedtools_output/TNB01_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB01\")\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB03_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB03_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB03\"))\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB07_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB07_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB07\"))\n\ncoverage &lt;- rbind(coverage, cbind( fread(\"01_bowtie2/bedtools_output/TNB09_cov_fw.tsv.gz\",  header=FALSE,select=c(4,7,8)),fread(\"01_bowtie2/bedtools_output/TNB09_cov_rv.tsv.gz\",  header=FALSE,select=8),\"TNB09\"))\n\nnames(coverage) &lt;- c(\"Chain\",\"Position\",\"Pos\",\"Neg\",\"Sample\")\ncoverage$Chain &lt;- as.factor(coverage$Chain)\ncoverage$Sample &lt;- as.factor(coverage$Sample)\n\n#sample for knitting\n\n\n#plot\ncoverage %&gt;% \n  slice_sample(n = 100000) %&gt;% \n  ggplot() +  geom_bar(aes(x=Position,y=-log2(Neg+1)),stat=\"identity\", color=\"red\",linewidth=1) + \n  geom_bar(aes(x=Position,y=log2(Pos+1)), stat=\"identity\", color=\"black\", linewidth=1) +\n  #geom_vline(xintercept=644000, col=\"blue\",size=1) +\n  facet_grid(Sample~Chain,  space = \"free\", scales=\"free\")+theme_bw()+ylab(\"Log2(Counts)\")\n\n\n\n\n\nFigure 2. Per nucleotide absolute coverage of the filtered reads in each sample (log2 scale). Only 1M randomly-sampled positions per sample are shown.\n\n\n\n\nThe above plots are sampled to a max of 106 points, full plots are in the folder bamdash and can be accessed with the following links, as interactive plots and SVG images.\n\nBamdash coverage plots\n\n\nSample\nChromosome\npTT27 plasmid\n\n\n\n\nHB27\nReport - SVG\nReport - SVG\n\n\nHB27_rep\nReport - SVG\nReport - SVG\n\n\nPpol\nReport - SVG\nReport - SVG\n\n\nPpol_rep\nReport - SVG\nReport - SVG\n\n\n\nThe two replicates have a smaller range than the primary samples (mother and daughter), but we can still recognize two regions with a very high frequency of insertions in the reverse strand, located at positions 576,160 and 1,457,335 of the chromosome and almost overlapping in the four samples. These regions are not very clear in logarithmically scaled plots, but they caught our attention when we analyzed linearly scaled plots.\nWe have now decided to investigate these regions in more detail. The first hotspot corresponds to gene TT_C0593 (Figure 3), which encodes a 5-carboxymethyl-2-hydroxymuconate semialdehyde dehydrogenase, an oxidoreductase involved in tyrosine metabolism that may be dispensable in rich media. This target region corresponds to a GC track, the preferred sequence for Tn5 Green et al. (2012). However, as the coverage indicates multiple nearby integration sites, the high integration rate within TT_C0593 may indicate that this gene is not required rather than a transposase artifact.\n\n\nShow the code\ncov &lt;- ggplot(coverage[coverage$Position &gt; 570000 & coverage$Position &lt; 580000]) +  geom_bar(aes(x=Position,y=Neg * -1),color=\"red\", stat=\"identity\", linewidth=1) +\n  geom_bar(aes(x=Position,y=Pos),color=\"black\", stat=\"identity\",linewidth=1) +\n  facet_grid(Sample~Chain, space = \"free\", scales=\"free_y\")+theme_bw()+ylab(\"Counts\")\n\ncoding &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\n\ngenes &lt;- ggplot(coding[coding$V4 &gt; 570000 & coding$V4 &lt; 580000,], aes(xmin = V4, xmax = V5, y = V1, fill = substr(V9,9,16), label=substr(V9,9,16))) +\n  geom_gene_arrow() +\n  geom_gene_label(align = \"left\")+\n  theme_bw() +\n  geom_vline(xintercept =576160, linetype=\"dashed\",linewidth=1) +\n  scale_fill_brewer(palette = \"Set3\") +theme(legend.position=\"none\") + ylab(\"\") + scale_y_discrete(labels=\"Chr\") + scale_x_continuous(breaks = seq(570000, 580000, 2500))\n\nggarrange(cov, genes, \n          labels = c(\"A\", \"B\"), ncol=1,heights=c(3,1)\n         )\n\n\n\n\n\nFigure 3. TnSeq insertion hotspot (A) Detailed coverage (linear scale) in the region 570000-580000 of HB27 chromosome. (B) Annotated features in the detailed region. The vertical dashed line indicated the position of the highest coverage.\n\n\n\n\nThe second and more important hotspot (Figure 4) is located in an intergenic region between locus TT_C1532 (glucosamine-fructose-6-phosphate aminotransferase) and TT_C1533 (S-layer protein). The sequence in this site appears to be more diverse but also contains GC traces. However, since we will normalize the counts per gene based on the mapped reads in the coding regions (see below), this promiscuous site will not affect our analysis.\n\n\nShow the code\ncov &lt;- ggplot(coverage[coverage$Position &gt; 1445000 & coverage$Position &lt; 1458000]) +  geom_bar(aes(x=Position,y=Neg * -1),color=\"red\", stat=\"identity\", linewidth=1) +\n  geom_bar(aes(x=Position,y=Pos),color=\"black\", stat=\"identity\",linewidth=1) +\n  facet_grid(Sample~Chain, space = \"free\", scales=\"free_y\")+theme_bw()+ylab(\"Counts\")\n\ngenes &lt;- ggplot(coding[coding$V4 &gt; 1445000 & coding$V4 &lt; 1458000,], aes(xmin = V4, xmax = V5, y = V1, fill = substr(V9,9,16), label=substr(V9,9,16))) +\n  geom_gene_arrow() +\n  geom_gene_label(align = \"left\")+\n  theme_bw() +\n  geom_vline(xintercept =1457335, linetype=\"dashed\",linewidth=1) +\n  scale_fill_brewer(palette = \"Set3\") +theme(legend.position=\"none\") + ylab(\"\") + scale_y_discrete(labels=\"Chr\") + scale_x_continuous(breaks = seq(1444000, 1458000, 4000))\n\nggarrange(cov, genes, \n          labels = c(\"A\", \"B\"), ncol=1,heights=c(3,1)\n         )\n\n\n\n\n\nFigure 4. TnSeq insertion hotspot (A) Detailed coverage in the region 1445000-1458000 of HB27 chromosome. (B) Annotated features in the detailed region. The vertical dashed line indicated the position of the highest coverage."
  },
  {
    "objectID": "reads_processing.html#integration-score-per-gene",
    "href": "reads_processing.html#integration-score-per-gene",
    "title": "TnSeq Illumina Data Processing",
    "section": "Integration score per gene",
    "text": "Integration score per gene\n\nIntegration events counts and score\nNow we are going to transform the mapped reads into hits per gene, to obtain a normalized insertion score, by the following steps:\n\nWe only consider insertions within the middle 80% regions of genes, because insertions landing in the flanking sections of genes might give rise to truncated of chimeric proteins partially functional. The counts of Tn insertions will be obtained with FeatureCounts , implemented in the R package Rsubread.\nWe will normalize by the total number of mapped reads within the coding regions (80% central).\nWe will obtain a ratio of observed to expected Tn insertions.\nWe will make a log2-transformation in pseudocounts ($$log2(x+1)) to avoid negative scores.\n\nAll in all, our score will be obtained with the following formula:\n\\[\nScore = log_2 \\left( \\frac{count}{\\text{sample mapped reads} * \\frac{\\text{gen length} }{\\text{genome length}}} +1 \\right)\n\\]\nAdditionally, to minimize the inter-experiments differences, the final standard scores (Z-score) were centered and scaled using the R function scale().\nIn the following plots you can see the distribution of scores between samples.\n\n\nShow the code\n#gene table formatted with 80% central gene\nHB27_genome &lt;- read.table(\"00_raw/refs/GCA_000008125.1.gtf\",sep=\"\\t\",header=FALSE)\nHB27_genome$Chr &lt;- \"AE017221.1\"\nHB27_genome$Chr[8088:nrow(coding)] &lt;- \"AE017222.1\"\nHB27_genome$V9 &lt;-  substr(HB27_genome$V9,9,16)\nHB27_genome80 &lt;- HB27_genome\n\nHB27_genome80 &lt;- data.frame(HB27_genome80[,c(9,1,4,5,7)])\ncolnames(HB27_genome80) &lt;- c(\"GeneID\",\"Chr\",\"Start\",\"End\",\"Strand\")\nHB27_genome80$Start &lt;- HB27_genome80$Start + (HB27_genome80$End - HB27_genome80$Start) * 0.1\nHB27_genome80$End &lt;- HB27_genome80$End - (HB27_genome80$End - HB27_genome80$Start) * 0.1\n\n#map with FeatureCounts\nsamples &lt;- c(\"HB27\"=\"TNB03\", \"HB27_rep\"=\"TNB07\",\"ppol\"=\"TNB01\", \"ppol\"=\"TNB09\")\n\ndata &lt;- list()\nfor (i in 1:4){\n  data[[i]] &lt;- featureCounts(files=paste0(\"01_bowtie2/mapping_\",samples[i],\"_sorted.bam\"),annot.ext=na.omit(HB27_genome80),isGTFAnnotationFile=FALSE,isPairedEnd=FALSE,countMultiMappingReads=TRUE, allowMultiOverlap=TRUE, fraction = TRUE, ignoreDup = TRUE)\n  data[[i]]$counts &lt;- as.data.frame(data[[i]]$counts)\n  data[[i]]$counts$random &lt;- data[[i]]$stat[2][1,1] * (data[[i]]$annotation$Length / 2127482)\n  data[[i]]$counts$genes &lt;- row.names(data[[i]]$counts)\n  data[[i]]$counts$pseudocounts &lt;- log2(data[[i]]$counts[,1]/data[[i]]$counts[,2] + 1)\n  names(data[[i]]$counts) &lt;- c(\"Counts\",\"Random\",\"Genes\",\"Pseudocounts\")\n  data[[i]]$counts &lt;- data[[i]]$counts[,c(3,1,2,4)]\n}\n\n\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB03_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid58355 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB03_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 2192839                                              ||\n||    Successfully assigned alignments : 1880857 (85.8%)                      ||\n||    Running time : 0.02 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB07_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid58355 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB07_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 1099044                                              ||\n||    Successfully assigned alignments : 960432 (87.4%)                       ||\n||    Running time : 0.01 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB01_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid58355 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB01_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 539737                                               ||\n||    Successfully assigned alignments : 374026 (69.3%)                       ||\n||    Running time : 0.01 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ &lt;|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n       Rsubread 2.18.0\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                                                                            ||\n||                           mapping_TNB09_sorted.bam                         ||\n||                                                                            ||\n||              Paired-end : no                                               ||\n||        Count read pairs : no                                               ||\n||              Annotation : R data.frame                                     ||\n||      Dir for temp files : .                                                ||\n||                 Threads : 1                                                ||\n||                   Level : meta-feature level                               ||\n||      Multimapping reads : counted (fractional)                             ||\n|| Multi-overlapping reads : counted                                          ||\n||   Min overlapping bases : 1                                                ||\n||        Duplicated Reads : ignored                                          ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file .Rsubread_UserProvidedAnnotation_pid58355 ...         ||\n||    Features : 8999                                                         ||\n||    Meta-features : 2263                                                    ||\n||    Chromosomes/contigs : 2                                                 ||\n||                                                                            ||\n|| Process BAM file mapping_TNB09_sorted.bam...                               ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 1331276                                              ||\n||    Successfully assigned alignments : 1184920 (89.0%)                      ||\n||    Running time : 0.01 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n\\\\============================================================================//\n\n\nShow the code\ntnseq &lt;- data.frame(data[[1]]$counts,data[[2]]$counts[,2:4], data[[3]]$counts[,2:4],data[[4]]$counts[,2:4])\nnames(tnseq) &lt;- c(\"Genes\",\"Counts_HB27\",\"Random_HB27\",\"Score_HB27\",\"Counts_HB27_rep\",\"Random_HB27_rep\",\"Score_HB27_rep\",\"Counts_ppol\",\"Random_ppol\",\"Score_ppol\",\"Counts_ppol_rep\",\"Random_ppol_rep\",\"Score_ppol_rep\")\n#write.table(tnseq,\"tnseq_counts_scores.csv\",quote=FALSE,sep=\";\",row.names = FALSE)\nscores &lt;- as.data.frame(scale(tnseq[,c(4,7,10,13)]))\n#write.table(scores,\"scores80.csv\",row.names = TRUE,sep=\";\")\n\n\n#calculate 10-90% quantile\nq &lt;- data.frame(\n  ind = c(\"Score_HB27\",\"Score_HB27_rep\",\"Score_ppol\",\"Score_ppol_rep\"),\n  values= c(quantile(scores[,1],0.1, na.rm=TRUE),\n            quantile(scores[,2], 0.1, na.rm=TRUE), \n            quantile(scores[,3],0.1, na.rm=TRUE),\n            quantile(scores[,4], 0.1, na.rm=TRUE),\n            quantile(scores[,1],0.9, na.rm=TRUE),\n            quantile(scores[,2], 0.9, na.rm=TRUE), \n            quantile(scores[,3],0.9, na.rm=TRUE),\n            quantile(scores[,4], 0.9, na.rm=TRUE)\n            ))\n#plot distribution\nbox &lt;- ggplot(stack(scores), aes(x=ind, y=values)) + xlab(\"\") + \n  ylab(\"Score\")+\n  geom_boxplot(outlier.shape=8,outlier.size=3,aes(color=ind,fill=ind,alpha=0.8),\n               linewidth = 1)+theme_linedraw()+geom_jitter(alpha=0.1,aes(color=ind)) +\n # geom_point(data=q,aes(x=ind,y=values,fill=ind),shape=23,size=4) +\n  theme(axis.text.x = element_text(face=\"bold\", vjust=1))+\n  theme(legend.position = \"none\") + scale_color_brewer(palette=\"Paired\")+\n  scale_fill_brewer(palette=\"Paired\")\n\n#correlation\nwt &lt;- ggplot(data = scores, aes(x=Score_HB27,y=Score_HB27_rep))+geom_point(size=3,alpha=0.6, color=\"#1F78B4\") +  theme_linedraw() + ylim(0,7) +\n  xlab(\"HB27\") + ylab(\"HB27_rep\") + stat_poly_line(color=\"#1F78B4\",fill=\"#1F78B4\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nppol &lt;- ggplot(data = scores, aes(x=Score_ppol,y=Score_ppol_rep))+geom_point(size=3,alpha=0.6, color=\"#33A02C\")  + theme_linedraw() + ylim(0,7) +\n  xlab(\"ppol\") + ylab(\"ppol_rep\") +  stat_poly_line(color=\"#33A02C\",fill=\"#33A02C\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\nggarrange(box, wt, ppol,\n          labels = c(\"A\", \"B\",\"C\"), ncol=1\n         )\n\n\nWarning: Removed 1484 rows containing non-finite outside the scale range\n(`stat_poly_line()`).\n\n\nWarning: Removed 1484 rows containing non-finite outside the scale range\n(`stat_poly_eq()`).\n\n\nWarning: Removed 1484 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 1329 rows containing non-finite outside the scale range\n(`stat_poly_line()`).\n\n\nWarning: Removed 1329 rows containing non-finite outside the scale range\n(`stat_poly_eq()`).\n\n\nWarning: Removed 1329 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nFigure 5. Tn insertion scores per gene. (A) Boxplot of gene scores per sample. (B) Correlation of scores per gene and sample.\n\n\n\n\nAs we can see, the correlation between both PPOL samples is only moderate, in agreement with a clear difference in the original sample. This can be also seen in the PCA plot below, in which the Ppolrep (TNB09) sample contains around 20% variability.\n\n\nShow the code\ntnseq.pca &lt;- prcomp(tnseq[,c(4,7,10,13)], \n                   center = TRUE, \n                   scale. = TRUE) \nbiplot(tnseq.pca) \n\n\n\n\n\nFigure 6. Samples PCA plot.\n\n\n\n\n\n\n\n\n\n\nShould we rule out the ppol mother replicate sample?\n\n\n\nThis sample contains 20% of the total data variance. Therefore, it will hinder the analysis of gene essentiality and probably lead to false negative results. However, we decided to keep it as its inherent divergence will also strengthen our results.\n\n\nIn order to analyze in detail the difference between samples, we construct also an interactive plot. Put your mouse pointer over any point and you will see the Score and the Gene.\n\n\nShow the code\nscores$mean &lt;- apply(scores, 1, mean)\nkk &lt;- cbind(tnseq$Genes,scores$mean,stack(scores))\ndis &lt;- ggplot(data=kk) +\n  geom_point(aes(x=reorder(`tnseq$Genes`,`scores$mean`,decreasing=TRUE),y=values,color=ind), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\nShow the code\nggplotly(dis)\n\n\n\n\nFigure 7. Comparison of Tn insertion Z-scores per gene. Values were sorted by the average of all samples.\n\n\n\nClick for Session Information\n\n\n\n\n\n\n\n\nShow the code\n#from https://github.com/holtzy/quarto-tricks\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggpmisc_0.5.6       ggpp_0.5.7          plotly_4.10.4      \n [4] details_0.3.0       ggpubr_0.6.0        lubridate_1.9.3    \n [7] forcats_1.0.0       stringr_1.5.1       purrr_1.0.2        \n[10] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[13] tidyverse_2.0.0     dplyr_1.1.4         Rsubread_2.18.0    \n[16] gggenes_0.5.1       kableExtra_1.4.0    data.table_1.15.4  \n[19] ggplot2_3.5.1       formatR_1.14        knitr_1.47         \n[22] BiocManager_1.30.23\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   viridisLite_0.4.2  farver_2.1.2       R.utils_2.12.3    \n [5] fastmap_1.2.0      lazyeval_0.2.2     digest_0.6.35      timechange_0.3.0  \n [9] lifecycle_1.0.4    survival_3.7-0     magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.4        tools_4.4.0        utf8_1.2.4         yaml_2.3.8        \n[17] ggsignif_0.6.4     labeling_0.4.3     htmlwidgets_1.6.4  xml2_1.3.6        \n[21] RColorBrewer_1.1-3 abind_1.4-5        withr_3.0.0        R.oo_1.26.0       \n[25] desc_1.4.3         grid_4.4.0         fansi_1.0.6        colorspace_2.1-0  \n[29] scales_1.3.0       MASS_7.3-61        cli_3.6.2          rmarkdown_2.27    \n[33] generics_0.1.3     rstudioapi_0.16.0  httr_1.4.7         tzdb_0.4.0        \n[37] polynom_1.4-1      splines_4.4.0      vctrs_0.6.5        Matrix_1.7-0      \n[41] jsonlite_1.8.8     carData_3.0-5      SparseM_1.83       confintr_1.0.2    \n[45] car_3.1-2          hms_1.1.3          rstatix_0.7.2      crosstalk_1.2.1   \n[49] systemfonts_1.1.0  clipr_0.8.0        glue_1.7.0         cowplot_1.1.3     \n[53] stringi_1.8.4      gtable_0.3.5       munsell_0.5.1      pillar_1.9.0      \n[57] htmltools_0.5.8.1  quantreg_5.98      ggfittext_0.10.2   R6_2.5.1          \n[61] evaluate_0.24.0    lattice_0.22-6     highr_0.11         R.methodsS3_1.8.2 \n[65] png_0.1-8          backports_1.5.0    broom_1.0.6        MatrixModels_0.5-3\n[69] svglite_2.1.3      gridExtra_2.3      xfun_0.45          pkgconfig_2.0.3"
  },
  {
    "objectID": "genes_classification.html",
    "href": "genes_classification.html",
    "title": "TnSeq Genes classification",
    "section": "",
    "text": "First, let’s check the density plots, to see how the data are grouped.\n\n\nShow the code\n#read data\nscores &lt;- read.csv2(\"scores80.csv\")\nscores &lt;- cbind(rownames(scores),scores[,1:4])\nnames(scores) &lt;- c(\"Genes\",\"HB27\",\"HB27_rep\",\"Ppol\",\"Ppol_rep\")\nscores[,2:5] &lt;- lapply(scores[,2:5],as.numeric)\nscores$mean &lt;- apply(scores[,2:5], 1, mean)\n#density plot\nggplot(data=stack(scores[,2:6]))+geom_density(aes(x=as.numeric(values),fill=ind,color=ind, alpha=0.2))+\n    scale_color_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n  scale_fill_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n    geom_vline(aes(xintercept=-0.6), color=\"grey\", linetype=\"dashed\")+\n    geom_vline(aes(xintercept=1),\n                   color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") +\n  theme_bw()\n\n\n\n\n\nFigure 8. Density plot of Z-scores.\n\n\n\n\nIn agreement with Figure 6, we can see that most of the genes are grouped at a Z-score &lt;0, with a peak about -0.5 (grey line) and a shoulder centered at 1 (orange line). That suggest that most genes have a low number of insertions and there is a gradient of genes up to a very high number of insertions. Thus, as there is no inflection point, we confirm that there are no clear groups of essential/no essential genes.\nIn order to classify the genes we are going to perform unsupervised cluster analysis. First, we will test the number of clusters that allow us to better classify the genes.\n\n\nShow the code\n#wss o silhoutte?\nwss &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"wss\" , linecolor = \"darkblue\") + labs(title= \"Elbow (WSS)\") \nsi &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"silhouette\", linecolor = \"darkblue\")+ labs(title= \"SILHOUETTE\") \n\n#kmeans, pam \npam &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = cluster::pam, method = \"silhouette\", k.max = 10) + labs(title= \"PAM clustering\") \nk &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = kmeans, method = \"silhouette\", k.max = 10) + labs(title= \"K-means clustering\")\n\n\n\nggarrange(wss, si, pam,k,\n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 9. Determination of best number of clusters for the TnSeq data, using the elbow (A) or silhouette (B) method. Panels (C) and (D) show the number of clusters by PAM and K-means, respectively.)\n\n\n\n\nNow, we will compare the clustering method, using K-means and PAM\n\n\nShow the code\n#kmeans\nkmclust2 &lt;- eclust(scores[,2:5], k=2, FUNcluster=\"kmeans\", hc_metric=\"manhattan\",graph=F)\nk1 &lt;- fviz_cluster(object = kmclust2, data = datos, ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"Kmeans clustering\") +\n  theme(legend.position = \"none\")\n\nk2 &lt;- fviz_silhouette(kmclust2, palette=\"jco\")+  theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  480          0.33\n2       2 1783          0.68\n\n\nShow the code\n#pams\nset.seed(123)\npam_clusters &lt;- pam(x= scores[,2:5], k=2, metric = \"manhattan\")\n\n\n#visualization\np1 &lt;- fviz_cluster(object = pam_clusters, data = scores[,2:5], ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"PAM clustering\") +\n  theme(legend.position = \"none\")\n\n\np2 &lt;- fviz_silhouette(pam_clusters, palette=\"jco\")+    theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  584          0.30\n2       2 1679          0.73\n\n\nShow the code\nggarrange(k1, k2, p1,p2,\n          labels = c(\"A\", \"\",\"B\",\"\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 10. Comparison of clustering method. Cluster results and silhouette plots for K-Means (A) and PAM (B) clustering method is shown.\n\n\n\n\nThe Kmeans clustering is slightly better as its clusters area are closer to the silhouette mean, thus we will keep this clusters and name them as “Highly permissive” and “Intermediate” genes. The first group contains the genes with higher Z-score mean and the second large group contains the genes with less insertions. To highlight the top genes with less insertions, we empirically select the ~5% genes with less insertions as “Less permissive” genes, corresponding to 301 genes with a Z-score &lt; -0.55. The following contain the genes Z-score and classification.\n\n\nShow the code\n#full table\n#subset the ~5% genes with less insertions\ndatos.j = cbind(scores, cluster= kmclust2$cluster)\n#how many?\n#nrow(datos.j[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55) ,])\n\ndatos.j$cluster[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55)] &lt;- 3\ndatos.j$cluster &lt;- as.factor(datos.j$cluster)\n\ndatos.j &lt;- datos.j %&gt;% \n    mutate(across(c('HB27', 'HB27_rep',\"Ppol\",\"Ppol_rep\",\"mean\"), round, 3)) %&gt;% \nmutate(cluster = case_when(cluster == 1 ~ \"Highly permissive\", cluster == 2 ~ \"Intermediate\",cluster==3 ~ \"Less permissive\")) \n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\nShow the code\ndatatable(datos.j,rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\n\n\n\n\n\n\nLet’s see how are the groups in each sample. Note that the genes are ordered by their mean score.\n\n\nShow the code\ntmp &lt;- cbind(stack(datos.j[,2:5]),datos.j[,6:7])\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\nggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=cluster), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\nFigure 11. Plot of Tn insertion Z-scores per gene and group. Values were sorted by the average of all samples.\n\n\n\n\n\n\n\nAlthough there is overall no differences between strains, we are going to check in detail if there is any gene with statistically significant more/less Tn insertions.\n\n\nShow the code\n#meethod from https://lashlock.github.io/compbio/R_presentation.html\n#we need to use raw counts as integers, no Z-scores\ncountData &lt;- read.csv('tnseq_counts_scores.csv', header = TRUE, sep = \";\")\ncountData &lt;- countData[,c(1,2,5,8,11)]\ncountData[,2:5] &lt;- lapply(countData[,2:5], as.integer)\nhead(countData)\n\n\n     Genes Counts_HB27 Counts_HB27_rep Counts_ppol Counts_ppol_rep\n1 TT_C0001         922             497         152             964\n2 TT_C0002          33               8           7               1\n3 TT_C0003          47              21           6               0\n4 TT_C0004         299             311         112            1201\n5 TT_C0005         292             391         185             364\n6 TT_C0006          89              58          54             342\n\n\nShow the code\nmetaData &lt;- data.frame(names(countData[,2:5]),c(\"HB27\",\"HB27\",\"Ppol\",\"Ppol\"),c(\"Exp1\",\"Exp2\",\"Exp1\",\"Exp2\"))\n\nnames(metaData) &lt;- c(\"Sample\",\"Strain\",\"Experiment\")\n\ndds &lt;- DESeqDataSetFromMatrix(countData=countData, \n                              colData=metaData, \n                              design=~Strain, tidy = TRUE)\n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nShow the code\ndds &lt;- DESeq(dds)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\nShow the code\nres &lt;- results(dds)\n\nres &lt;- res[order(res$padj),]\n\nres$diffexpressed &lt;- \"NO\"\nres$diffexpressed[res$log2FoldChange &gt; 2 & res$padj &lt; 0.01] &lt;- \"UP\"\nres$diffexpressed[res$log2FoldChange &lt; -2 & res$padj &lt; 0.01] &lt;- \"DOWN\"\n\nlibrary(ggrepel)\n# plot adding up all layers we have seen so far\nggplot(data=res, aes(x=log2FoldChange, y=-log10(padj), col=diffexpressed, label=row.names(res))) +\n        geom_point() + \n        theme_minimal() +\n        geom_text_repel() +\n        scale_color_manual(values=c(\"blue\", \"black\", \"red\")) +\n        geom_vline(xintercept=c(-2, 2), col=\"red\") +\n        geom_hline(yintercept=-log10(0.01), col=\"red\")\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\nWarning: ggrepel: 1537 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nFigure 12. Volcano plot of differential Tn5 target genes in HB27 vs. Ppol strains (fold change &gt;4, p.adj&lt;0.01).\n\n\n\n\nAs we can see there are very few genes different between samples. The genes with less insertions in the wt HB27 than in Ppol strain are TT_C1170 (CRISPR associated protein), TT_C1360 (DNA-binding response regulator MtrA) and TT_C1263 (Metalloenzyme), and the genes with more insertions are TT_C0560 (Phosphopantetheine adenylyltransferase), TT_C0409 (SufE protein probably involved in Fe-S center assembly), TT_C0135 (Phenylacetate-coenzyme A ligase), TT_C1310 (50S ribosomal protein L30), and TT_C1600 (Inorganic pyrophosphatase)."
  },
  {
    "objectID": "genes_classification.html#classification-of-genes-by-z-scores",
    "href": "genes_classification.html#classification-of-genes-by-z-scores",
    "title": "TnSeq Genes classification",
    "section": "",
    "text": "First, let’s check the density plots, to see how the data are grouped.\n\n\nShow the code\n#read data\nscores &lt;- read.csv2(\"scores80.csv\")\nscores &lt;- cbind(rownames(scores),scores[,1:4])\nnames(scores) &lt;- c(\"Genes\",\"HB27\",\"HB27_rep\",\"Ppol\",\"Ppol_rep\")\nscores[,2:5] &lt;- lapply(scores[,2:5],as.numeric)\nscores$mean &lt;- apply(scores[,2:5], 1, mean)\n#density plot\nggplot(data=stack(scores[,2:6]))+geom_density(aes(x=as.numeric(values),fill=ind,color=ind, alpha=0.2))+\n    scale_color_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n  scale_fill_manual(values=c(\"blue\",\"cornflowerblue\",\"red\",\"coral3\",\"black\")) +\n    geom_vline(aes(xintercept=-0.6), color=\"grey\", linetype=\"dashed\")+\n    geom_vline(aes(xintercept=1),\n                   color=\"orange\", linetype=\"dashed\") + xlab(\"Z-scores\") +\n  theme_bw()\n\n\n\n\n\nFigure 8. Density plot of Z-scores.\n\n\n\n\nIn agreement with Figure 6, we can see that most of the genes are grouped at a Z-score &lt;0, with a peak about -0.5 (grey line) and a shoulder centered at 1 (orange line). That suggest that most genes have a low number of insertions and there is a gradient of genes up to a very high number of insertions. Thus, as there is no inflection point, we confirm that there are no clear groups of essential/no essential genes.\nIn order to classify the genes we are going to perform unsupervised cluster analysis. First, we will test the number of clusters that allow us to better classify the genes.\n\n\nShow the code\n#wss o silhoutte?\nwss &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"wss\" , linecolor = \"darkblue\") + labs(title= \"Elbow (WSS)\") \nsi &lt;- fviz_nbclust(scores[,2:5], FUN = hcut, method = \"silhouette\", linecolor = \"darkblue\")+ labs(title= \"SILHOUETTE\") \n\n#kmeans, pam \npam &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = cluster::pam, method = \"silhouette\", k.max = 10) + labs(title= \"PAM clustering\") \nk &lt;- fviz_nbclust(x = scores[,2:5], FUNcluster = kmeans, method = \"silhouette\", k.max = 10) + labs(title= \"K-means clustering\")\n\n\n\nggarrange(wss, si, pam,k,\n          labels = c(\"A\", \"B\",\"C\",\"D\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 9. Determination of best number of clusters for the TnSeq data, using the elbow (A) or silhouette (B) method. Panels (C) and (D) show the number of clusters by PAM and K-means, respectively.)\n\n\n\n\nNow, we will compare the clustering method, using K-means and PAM\n\n\nShow the code\n#kmeans\nkmclust2 &lt;- eclust(scores[,2:5], k=2, FUNcluster=\"kmeans\", hc_metric=\"manhattan\",graph=F)\nk1 &lt;- fviz_cluster(object = kmclust2, data = datos, ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"Kmeans clustering\") +\n  theme(legend.position = \"none\")\n\nk2 &lt;- fviz_silhouette(kmclust2, palette=\"jco\")+  theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  480          0.33\n2       2 1783          0.68\n\n\nShow the code\n#pams\nset.seed(123)\npam_clusters &lt;- pam(x= scores[,2:5], k=2, metric = \"manhattan\")\n\n\n#visualization\np1 &lt;- fviz_cluster(object = pam_clusters, data = scores[,2:5], ellipse.type = \"t\",labelsize = 0,\n             repel = FALSE) +\n  theme_bw() +\n  labs(title = \"PAM clustering\") +\n  theme(legend.position = \"none\")\n\n\np2 &lt;- fviz_silhouette(pam_clusters, palette=\"jco\")+    theme(\n  panel.background = element_rect(fill = \"white\"))\n\n\n  cluster size ave.sil.width\n1       1  584          0.30\n2       2 1679          0.73\n\n\nShow the code\nggarrange(k1, k2, p1,p2,\n          labels = c(\"A\", \"\",\"B\",\"\"), ncol=2,nrow = 2)\n\n\n\n\n\nFigure 10. Comparison of clustering method. Cluster results and silhouette plots for K-Means (A) and PAM (B) clustering method is shown.\n\n\n\n\nThe Kmeans clustering is slightly better as its clusters area are closer to the silhouette mean, thus we will keep this clusters and name them as “Highly permissive” and “Intermediate” genes. The first group contains the genes with higher Z-score mean and the second large group contains the genes with less insertions. To highlight the top genes with less insertions, we empirically select the ~5% genes with less insertions as “Less permissive” genes, corresponding to 301 genes with a Z-score &lt; -0.55. The following contain the genes Z-score and classification.\n\n\nShow the code\n#full table\n#subset the ~5% genes with less insertions\ndatos.j = cbind(scores, cluster= kmclust2$cluster)\n#how many?\n#nrow(datos.j[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55) ,])\n\ndatos.j$cluster[datos.j$HB27&lt;(-0.55) & datos.j$HB27_rep&lt;(-0.55)  & datos.j$Ppol&lt;(-0.55)  & datos.j$Ppol_rep&lt;(-0.55)] &lt;- 3\ndatos.j$cluster &lt;- as.factor(datos.j$cluster)\n\ndatos.j &lt;- datos.j %&gt;% \n    mutate(across(c('HB27', 'HB27_rep',\"Ppol\",\"Ppol_rep\",\"mean\"), round, 3)) %&gt;% \nmutate(cluster = case_when(cluster == 1 ~ \"Highly permissive\", cluster == 2 ~ \"Intermediate\",cluster==3 ~ \"Less permissive\")) \n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\nShow the code\ndatatable(datos.j,rownames = FALSE,  escape = FALSE, filter=\"top\", extensions = 'Responsive',options = list( pageLength = 25, autoWidth = TRUE ))\n\n\n\n\n\n\n\n\nLet’s see how are the groups in each sample. Note that the genes are ordered by their mean score.\n\n\nShow the code\ntmp &lt;- cbind(stack(datos.j[,2:5]),datos.j[,6:7])\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\nggplot(data=tmp) +\n  geom_point(aes(x=reorder(1:nrow(tmp),tmp[,3],decreasing=TRUE),y=values,color=cluster), alpha=0.7)+\n  theme_classic() +\n  scale_x_discrete(expand = c(0.01, 0)) + \n  theme(axis.text.x = element_blank(),axis.text.y=element_text(size=12,face=\"bold\")) +\n  ylab(\"Z-Score (log2)\") + xlab(\"Gene\") + facet_grid(~tmp[,2]) +\n  scale_color_brewer(palette=\"Paired\") + theme(legend.position = c(0.9, 0.7)) +\n  labs(color=\"\")\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\nFigure 11. Plot of Tn insertion Z-scores per gene and group. Values were sorted by the average of all samples.\n\n\n\n\n\n\n\nAlthough there is overall no differences between strains, we are going to check in detail if there is any gene with statistically significant more/less Tn insertions.\n\n\nShow the code\n#meethod from https://lashlock.github.io/compbio/R_presentation.html\n#we need to use raw counts as integers, no Z-scores\ncountData &lt;- read.csv('tnseq_counts_scores.csv', header = TRUE, sep = \";\")\ncountData &lt;- countData[,c(1,2,5,8,11)]\ncountData[,2:5] &lt;- lapply(countData[,2:5], as.integer)\nhead(countData)\n\n\n     Genes Counts_HB27 Counts_HB27_rep Counts_ppol Counts_ppol_rep\n1 TT_C0001         922             497         152             964\n2 TT_C0002          33               8           7               1\n3 TT_C0003          47              21           6               0\n4 TT_C0004         299             311         112            1201\n5 TT_C0005         292             391         185             364\n6 TT_C0006          89              58          54             342\n\n\nShow the code\nmetaData &lt;- data.frame(names(countData[,2:5]),c(\"HB27\",\"HB27\",\"Ppol\",\"Ppol\"),c(\"Exp1\",\"Exp2\",\"Exp1\",\"Exp2\"))\n\nnames(metaData) &lt;- c(\"Sample\",\"Strain\",\"Experiment\")\n\ndds &lt;- DESeqDataSetFromMatrix(countData=countData, \n                              colData=metaData, \n                              design=~Strain, tidy = TRUE)\n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nShow the code\ndds &lt;- DESeq(dds)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\nShow the code\nres &lt;- results(dds)\n\nres &lt;- res[order(res$padj),]\n\nres$diffexpressed &lt;- \"NO\"\nres$diffexpressed[res$log2FoldChange &gt; 2 & res$padj &lt; 0.01] &lt;- \"UP\"\nres$diffexpressed[res$log2FoldChange &lt; -2 & res$padj &lt; 0.01] &lt;- \"DOWN\"\n\nlibrary(ggrepel)\n# plot adding up all layers we have seen so far\nggplot(data=res, aes(x=log2FoldChange, y=-log10(padj), col=diffexpressed, label=row.names(res))) +\n        geom_point() + \n        theme_minimal() +\n        geom_text_repel() +\n        scale_color_manual(values=c(\"blue\", \"black\", \"red\")) +\n        geom_vline(xintercept=c(-2, 2), col=\"red\") +\n        geom_hline(yintercept=-log10(0.01), col=\"red\")\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 704 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\nWarning: ggrepel: 1537 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nFigure 12. Volcano plot of differential Tn5 target genes in HB27 vs. Ppol strains (fold change &gt;4, p.adj&lt;0.01).\n\n\n\n\nAs we can see there are very few genes different between samples. The genes with less insertions in the wt HB27 than in Ppol strain are TT_C1170 (CRISPR associated protein), TT_C1360 (DNA-binding response regulator MtrA) and TT_C1263 (Metalloenzyme), and the genes with more insertions are TT_C0560 (Phosphopantetheine adenylyltransferase), TT_C0409 (SufE protein probably involved in Fe-S center assembly), TT_C0135 (Phenylacetate-coenzyme A ligase), TT_C1310 (50S ribosomal protein L30), and TT_C1600 (Inorganic pyrophosphatase)."
  },
  {
    "objectID": "genes_classification.html#genes-functional-classification",
    "href": "genes_classification.html#genes-functional-classification",
    "title": "TnSeq Genes classification",
    "section": "Genes functional classification",
    "text": "Genes functional classification\n\nCOG\n\n\nShow the code\nnog &lt;- read_xlsx(\"00_raw/refs/MM_x4qgl_mt.emapper.annotations.xlsx\",sheet=1,skip=2)\nnog$seed_ortholog &lt;- gsub(\"262724.\",\"\",nog$seed_ortholog)\nnames(nog)[2] &lt;- \"Genes\"\n\n\nAfter calculating the Z-scores, we are going to group the genes by their functions, using COG and KEGG functional categories. Functional annotation was obtained at EggNog mapper website Cantalapiedra et al. (2021). We could annotate 2006 (92.4%) of the HB27 proteins.\n\n\nShow the code\n#load COG list\ncog &lt;- read.table(\"scripts/cog_list.csv\",sep=\";\",header=TRUE)\ncog &lt;- cog[-26,]\n\n#summarize and split categories\ncategories &lt;- c()\nfor (i in 1:nrow(cog)){\n  categories &lt;- grep(cog$category[i],nog$COG_category)\n  cog$sum[i] &lt;- length(categories)\n}\n\n#plot freqs\nggplot(cog,aes(y=as.numeric(sum), x=definition,color=group,fill=group)) + \n    geom_bar(stat=\"identity\", position=\"stack\", alpha=0.8) + ylab(\"Number of genes\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 500, by = 100))+\n  theme_classic() + theme(text=element_text(size=15),legend.text=element_text(size=9))\n\n\n\n\n\nFigure 13. COG groups annotated in HB27 genes\n\n\n\n\nAfter the incorporation of COG and KEGG annotations, the final TnSeq table is exported as tnSeq_full_27may.csv.\n\n\nShow the code\n#merge\nfinal &lt;- merge(datos.j,nog[,c(2,7,8,12)], all.x=TRUE)\n\nfinal$COG_category &lt;- final$COG_category %&gt;% replace_na('-')\nfor (i in 1:nrow(final)){\n  if (final$COG_category[i]!='-'){\n      final$COG_group[i] &lt;- cog$group[cog$category == substr(final$COG_category,1,1)[i]]  } else{\n        final$COG_group[i]=='-'\n    }\n}\nfinal$COG_group &lt;- as.factor(final$COG_group)\n\n#add Mario gene annotation\nmario &lt;- readxl::read_excel(\"00_raw/refs/HB8_HB27_final.xlsx\")\n\n\nNew names:\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n• `` -&gt; `...10`\n• `` -&gt; `...11`\n\n\nShow the code\nmario &lt;- subset(mario,!is.na(mario$HB27))\nmario &lt;- mario[,c(7,4,3,6,5,2)]\ncolnames(mario) &lt;- c(\"Genes\",\"Genes_HB8\",\"locus_tag\",\"name\",\"Description\",\"aa\")\nfinal &lt;- merge(final,mario,by=\"Genes\", all.x=TRUE)\nfinal$mean &lt;- apply(final[,2:5],1,mean)\nfinal$sd &lt;- apply(final[,2:5],1,sd)\nfinal &lt;- final[,c(1:5,16,17,6:15)]\nfinal[grep(\"tRNA-\",final$name),9] &lt;- \"J\"\nfinal[grep(\"tRNA-\",final$name),11] &lt;- \"ko:K14228\"\nfinal[grep(\"rRNA\",final$name),11] &lt;- \"ko:K01980\"\nfinal &lt;- final %&gt;% replace(is.na(.), '-')\nwrite.table(final,\"tnSeq_full.csv\", sep=\";\", row.names=FALSE)\n\n#correlation\nwt &lt;- ggplot(data = final, aes(x=HB27,y=HB27_rep,color=COG_group))+geom_point(size=3,alpha=0.6) +  theme_linedraw() + \n  xlab(\"HB27\") + ylab(\"HB27_rep\") + stat_poly_line(color=\"#1F78B4\",fill=\"#1F78B4\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) +guides(color = guide_legend(nrow = 2))\n\n\nppol &lt;- ggplot(data = final, aes(x=Ppol,y=Ppol_rep,color=COG_group))+geom_point(size=3,alpha=0.6)  + theme_linedraw() +\n  xlab(\"ppol\") + ylab(\"ppol_rep\") +  stat_poly_line(color=\"#33A02C\",fill=\"#33A02C\") +\n  stat_poly_eq(use_label(c(\"adj.R2\", \"p\"))) \n\n\nggarrange(wt, ppol,\n          labels = c(\"A\", \"B\"), ncol=1,common.legend = TRUE,legend=\"bottom\")\n\n\n\n\n\nFigure 14. Tn insertion scores per gene. Correlation between samples in WT (A) and Ppol (B) strains. Genes are colored by COG group\n\n\n\n\nThere seems to be no clear correlation between the gene function and the COG functional groups.\nNow, we are going to plot the genes by groups and COG\n\n\nShow the code\nstats &lt;- as.data.frame(table(final$COG_category,final$cluster))\ncategories &lt;- c()\nfor (i in 1:nrow(cog)){\n  categories &lt;- grep(cog$category[i],stats$Var1)\n  categories_D &lt;- subset(stats[categories,], Var2==\"Highly permissive\")\n  categories_R &lt;- subset(stats[categories,], Var2==\"Intermediate\")\n  categories_T &lt;- subset(stats[categories,], Var2==\"Less permissive\")\n  cog$Less_permissive[i] &lt;- sum(categories_D$Freq)\n  cog$Intermediate[i] &lt;- sum(categories_R$Freq)\n  cog$Highly_permissive[i] &lt;- sum(categories_T$Freq)\n}\ncog2 &lt;- cbind(cog[,1:3],stack(cog[,5:7]))\n\n\nWarning in data.frame(..., check.names = FALSE): row names were found from a\nshort variable and have been discarded\n\n\nShow the code\ncog2 &lt;- cog2 %&gt;% replace(is.na(.), 0)\nfor (i in 1:nrow(cog2)){\n  cog2$ratio[i] &lt;- cog2$values[i]*100/sum(cog2$values[cog2$category==cog2$category[i]])\n}\n\n\n\n#plot \nggplot(cog2[!cog2$values==0,],aes(y=ratio, x=definition, group=ind, fill=ind)) + \n    geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\", alpha=0.8) + ylab(\"Gene category (%)\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 100, by = 10)) +   theme_bw() + theme(text=element_text(size=15))#+\n\n\n\n\n\nFigure 15. Distribution of gene groups by COG functions\n\n\n\n\n\n\nShow the code\nggplot(cog2[!cog2$values==0 & cog2$ind==\"Less_permissive\",],aes(y=ratio, x=definition, group=ind)) + \n     geom_bar(stat=\"identity\", position=\"stack\", fill=\"steelblue\", alpha=0.8) + ylab(\"Gene category (%)\") + xlab(\"\") + coord_flip() + scale_y_continuous(breaks = seq(0, 100, by = 10)) +   theme_bw() + theme(text=element_text(size=15))\n\n\n\n\n\nFigure 16. Distribution of COG functions in Less permissive genes\n\n\n\n\n\n\nKEGG\nKEGG were parsed with the script parse_ko.R. EggNog mapper could assign KEGG Ontology (KO) group to 1352 (62.28%) of the HB27 proteins. After revision of the KO annotation, we manually incorporated several missing tRNA genes to improve the statistics, using K14228 (tRNA-leu).\n\n\nShow the code\nxkegg &lt;- read.csv2(\"xkegg.txt\")\n\nxkegg$ratio_b &lt;- as.numeric(xkegg$ratio_b)\n\nxkegg$a_class &lt;- as.factor(xkegg$a_class)\nxkegg$b_class &lt;- as.factor(xkegg$b_class)\nxkegg$ind &lt;- factor(xkegg$ind,levels=c(\"Less permissive\",\"Intermediate\",\"Highly permissive\"))\n\n#plot main kegg categories\n#ggplot(xkegg,aes(y=ratio_b, x=b_class, group=factor(ind), fill=ind)) +   geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\",linewidth=0.2, alpha=0.7) + ylab(\"KO group (%)\") + xlab(\"\") + theme_bw() + theme(text=element_text(size=15), axis.text.x = element_text( angle = 45,  hjust = 1, size = 12),plot.margin =margin(l=100,b=10,t=5,r=5) )   + facet_grid(~factor(a_class),scales=\"free\",space=\"free\",drop=TRUE,labeller = as_labeller(factor(xkegg$a_class), default=label_wrap_gen(14)))\n\n#detailed kegg plot\nggplot(xkegg, aes(y=Freq, x=pathway, group=ind, fill=ind)) + \n     geom_bar(stat=\"identity\", position=\"stack\",color=\"grey40\",linewidth=0.2, alpha=0.7) + ylab(\"KO group members\") + xlab(\"\") + theme_bw() + theme(text=element_text(size=15), axis.text.x = element_text( angle = 45,  hjust = 1, size = 12),plot.margin =margin(l=100,b=10,t=5,r=5) )  +\n     facet_wrap(~a_class+b_class,scales=\"free\",drop=TRUE,ncol=3, labeller = label_wrap_gen(30))  + theme(legend.position = \"none\")\n\n\n\n\n\nFigure 17. Ratio of Highly permissive (blue), Intermediate (green) and Less permissive (red) genes in each KEGG Ontology group\n\n\n\n\n\nKEGG Ontology groups with more Less permissive genes\nNow we, will plot only the “Less permissive” genes.\n\n\nShow the code\nggplot(xkegg[xkegg$ind==\"Less permissive\",], aes(y=Freq, x=pathway, group=ind)) +     geom_bar(stat=\"identity\", position=\"stack\",linewidth=0.2, alpha=0.7, fill=\"steelblue\") + ylab(\"KO group members\") + xlab(\"\") + theme_bw()+ theme(text=element_text(size=15),plot.margin =margin(l=100,b=10,t=5,r=5) ) + coord_flip()\n\n\n\n\n\nFigure 18. KEGG ontology categories for Less permissive genes\n\n\n\n\nNon coding RNAs/RNA biosynthesis and Ribosome proteins are the categories with more Less permissive genes, but other categories, such as Transporters or Oxidative phosphorilation, seem particularly reluctant to accumulate insertions.\n\n\n\nKEGG pathways\n\n\nShow the code\nrepli &lt;- nog$Genes[grep(\"map03030\",nog$KEGG_Pathway)]\nrepli &lt;- datos.j[datos.j$Genes %in% repli,]\nrepli_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03030/\",paste0(repli[repli$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\n\nber &lt;- nog$Genes[grep(\"map03410\",nog$KEGG_Pathway)]\nber &lt;- datos.j[datos.j$Genes %in% ber,]\nber_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03410/\",paste0(ber[ber$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nner &lt;- nog$Genes[grep(\"map03420\",nog$KEGG_Pathway)]\nner &lt;- datos.j[datos.j$Genes %in% ner,]\nner_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03420/\",paste0(ner[ner$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nmmr &lt;- nog$Genes[grep(\"map03430\",nog$KEGG_Pathway)]\nmmr &lt;- datos.j[datos.j$Genes %in% mmr,]\nmmr_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03430/\",paste0(mmr[mmr$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\nhr &lt;- nog$Genes[grep(\"map03440\",nog$KEGG_Pathway)]\nhr &lt;- datos.j[datos.j$Genes %in% hr,]\nhr_link &lt;- paste0(\"https://www.kegg.jp/kegg-bin/show_pathway?tth03430/\",paste0(hr[hr$cluster!=\"Highly permissive\",1],collapse=\"/\"))\n\n\nAs an example, you can see the HB27 DNA replication & repair pathways in the following links: Replication, BER, NER, MMR, and HR. The genes with orthologs in HB27 are depicted with green background and the Intermediate/Less permissive genes are highlighted in red.\n\n\nEnrichment analysis\n\n\nShow the code\ntt &lt;- search_kegg_organism('Thermus thermophilus', by='scientific_name')\nkk &lt;- enrichKEGG(gene         = datos.j[datos.j$cluster==\"Less permissive\",1],\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/tth/pathway\"...\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/tth\"...\n\n\nShow the code\np1 &lt;- dotplot(kk, title=\"Significant enriched KO\")\n\nmkk &lt;- enrichMKEGG(gene         = datos.j[datos.j$cluster==\"Less permissive\",1],\n                 organism     = 'tth',\n                   pvalueCutoff = 1,\n                   qvalueCutoff = 1)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/tth/module\"...\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/module\"...\n\n\nShow the code\np2 &lt;- dotplot(mkk, title=\"Significant enriched KEGG modules\")\n\nbrowseKEGG(kk, 'tth00970')\nbrowseKEGG(kk, 'tth00740')\n\nggarrange(p1, p2, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2)\n\n\n\n\n\nFigure 19. Significantly enriched KEGG Ontology groups made up of Less permissive genes by KEGG ontology groups (A) or KEGG modules (B).\n\n\n\n\nAs you can see in the following links, most of the genes involved in aminoacyl tRNA biosynthesis and Rivoflavin metabolism are significantly enriched among “Less permissive genes”.\n\nClick for Session Information\n\n\n\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggrepel_0.9.5               DESeq2_1.44.0              \n [3] SummarizedExperiment_1.34.0 Biobase_2.64.0             \n [5] MatrixGenerics_1.16.0       matrixStats_1.3.0          \n [7] GenomicRanges_1.56.0        GenomeInfoDb_1.40.1        \n [9] IRanges_2.38.0              S4Vectors_0.42.0           \n[11] BiocGenerics_0.50.0         clusterProfiler_4.12.0     \n[13] ggpmisc_0.5.6               ggpp_0.5.7                 \n[15] cluster_2.1.6               factoextra_1.0.7           \n[17] details_0.3.0               ggpubr_0.6.0               \n[19] lubridate_1.9.3             forcats_1.0.0              \n[21] stringr_1.5.1               purrr_1.0.2                \n[23] readr_2.1.5                 tidyr_1.3.1                \n[25] tibble_3.2.1                tidyverse_2.0.0            \n[27] dplyr_1.1.4                 readxl_1.4.3               \n[29] DT_0.33                     data.table_1.15.4          \n[31] ggplot2_3.5.1               formatR_1.14               \n[33] knitr_1.47                  BiocManager_1.30.23        \n\nloaded via a namespace (and not attached):\n  [1] splines_4.4.0           ggplotify_0.1.2         cellranger_1.1.0       \n  [4] polyclip_1.10-6         confintr_1.0.2          lifecycle_1.0.4        \n  [7] rstatix_0.7.2           lattice_0.22-6          MASS_7.3-61            \n [10] crosstalk_1.2.1         backports_1.5.0         magrittr_2.0.3         \n [13] sass_0.4.9              rmarkdown_2.27          jquerylib_0.1.4        \n [16] yaml_2.3.8              cowplot_1.1.3           DBI_1.2.3              \n [19] RColorBrewer_1.1-3      abind_1.4-5             zlibbioc_1.50.0        \n [22] ggraph_2.2.1            yulab.utils_0.1.4       tweenr_2.0.3           \n [25] GenomeInfoDbData_1.2.12 enrichplot_1.24.0       tidytree_0.4.6         \n [28] MatrixModels_0.5-3      codetools_0.2-20        DelayedArray_0.30.1    \n [31] DOSE_3.30.1             xml2_1.3.6              ggforce_0.4.2          \n [34] tidyselect_1.2.1        aplot_0.2.3             UCSC.utils_1.0.0       \n [37] farver_2.1.2            viridis_0.6.5           jsonlite_1.8.8         \n [40] tidygraph_1.3.1         survival_3.7-0          tools_4.4.0            \n [43] treeio_1.28.0           Rcpp_1.0.12             glue_1.7.0             \n [46] gridExtra_2.3           SparseArray_1.4.8       xfun_0.45              \n [49] qvalue_2.36.0           withr_3.0.0             fastmap_1.2.0          \n [52] fansi_1.0.6             SparseM_1.83            digest_0.6.35          \n [55] timechange_0.3.0        R6_2.5.1                gridGraphics_0.5-1     \n [58] colorspace_2.1-0        GO.db_3.19.1            RSQLite_2.3.7          \n [61] utf8_1.2.4              generics_0.1.3          ggsci_3.2.0            \n [64] graphlayouts_1.1.1      httr_1.4.7              htmlwidgets_1.6.4      \n [67] S4Arrays_1.4.1          scatterpie_0.2.3        pkgconfig_2.0.3        \n [70] gtable_0.3.5            blob_1.2.4              XVector_0.44.0         \n [73] shadowtext_0.1.3        htmltools_0.5.8.1       carData_3.0-5          \n [76] fgsea_1.30.0            scales_1.3.0            png_0.1-8              \n [79] ggfun_0.1.5             rstudioapi_0.16.0       tzdb_0.4.0             \n [82] reshape2_1.4.4          nlme_3.1-165            cachem_1.1.0           \n [85] parallel_4.4.0          HDO.db_0.99.1           AnnotationDbi_1.66.0   \n [88] desc_1.4.3              pillar_1.9.0            grid_4.4.0             \n [91] vctrs_0.6.5             car_3.1-2               evaluate_0.24.0        \n [94] cli_3.6.2               locfit_1.5-9.9          compiler_4.4.0         \n [97] rlang_1.1.4             crayon_1.5.2            ggsignif_0.6.4         \n[100] labeling_0.4.3          plyr_1.8.9              fs_1.6.4               \n[103] stringi_1.8.4           viridisLite_0.4.2       BiocParallel_1.38.0    \n[106] munsell_0.5.1           Biostrings_2.72.1       lazyeval_0.2.2         \n[109] GOSemSim_2.30.0         quantreg_5.98           Matrix_1.7-0           \n[112] hms_1.1.3               patchwork_1.2.0         bit64_4.0.5            \n[115] KEGGREST_1.44.0         clipr_0.8.0             igraph_2.0.3           \n[118] broom_1.0.6             memoise_2.0.1           bslib_0.7.0            \n[121] ggtree_3.12.0           fastmatch_1.1-4         bit_4.0.5              \n[124] ape_5.8                 gson_0.1.0              polynom_1.4-1"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thermus thermophilus TnSeq",
    "section": "",
    "text": "This site contains the data, scripts and results of a TnSeq experiment performed in Thermus thermophilus HB27 in the laboratory of Mario Mencía & José Berenguer (CBMSO, UAM-CSIC). This analysis was performed by Modesto Redrejo Rodríguez (Biochemistry Department, UAM).\nIn this study we develop a procedure for thermostable selection of random insertion mutants based on a gene cassette encoding a thermostable resistance to kanamycin flanked by the recognition sites (ME sites) for Tn5 transposase Kia et al. (2017). The transposition library generated in vitro was initialy transformed in a PrimPol mutant Hb27 dericative (ppol), which shows 2-3 log fold transformation efficiency García-Quintans et al. (2020). This allowed the generation of the generation of a large library of insertion mutants (“Mother”), which was later transferred to a wild type HB27 strain (“Daughter”). Both libraries were sequenced straightforward and after several culture passages.\nFor sequencing DNA was purified by …. and…."
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "Thermus thermophilus TnSeq",
    "section": "",
    "text": "This site contains the data, scripts and results of a TnSeq experiment performed in Thermus thermophilus HB27 in the laboratory of Mario Mencía & José Berenguer (CBMSO, UAM-CSIC). This analysis was performed by Modesto Redrejo Rodríguez (Biochemistry Department, UAM).\nIn this study we develop a procedure for thermostable selection of random insertion mutants based on a gene cassette encoding a thermostable resistance to kanamycin flanked by the recognition sites (ME sites) for Tn5 transposase Kia et al. (2017). The transposition library generated in vitro was initialy transformed in a PrimPol mutant Hb27 dericative (ppol), which shows 2-3 log fold transformation efficiency García-Quintans et al. (2020). This allowed the generation of the generation of a large library of insertion mutants (“Mother”), which was later transferred to a wild type HB27 strain (“Daughter”). Both libraries were sequenced straightforward and after several culture passages.\nFor sequencing DNA was purified by …. and…."
  },
  {
    "objectID": "index.html#funding",
    "href": "index.html#funding",
    "title": "Thermus thermophilus TnSeq",
    "section": "Funding",
    "text": "Funding\nThis work was supported by grant number PID2019-109073RB-I00 from the Spanish Research Agency (AEI, Spanish Ministry of Science and Innovation)."
  },
  {
    "objectID": "panthermus.html#enrichment-analysis",
    "href": "panthermus.html#enrichment-analysis",
    "title": "Thermus Pangenome",
    "section": "Enrichment analysis",
    "text": "Enrichment analysis\n\n\nShow the code\nkk &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$thermaceae_i4c5==\"persistent\",1]),\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/tth/pathway\"...\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/tth\"...\n\n\nShow the code\np1 &lt;- dotplot(kk, title=\"Thermaceae core genome\")\n\nkk_D &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$deinococcota_i4c5==\"persistent\",1]),\n                 organism     = 'tth',\n                 pvalueCutoff = 0.05)\np2 &lt;- dotplot(kk_D, title=\"Deinococcota core genome\")\n\nggarrange(p1, p2, \n          labels = c(\"A\", \"B\"), ncol=1,nrow = 2)\n\n\n\n\n\nFigure 22. Significantly enriched KEGG Ontology groups made up of Intermediate/Less permissive genes within the Core genome (persistant genes) of Thermaceae (A) or Deinococcota (B).\n\n\n\n\n\n\nShow the code\nuniprot &lt;- bitr_kegg(panTnseq_Full$Genes, fromType=\"kegg\", toType='uniprot', organism='tth')\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/conv/uniprot/tth\"...\n\n\nShow the code\npanTnseq_Full &lt;- panTnseq_Full %&gt;%\n  mutate(uni = replace(Genes, Genes %in% uniprot$kegg, uniprot$uniprot))\n\nkk &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$thermus_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/conv/uniprot/tth\"...\n\n\nShow the code\np1 &lt;- dotplot(kk, title=\"Thermus core genome\")\n\n\nkk_t &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$thermaceae_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\np2 &lt;- dotplot(kk_t, title=\"Thermaceae core genome\")\n\nkk_D &lt;- enrichKEGG(gene         = na.omit(panTnseq_Full[panTnseq_Full$cluster!=\"Highly permissive\"  & panTnseq_Full$deinococcota_i4c5==\"persistent\",30]),\n           organism     = 'tth', keyType = 'uniprot',\n           pvalueCutoff = 0.05)\np3 &lt;- dotplot(kk_D, title=\"Deinococcota core genome\")\n\nggarrange(p1, p2, p3,\n          labels = c(\"A\", \"B\", \"C\"), ncol=1,nrow = 3)\n\n\n\n\n\nFigure 23. Significantly enriched KEGG Ontology groups made up of Intermediate/Less permissive genes within the Core genome (persistant genes) of Thermaceae (A) or Deinococcota (B).\n\n\n\n\n\nClick for Session Information\n\n\n\n\n\n\n\n\nShow the code\nsessionInfo()\n\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggpubr_0.6.0           clusterProfiler_4.12.0 RColorBrewer_1.1-3    \n [4] corrplot_0.92          ggstats_0.6.0          patchwork_1.2.0       \n [7] lubridate_1.9.3        forcats_1.0.0          stringr_1.5.1         \n[10] purrr_1.0.2            readr_2.1.5            tidyr_1.3.1           \n[13] tibble_3.2.1           tidyverse_2.0.0        dplyr_1.1.4           \n[16] DT_0.33                data.table_1.15.4      ggplot2_3.5.1         \n[19] formatR_1.14           knitr_1.47            \n\nloaded via a namespace (and not attached):\n  [1] rstudioapi_0.16.0       jsonlite_1.8.8          magrittr_2.0.3         \n  [4] farver_2.1.2            rmarkdown_2.27          fs_1.6.4               \n  [7] zlibbioc_1.50.0         vctrs_0.6.5             memoise_2.0.1          \n [10] ggtree_3.12.0           rstatix_0.7.2           htmltools_0.5.8.1      \n [13] broom_1.0.6             gridGraphics_0.5-1      htmlwidgets_1.6.4      \n [16] plyr_1.8.9              cachem_1.1.0            igraph_2.0.3           \n [19] lifecycle_1.0.4         pkgconfig_2.0.3         fuzzyjoin_0.1.6        \n [22] Matrix_1.7-0            R6_2.5.1                fastmap_1.2.0          \n [25] gson_0.1.0              GenomeInfoDbData_1.2.12 digest_0.6.35          \n [28] aplot_0.2.3             enrichplot_1.24.0       colorspace_2.1-0       \n [31] AnnotationDbi_1.66.0    S4Vectors_0.42.0        RSQLite_2.3.7          \n [34] labeling_0.4.3          fansi_1.0.6             timechange_0.3.0       \n [37] abind_1.4-5             httr_1.4.7              polyclip_1.10-6        \n [40] compiler_4.4.0          bit64_4.0.5             withr_3.0.0            \n [43] backports_1.5.0         BiocParallel_1.38.0     carData_3.0-5          \n [46] viridis_0.6.5           DBI_1.2.3               ggforce_0.4.2          \n [49] ggsignif_0.6.4          MASS_7.3-61             HDO.db_0.99.1          \n [52] tools_4.4.0             ape_5.8                 scatterpie_0.2.3       \n [55] glue_1.7.0              nlme_3.1-165            GOSemSim_2.30.0        \n [58] grid_4.4.0              shadowtext_0.1.3        reshape2_1.4.4         \n [61] fgsea_1.30.0            generics_0.1.3          gtable_0.3.5           \n [64] tzdb_0.4.0              hms_1.1.3               car_3.1-2              \n [67] tidygraph_1.3.1         utf8_1.2.4              XVector_0.44.0         \n [70] BiocGenerics_0.50.0     ggrepel_0.9.5           pillar_1.9.0           \n [73] vroom_1.6.5             yulab.utils_0.1.4       splines_4.4.0          \n [76] tweenr_2.0.3            treeio_1.28.0           lattice_0.22-6         \n [79] bit_4.0.5               tidyselect_1.2.1        GO.db_3.19.1           \n [82] Biostrings_2.72.1       gridExtra_2.3           IRanges_2.38.0         \n [85] stats4_4.4.0            xfun_0.45               graphlayouts_1.1.1     \n [88] Biobase_2.64.0          stringi_1.8.4           UCSC.utils_1.0.0       \n [91] lazyeval_0.2.2          ggfun_0.1.5             yaml_2.3.8             \n [94] evaluate_0.24.0         codetools_0.2-20        ggraph_2.2.1           \n [97] qvalue_2.36.0           ggplotify_0.1.2         cli_3.6.2              \n[100] munsell_0.5.1           Rcpp_1.0.12             GenomeInfoDb_1.40.1    \n[103] png_0.1-8               parallel_4.4.0          blob_1.2.4             \n[106] DOSE_3.30.1             viridisLite_0.4.2       tidytree_0.4.6         \n[109] scales_1.3.0            crayon_1.5.2            rlang_1.1.4            \n[112] cowplot_1.1.3           fastmatch_1.1-4         KEGGREST_1.44.0"
  }
]